{"version":3,"file":"src_app_syllogimous_syllogimous_module_ts.js","mappings":"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C,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,CAAE;EACrD,CAAC,EAAE,CAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,CAAE;EACrD,CAAC,EAAE,CAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,CAAE;EACrD,CAAC,EAAE,CAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,CAAE;EACrD,CAAC,EAAE,CAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,CAAE;EACrD,CAAC,EAAE,CAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,CAAE;EACrD,CAAC,EAAE,CAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,CAAE;EACrD,CAAC,EAAE,CAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,CAAE;EACrD,CAAC,EAAE,CAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,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","sources":["./src/app/syllogimous/components/card/card-dropdown/card-dropdown.component.ts","./src/app/syllogimous/components/card/card-dropdown/card-dropdown.component.html","./src/app/syllogimous/components/card/card.component.ts","./src/app/syllogimous/components/card/card.component.html","./src/app/syllogimous/components/modal-level-change/modal-level-change.component.html","./src/app/syllogimous/components/modal-level-change/modal-level-change.component.ts","./src/app/syllogimous/components/progress-and-performance/progress-and-performance.component.html","./src/app/syllogimous/components/progress-and-performance/progress-and-performance.component.ts","./src/app/syllogimous/constants/local-storage.constants.ts","./src/app/syllogimous/constants/question.constants.ts","./src/app/syllogimous/constants/settings.constants.ts","./src/app/syllogimous/constants/syllogimous.constants.ts","./src/app/syllogimous/models/question.models.ts","./src/app/syllogimous/models/settings.models.ts","./src/app/syllogimous/models/stats.models.ts","./src/app/syllogimous/pages/feedback/feedback.component.ts","./src/app/syllogimous/pages/feedback/feedback.component.html","./src/app/syllogimous/pages/game/game.component.ts","./src/app/syllogimous/pages/game/game.component.html","./src/app/syllogimous/pages/history/history.component.ts","./src/app/syllogimous/pages/history/history.component.html","./src/app/syllogimous/pages/intro/intro.component.ts","./src/app/syllogimous/pages/intro/intro.component.html","./src/app/syllogimous/pages/other-games/other-games.component.ts","./src/app/syllogimous/pages/other-games/other-games.component.html","./src/app/syllogimous/pages/playground-mode/playground-mode.component.ts","./src/app/syllogimous/pages/playground-mode/playground-mode.component.html","./src/app/syllogimous/pages/settings/game-mode-choose/game-mode-choose.component.ts","./src/app/syllogimous/pages/settings/game-mode-choose/game-mode-choose.component.html","./src/app/syllogimous/pages/settings/modal-timer-settings/modal-timer-settings.component.ts","./src/app/syllogimous/pages/settings/modal-timer-settings/modal-timer-settings.component.html","./src/app/syllogimous/pages/settings/settings.component.ts","./src/app/syllogimous/pages/settings/settings.component.html","./src/app/syllogimous/pages/settings/timer-choose/timer-choose.component.ts","./src/app/syllogimous/pages/settings/timer-choose/timer-choose.component.html","./src/app/syllogimous/pages/start/start.component.ts","./src/app/syllogimous/pages/start/start.component.html","./src/app/syllogimous/pages/stats/accuracy-stats/accuracy-stats.component.ts","./src/app/syllogimous/pages/stats/accuracy-stats/accuracy-stats.component.html","./src/app/syllogimous/pages/stats/error-analysis/error-analysis.component.ts","./src/app/syllogimous/pages/stats/error-analysis/error-analysis.component.html","./src/app/syllogimous/pages/stats/stats.component.ts","./src/app/syllogimous/pages/stats/stats.component.html","./src/app/syllogimous/pages/stats/tier-stats/tier-stats.component.ts","./src/app/syllogimous/pages/stats/tier-stats/tier-stats.component.html","./src/app/syllogimous/pages/stats/time-based-stats/time-based-stats.component.ts","./src/app/syllogimous/pages/stats/time-based-stats/time-based-stats.component.html","./src/app/syllogimous/pages/stats/type-based-stats/type-based-stats.component.ts","./src/app/syllogimous/pages/stats/type-based-stats/type-based-stats.component.html","./src/app/syllogimous/pages/tiers-matrix/tiers-matrix.component.ts","./src/app/syllogimous/pages/tiers-matrix/tiers-matrix.component.html","./src/app/syllogimous/pages/tutorial/analogy/analogy.component.ts","./src/app/syllogimous/pages/tutorial/analogy/analogy.component.html","./src/app/syllogimous/pages/tutorial/binary/binary.component.ts","./src/app/syllogimous/pages/tutorial/binary/binary.component.html","./src/app/syllogimous/pages/tutorial/circular-arrangement/circular-arrangement.component.ts","./src/app/syllogimous/pages/tutorial/circular-arrangement/circular-arrangement.component.html","./src/app/syllogimous/pages/tutorial/comparison-chronological/comparison-chronological.component.ts","./src/app/syllogimous/pages/tutorial/comparison-chronological/comparison-chronological.component.html","./src/app/syllogimous/pages/tutorial/comparison-numerical/comparison-numerical.component.ts","./src/app/syllogimous/pages/tutorial/comparison-numerical/comparison-numerical.component.html","./src/app/syllogimous/pages/tutorial/direction3D-spatial/direction3D-spatial.component.ts","./src/app/syllogimous/pages/tutorial/direction3D-spatial/direction3D-spatial.component.html","./src/app/syllogimous/pages/tutorial/direction3D-temporal/direction3D-temporal.component.ts","./src/app/syllogimous/pages/tutorial/direction3D-temporal/direction3D-temporal.component.html","./src/app/syllogimous/pages/tutorial/direction/direction.component.ts","./src/app/syllogimous/pages/tutorial/direction/direction.component.html","./src/app/syllogimous/pages/tutorial/distinction/distinction.component.ts","./src/app/syllogimous/pages/tutorial/distinction/distinction.component.html","./src/app/syllogimous/pages/tutorial/graph-matching/graph-matching.component.ts","./src/app/syllogimous/pages/tutorial/graph-matching/graph-matching.component.html","./src/app/syllogimous/pages/tutorial/linear-arrangement/linear-arrangement.component.ts","./src/app/syllogimous/pages/tutorial/linear-arrangement/linear-arrangement.component.html","./src/app/syllogimous/pages/tutorial/syllogism/syllogism.component.ts","./src/app/syllogimous/pages/tutorial/syllogism/syllogism.component.html","./src/app/syllogimous/pages/tutorial/tutorial.component.ts","./src/app/syllogimous/pages/tutorial/tutorial.component.html","./src/app/syllogimous/pages/tutorials/tutorials.component.ts","./src/app/syllogimous/pages/tutorials/tutorials.component.html","./src/app/syllogimous/services/game-timer.service.ts","./src/app/syllogimous/services/progress-and-performance.service.ts","./src/app/syllogimous/services/stats-export.service.ts","./src/app/syllogimous/services/stats.service.ts","./src/app/syllogimous/services/syllogimous.service.ts","./src/app/syllogimous/syllogimous.component.ts","./src/app/syllogimous/syllogimous.component.html","./src/app/syllogimous/syllogimous.module.ts","./src/app/syllogimous/utils/logger.ts","./src/app/syllogimous/utils/question.utils.ts","./src/app/utils/date.ts","./src/app/utils/file.ts"],"sourcesContent":["import { Component } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { NgbModal } from '@ng-bootstrap/ng-bootstrap';\r\nimport { LS_DAILY_GOAL, LS_DAILY_PROGRESS, LS_DONT_SHOW, LS_GAME_MODE, LS_HISTORY, LS_PG_SETTINGS, LS_PREMISES_DOWN_THRESHOLD, LS_PREMISES_UP_THRESHOLD, LS_PROPS, LS_SCORE, LS_TIMER, LS_TRAINING_UNIT, LS_TRAINING_UNIT_LENGTH, LS_WEEKLY_GOAL } from 'src/app/syllogimous/constants/local-storage.constants';\r\nimport { EnumQuestionType } from 'src/app/syllogimous/constants/question.constants';\r\nimport { EnumScreens } from 'src/app/syllogimous/constants/syllogimous.constants';\r\nimport { SyllogimousService } from 'src/app/syllogimous/services/syllogimous.service';\r\nimport { downloadFile } from 'src/app/utils/file';\r\n\r\n@Component({\r\n    selector: 'app-card-dropdown',\r\n    templateUrl: './card-dropdown.component.html',\r\n    styleUrls: ['./card-dropdown.component.scss']\r\n})\r\nexport class CardDropdownComponent {\r\n    EnumScreens = EnumScreens;\r\n\r\n    constructor(\r\n        public sylSrv: SyllogimousService,\r\n        public router: Router,\r\n        private modalService: NgbModal,\r\n    ) { }\r\n\r\n    ngAfterViewInit() {\r\n        this.toggleDarkmode(true);\r\n    }\r\n\r\n    async resetGame(content: any) {\r\n        await this.modalService.open(content, { centered: true }).result;\r\n\r\n        for (const lsProp of LS_PROPS) {\r\n            localStorage.removeItem(lsProp);\r\n        }\r\n\r\n        location.reload();\r\n    }\r\n\r\n    toggleDarkmode(initial = false) {\r\n        if (!initial) {\r\n            localStorage.setItem(\"darkmode\", JSON.stringify(!this.getDarkmode()));\r\n        }\r\n        if (this.getDarkmode()) {\r\n            document.querySelector(\"html\")?.setAttribute(\"darkmode\", \"\");\r\n        } else {\r\n            document.querySelector(\"html\")?.removeAttribute(\"darkmode\");\r\n        }\r\n    }\r\n\r\n    getDarkmode() {\r\n        return JSON.parse(localStorage.getItem(\"darkmode\") || \"false\");\r\n    }\r\n\r\n    import(evt: any) {\r\n        const file = evt.target.files[0];\r\n        if (!file) {\r\n            alert(\"No JSON file selected\");\r\n            return;\r\n        }\r\n\r\n        const reader = new FileReader();\r\n        reader.onload = (e) => {\r\n            const importJson = e.target?.result;\r\n            if (!importJson || typeof importJson !== \"string\") {\r\n                alert(\"Invalid JSON file\");\r\n                return;\r\n            }\r\n\r\n            const confirmation = confirm(\"Importing will overwrite all existing settings. Are you sure?\");\r\n            if (!confirmation) {\r\n                return;\r\n            }\r\n\r\n            const data = JSON.parse(importJson);\r\n            for (const [key, value] of Object.entries(data)) {\r\n                localStorage.setItem(key, value as string);\r\n            }\r\n\r\n            setTimeout(() => {\r\n                alert(\"Import completed successfully!\");\r\n                window.location.reload();\r\n            }, 400);\r\n        };\r\n        reader.readAsText(file);\r\n    }\r\n\r\n    export() {\r\n        const exportJson: Record<string, string> = {};\r\n        for (const lsProp of LS_PROPS) {\r\n            const propVal = localStorage.getItem(lsProp)\r\n            if (propVal) {\r\n                exportJson[lsProp] = propVal;\r\n            }\r\n        }\r\n\r\n        downloadFile(\r\n            new Blob([JSON.stringify(exportJson)], { type: \"text/plain\" }),\r\n            `syllogimous-export_${new Date().toLocaleDateString(\"sv\")}.json`\r\n        );\r\n\r\n        setTimeout(() => alert(\"Export completed successfully!\"), 400);\r\n    }\r\n}\r\n","<ng-template #content let-modal>\r\n    <div class=\"modal-header\">\r\n        <h4\r\n            class=\"modal-title\"\r\n            id=\"modal-basic-title\"\r\n        >Are you sure?</h4>\r\n        <button\r\n            class=\"btn-close\"\r\n            aria-label=\"Close\"\r\n            (click)=\"modal.dismiss()\"\r\n        ></button>\r\n    </div>\r\n    <div class=\"modal-body\">\r\n        All your progresses will be deleted.<br>Are you sure you want to proceed with the reset?\r\n    </div>\r\n    <div class=\"modal-footer\">\r\n        <button\r\n            class=\"btn btn-outline-secondary\"\r\n            (click)=\"modal.dismiss()\"\r\n        >Cancel</button>\r\n        <button\r\n            class=\"btn btn-danger\"\r\n            (click)=\"modal.close()\"\r\n        >Continue</button>\r\n    </div>\r\n</ng-template>\r\n\r\n<div>\r\n    <div\r\n        ngbDropdown\r\n        container=\"body\"\r\n    >\r\n        <button\r\n            class=\"btn\"\r\n            ngbDropdownToggle\r\n        >More</button>\r\n        <div ngbDropdownMenu>\r\n            <small class=\"text-muted ms-3\">Pages</small>\r\n            <button\r\n                ngbDropdownItem\r\n                (click)=\"router.navigate([EnumScreens.Start])\"\r\n            >Start</button>\r\n            <button\r\n                ngbDropdownItem\r\n                (click)=\"router.navigate([EnumScreens.Intro])\"\r\n            >Intro</button>\r\n            <button\r\n                ngbDropdownItem\r\n                (click)=\"router.navigate([EnumScreens.Stats])\"\r\n            >Stats</button>\r\n            <button\r\n                ngbDropdownItem\r\n                (click)=\"router.navigate([EnumScreens.History])\"\r\n            >History</button>\r\n            <button\r\n                ngbDropdownItem\r\n                (click)=\"router.navigate([EnumScreens.Settings])\"\r\n            >Settings</button>\r\n            <button\r\n                ngbDropdownItem\r\n                (click)=\"router.navigate([EnumScreens.Tutorials])\"\r\n            >Tutorials</button>\r\n            <button\r\n                ngbDropdownItem\r\n                (click)=\"router.navigate([EnumScreens.PlaygroundMode])\"\r\n            >Playground</button>\r\n            <div class=\"dropdown-divider\"></div>\r\n            <small class=\"text-muted ms-3\">Functions</small>\r\n            <button\r\n                ngbDropdownItem\r\n                (click)=\"importInput.click()\"\r\n            >\r\n                <input\r\n                    #importInput\r\n                    type=\"file\"\r\n                    accept=\".json\"\r\n                    (change)=\"import($event)\"\r\n                    hidden\r\n                />\r\n                <i class=\"bi bi-upload\"></i> Import\r\n            </button>\r\n            <button\r\n                ngbDropdownItem\r\n                (click)=\"export()\"\r\n            ><i class=\"bi bi-download\"></i> Export</button>\r\n            <button\r\n                ngbDropdownItem\r\n                (click)=\"toggleDarkmode()\"\r\n            >\r\n                <ng-container *ngIf=\"getDarkmode(); else darkmode\">\r\n                    <i class=\"bi bi-sun\"></i> Lightmode\r\n                </ng-container>\r\n                <ng-template #darkmode>\r\n                    <i class=\"bi bi-moon\"></i> Darkmode\r\n                </ng-template>\r\n            </button>\r\n            <button\r\n                ngbDropdownItem\r\n                (click)=\"resetGame(content)\"\r\n            ><i class=\"bi bi-trash3\"></i> Reset Game</button>\r\n            <div class=\"dropdown-divider\"></div>\r\n            <small class=\"text-muted ms-3\">Links</small>\r\n            <button\r\n                ngbDropdownItem\r\n                (click)=\"router.navigate([EnumScreens.OtherGames])\"\r\n            >Other Games</button>\r\n            <a\r\n                ngbDropdownItem\r\n                href=\"https://www.linkedin.com/in/f3d3r1c07r0774/\"\r\n                target=\"_blank\"\r\n            >About the Author</a>\r\n        </div>\r\n    </div>\r\n</div>","import { Component } from \"@angular/core\";\r\nimport { EnumTiers, TIER_COLORS, TIER_SCORE_RANGES } from \"../../constants/syllogimous.constants\";\r\nimport { SyllogimousService } from \"../../services/syllogimous.service\";\r\n\r\n@Component({\r\n    selector: \"app-card\",\r\n    styleUrls: [\"./card.component.scss\"],\r\n    templateUrl: \"./card.component.html\"\r\n})\r\nexport class CardComponent {\r\n    TIER_COLORS = TIER_COLORS;\r\n    TIER_SCORE_RANGES = TIER_SCORE_RANGES;\r\n    tiers = Object.values(EnumTiers);\r\n    Infinity = Infinity;\r\n\r\n    constructor(\r\n        public sylSrv: SyllogimousService,\r\n    ) {}\r\n}","<div class=\"playcard card\">\r\n    <div class=\"playcard-header card-header\">\r\n        <div class=\"playcard-toolbar\">\r\n            <div>\r\n                <span\r\n                    class=\"tier-badge badge clickable fs-6\"\r\n                    [style.backgroundColor]=\"TIER_COLORS[sylSrv.tier].bgColor\"\r\n                    [style.color]=\"TIER_COLORS[sylSrv.tier].textColor\"\r\n                    [ngbTooltip]=\"tierTooltip\"\r\n                    [autoClose]=\"'outside'\"\r\n                    triggers=\"click\"\r\n                >\r\n                    {{ sylSrv.tier }} <i class=\"bi bi-info-circle\"></i>\r\n                </span>\r\n                <ng-template #tierTooltip>\r\n                    <div class=\"text-start\">\r\n                        <div *ngFor=\"let tier of tiers\">\r\n                            <span class=\"badge\" style=\"width: 80px;\" [style.backgroundColor]=\"TIER_COLORS[tier].bgColor\" [style.color]=\"TIER_COLORS[tier].textColor\">{{ tier }}</span> {{ (TIER_SCORE_RANGES[tier].maxScore === Infinity) ? \"above\" : \"\" }} {{ (TIER_SCORE_RANGES[tier].minScore === -Infinity) ? \"\" : TIER_SCORE_RANGES[tier].minScore }} {{ (TIER_SCORE_RANGES[tier].maxScore === Infinity) ? \"\" : (TIER_SCORE_RANGES[tier].minScore === -Infinity) ? \"below\" : \"-\" }} {{ (TIER_SCORE_RANGES[tier].maxScore === Infinity) ? \"\" : (TIER_SCORE_RANGES[tier].maxScore + 1) }} pts\r\n                        </div>\r\n                    </div>\r\n                </ng-template>\r\n                <span class=\"text-muted ms-2\">{{ sylSrv.score }} pts</span>\r\n            </div>\r\n            <app-card-dropdown></app-card-dropdown>\r\n        </div>\r\n    </div>\r\n\r\n    <div class=\"card-body p-0 overflow-hidden position-relative\">\r\n        <div class=\"playcard-body\">\r\n            <ng-content select=\"[body]\"></ng-content>\r\n        </div>\r\n    </div>\r\n\r\n    <div class=\"playcard-footer card-footer\">\r\n        <ng-content select=\"[footer]\"></ng-content>\r\n    </div>\r\n</div>","<div class=\"modal-body p-5 text-center\">\r\n    <h4 [innerHTML]=\"title\"></h4>\r\n\r\n    <div class=\"my-4\" style=\"font-size: 1.15rem;\">\r\n        <div *ngFor=\"let content of contents\" [innerHTML]=\"content\"></div>\r\n    </div>\r\n\r\n    <button class=\"btn btn-primary\" (click)=\"activeModal.close('Ok click')\">Got It!</button>\r\n</div>\r\n","import { Component, Input } from '@angular/core';\r\nimport { NgbActiveModal } from '@ng-bootstrap/ng-bootstrap';\r\n\r\n@Component({\r\n    selector: 'app-modal-level-change',\r\n    templateUrl: './modal-level-change.component.html',\r\n    styleUrls: ['./modal-level-change.component.css']\r\n})\r\nexport class ModalLevelChangeComponent {\r\n    @Input(\"title\") title?: string;\r\n    @Input(\"content\") content?: string;\r\n    contents: string[] = [];\r\n\r\n    constructor(\r\n        public activeModal: NgbActiveModal\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n        if (this.content) {\r\n            this.contents = this.content.split(\"\\n\");\r\n        }\r\n    }\r\n}\r\n","<div class=\"progressbars-wrap\">\r\n    <div class=\"progressbars\">\r\n        <ng-container>\r\n            <div class=\"progress progressbar\">\r\n                <div\r\n                    class=\"progress-bar progress-1 position-relative overflow-visible\"\r\n                    [class.progress-2]=\"dailyProgressPercentage > 10\"\r\n                    [class.progress-3]=\"dailyProgressPercentage > 20\"\r\n                    [class.progress-4]=\"dailyProgressPercentage > 30\"\r\n                    [class.progress-5]=\"dailyProgressPercentage > 40\"\r\n                    [class.progress-6]=\"dailyProgressPercentage > 50\"\r\n                    [class.progress-7]=\"dailyProgressPercentage > 60\"\r\n                    [class.progress-8]=\"dailyProgressPercentage > 70\"\r\n                    [class.progress-9]=\"dailyProgressPercentage > 80\"\r\n                    [class.progress-10]=\"dailyProgressPercentage > 90\"\r\n                    [style.width]=\"dailyProgressPercentage + '%'\"\r\n                >\r\n                    <span class=\"me-2\">{{dailyProgressPercentage}} %</span>\r\n                    <span class=\"progress-label\">Daily time goal</span>\r\n                </div>\r\n            </div>\r\n        </ng-container>\r\n    \r\n        <ng-container *ngIf=\"!feedbackPage\">\r\n            <div class=\"progress progressbar\">\r\n                <div\r\n                    class=\"progress-bar progress-1 position-relative overflow-visible\"\r\n                    [class.progress-2]=\"weeklyProgressPercentage > 10\"\r\n                    [class.progress-3]=\"weeklyProgressPercentage > 20\"\r\n                    [class.progress-4]=\"weeklyProgressPercentage > 30\"\r\n                    [class.progress-5]=\"weeklyProgressPercentage > 40\"\r\n                    [class.progress-6]=\"weeklyProgressPercentage > 50\"\r\n                    [class.progress-7]=\"weeklyProgressPercentage > 60\"\r\n                    [class.progress-8]=\"weeklyProgressPercentage > 70\"\r\n                    [class.progress-9]=\"weeklyProgressPercentage > 80\"\r\n                    [class.progress-10]=\"weeklyProgressPercentage > 90\"\r\n                    [style.width]=\"weeklyProgressPercentage + '%'\"\r\n                >\r\n                    <span class=\"me-2\">{{weeklyProgressPercentage}} %</span>\r\n                    <span class=\"progress-label\">Weekly time goal</span>\r\n                </div>\r\n            </div>\r\n        </ng-container>\r\n\r\n        <ng-container *ngIf=\"!playgroundMode && feedbackPage && debug\">\r\n            <div class=\"progress progressbar partials\">\r\n                <div\r\n                    class=\"progress-bar text-center\"\r\n                    [style.width]=\"trainingUnitPercentage.percentageRight + '%'\"\r\n                    ngbTooltip=\"This section represents the percentage of questions you have answered correctly for this question type over the last 10 questions of the same type.\"\r\n                    container=\"body\"\r\n                >\r\n                    <span class=\"px-2\">\r\n                        {{trainingUnitPercentage.right}}\r\n                    </span>\r\n                </div>\r\n    \r\n                <div\r\n                    class=\"progress-bar text-center\"\r\n                    [style.width]=\"trainingUnitPercentage.percentageTimeout + '%'\"\r\n                    ngbTooltip=\"This section shows the percentage of questions that timed out before you could answer for this question type over the last 10 questions of the same type.\"\r\n                    container=\"body\"\r\n                >\r\n                    <span class=\"px-2\">\r\n                        {{trainingUnitPercentage.timeout}}\r\n                    </span>\r\n                </div>\r\n    \r\n                <div\r\n                    class=\"progress-bar text-center position-relative overflow-visible\"\r\n                    [style.width]=\"trainingUnitPercentage.percentageWrong + '%'\"\r\n                    ngbTooltip=\"This section indicates the percentage of questions you answered incorrectly for this question type over the last 10 questions of the same type.\"\r\n                    container=\"body\"\r\n                >\r\n                    <span class=\"px-2\">\r\n                        {{trainingUnitPercentage.wrong}}\r\n                    </span>\r\n                    <span class=\"progress-label\">{{ sylSrv.question.type }}</span>\r\n                </div>\r\n            </div>\r\n        </ng-container>\r\n    </div>\r\n</div>","import { Component, Input } from '@angular/core';\r\nimport { ProgressAndPerformanceService } from '../../services/progress-and-performance.service';\r\nimport { SyllogimousService } from '../../services/syllogimous.service';\r\n\r\n@Component({\r\n    selector: 'app-progress-and-performance',\r\n    templateUrl: './progress-and-performance.component.html',\r\n    styleUrls: ['./progress-and-performance.component.scss']\r\n})\r\nexport class DailyProgressComponent {\r\n    @Input(\"feedbackPage\") feedbackPage = false;\r\n    @Input(\"playgroundMode\") playgroundMode = false;\r\n    @Input(\"debug\") debug = false;\r\n\r\n    dailyProgressPercentage = 0;\r\n    weeklyProgressPercentage = 0;\r\n    trainingUnitPercentage = {\r\n        right: 0,\r\n        timeout: 0,\r\n        wrong: 0,\r\n        percentageRight: 0,\r\n        percentageTimeout: 0,\r\n        percentageWrong: 0\r\n    };\r\n\r\n    constructor(\r\n        public sylSrv: SyllogimousService,\r\n        private progressAndPerformanceService: ProgressAndPerformanceService\r\n    ) {\r\n        const today = progressAndPerformanceService.getToday();\r\n        this.dailyProgressPercentage = progressAndPerformanceService.calcDailyProgress(today);\r\n        this.weeklyProgressPercentage = progressAndPerformanceService.calcWeeklyProgress(today);\r\n        this.trainingUnitPercentage = progressAndPerformanceService.calcTrainingUnitPercentages(sylSrv.question.type);\r\n    }\r\n}","import { EnumQuestionType } from \"./question.constants\";\r\nimport { EnumScreens } from \"./syllogimous.constants\";\r\n\r\nexport const LS_DONT_SHOW = \"SYL_DONT_SHOW:\";\r\nexport const LS_HISTORY = \"SYL_HISTORY\";\r\nexport const LS_TIMER = \"SYL_TIMER_TYPE\";\r\nexport const LS_GAME_MODE = \"SYL_GAME_MODE\";\r\nexport const LS_DAILY_PROGRESS = \"SYL_DAILY_PROGRESS\";\r\nexport const LS_PG_SETTINGS = \"SYL_PG_SETTINGSv1\";\r\nexport const LS_DAILY_GOAL = \"SYL_DAILY_GOAL\";\r\nexport const LS_WEEKLY_GOAL = \"SYL_WEEKLY_GOAL\";\r\nexport const LS_TRAINING_UNIT = \"SYL_TRAINING_UNIT:\";\r\nexport const LS_TRAINING_UNIT_LENGTH = \"SYL_TRAINING_UNIT_LENGTH\";\r\nexport const LS_PREMISES_UP_THRESHOLD = \"SYL_PREMISES_UP_THRESHOLD\";\r\nexport const LS_PREMISES_DOWN_THRESHOLD = \"SYL_PREMISES_DOWN_THRESHOLD\";\r\nexport const LS_SCORE = \"SYL_SCORE\";\r\n\r\nexport const LS_PROPS = [\r\n    LS_HISTORY,\r\n    LS_TIMER,\r\n    LS_GAME_MODE,\r\n    LS_DAILY_PROGRESS,\r\n    LS_PG_SETTINGS,\r\n    LS_DAILY_GOAL,\r\n    LS_WEEKLY_GOAL,\r\n    LS_TRAINING_UNIT_LENGTH,\r\n    LS_PREMISES_UP_THRESHOLD,\r\n    LS_PREMISES_DOWN_THRESHOLD,\r\n    LS_SCORE,\r\n];\r\n\r\nfor (const screen of Object.values(EnumScreens)) {\r\n    LS_PROPS.push(LS_DONT_SHOW + screen);\r\n}\r\n\r\nfor (const type of Object.values(EnumQuestionType)) {\r\n    LS_PROPS.push(LS_DONT_SHOW + type);\r\n    LS_PROPS.push(LS_TRAINING_UNIT + type);\r\n}","export enum EnumQuestionType {\r\n    Distinction = \"Distinction\",\r\n    ComparisonNumerical = \"Comparison Numerical\",\r\n    ComparisonChronological = \"Comparison Chronological\",\r\n    Syllogism = \"Syllogism\",\r\n    Direction = \"Direction\",\r\n    Direction3DSpatial = \"Direction3D Spatial\",\r\n    Direction3DTemporal = \"Direction3D Temporal\",\r\n    LinearArrangement = \"Linear Arrangement\",\r\n    CircularArrangement = \"Circular Arrangement\",\r\n    GraphMatching = \"Graph Matching\",\r\n    Analogy = \"Analogy\",\r\n    Binary = \"Binary\",\r\n}\r\n\r\nexport enum EnumArrangements {\r\n    AdjacentLeft = \"is adjacent and left of\",\r\n    AdjacentRight = \"is adjacent and right of\",\r\n    Next = \"is next to\",\r\n    NStepsLeft = \"is # steps left of\",\r\n    NStepsRight = \"is # steps right of\",\r\n    Left = \"is at the left of\",\r\n    Right = \"is at the right of\",\r\n    InFront = \"is diametrically opposite to\", // not used by linear\r\n};\r\n\r\nexport const NUMBER_WORDS = [\"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\", \"ten\", \"eleven\", \"twelve\", \"thirteen\", \"fourteen\", \"fifteen\", \"sixteen\", \"seventeen\", \"eighteen\", \"nineteen\"];\r\n\r\nexport const STRINGS = [\r\n    \"QAW\",\r\n    \"QAR\",\r\n    \"QAT\",\r\n    \"QAP\",\r\n    \"QAS\",\r\n    \"QAD\",\r\n    \"QAF\",\r\n    \"QAG\",\r\n    \"QAK\",\r\n    \"QAL\",\r\n    \"QAZ\",\r\n    \"QAX\",\r\n    \"QAC\",\r\n    \"QAV\",\r\n    \"QAB\",\r\n    \"QAN\",\r\n    \"QAM\",\r\n    \"QEW\",\r\n    \"QER\",\r\n    \"QET\",\r\n    \"QEP\",\r\n    \"QES\",\r\n    \"QED\",\r\n    \"QEF\",\r\n    \"QEG\",\r\n    \"QEK\",\r\n    \"QEL\",\r\n    \"QEZ\",\r\n    \"QEX\",\r\n    \"QEC\",\r\n    \"QEV\",\r\n    \"QEB\",\r\n    \"QEN\",\r\n    \"QEM\",\r\n    \"QIW\",\r\n    \"QIR\",\r\n    \"QIT\",\r\n    \"QIP\",\r\n    \"QIS\",\r\n    \"QID\",\r\n    \"QIF\",\r\n    \"QIG\",\r\n    \"QIK\",\r\n    \"QIL\",\r\n    \"QIZ\",\r\n    \"QIX\",\r\n    \"QIC\",\r\n    \"QIV\",\r\n    \"QIB\",\r\n    \"QIN\",\r\n    \"QIM\",\r\n    \"QOW\",\r\n    \"QOR\",\r\n    \"QOT\",\r\n    \"QOP\",\r\n    \"QOS\",\r\n    \"QOD\",\r\n    \"QOF\",\r\n    \"QOG\",\r\n    \"QOK\",\r\n    \"QOL\",\r\n    \"QOZ\",\r\n    \"QOX\",\r\n    \"QOC\",\r\n    \"QOV\",\r\n    \"QOB\",\r\n    \"QON\",\r\n    \"QOM\",\r\n    \"QUW\",\r\n    \"QUR\",\r\n    \"QUT\",\r\n    \"QUP\",\r\n    \"QUS\",\r\n    \"QUD\",\r\n    \"QUF\",\r\n    \"QUG\",\r\n    \"QUK\",\r\n    \"QUL\",\r\n    \"QUZ\",\r\n    \"QUX\",\r\n    \"QUC\",\r\n    \"QUV\",\r\n    \"QUB\",\r\n    \"QUN\",\r\n    \"QUM\",\r\n    \"WAQ\",\r\n    \"WAR\",\r\n    \"WAT\",\r\n    \"WAP\",\r\n    \"WAS\",\r\n    \"WAD\",\r\n    \"WAF\",\r\n    \"WAG\",\r\n    \"WAK\",\r\n    \"WAL\",\r\n    \"WAZ\",\r\n    \"WAX\",\r\n    \"WAC\",\r\n    \"WAV\",\r\n    \"WAB\",\r\n    \"WAN\",\r\n    \"WAM\",\r\n    \"WEQ\",\r\n    \"WER\",\r\n    \"WET\",\r\n    \"WEP\",\r\n    \"WES\",\r\n    \"WED\",\r\n    \"WEF\",\r\n    \"WEG\",\r\n    \"WEK\",\r\n    \"WEL\",\r\n    \"WEZ\",\r\n    \"WEX\",\r\n    \"WEC\",\r\n    \"WEV\",\r\n    \"WEB\",\r\n    \"WEN\",\r\n    \"WEM\",\r\n    \"WIQ\",\r\n    \"WIR\",\r\n    \"WIT\",\r\n    \"WIP\",\r\n    \"WIS\",\r\n    \"WID\",\r\n    \"WIF\",\r\n    \"WIG\",\r\n    \"WIK\",\r\n    \"WIL\",\r\n    \"WIZ\",\r\n    \"WIX\",\r\n    \"WIC\",\r\n    \"WIV\",\r\n    \"WIB\",\r\n    \"WIN\",\r\n    \"WIM\",\r\n    \"WOQ\",\r\n    \"WOR\",\r\n    \"WOT\",\r\n    \"WOP\",\r\n    \"WOS\",\r\n    \"WOD\",\r\n    \"WOF\",\r\n    \"WOG\",\r\n    \"WOK\",\r\n    \"WOL\",\r\n    \"WOZ\",\r\n    \"WOX\",\r\n    \"WOC\",\r\n    \"WOV\",\r\n    \"WOB\",\r\n    \"WON\",\r\n    \"WOM\",\r\n    \"WUQ\",\r\n    \"WUR\",\r\n    \"WUT\",\r\n    \"WUP\",\r\n    \"WUS\",\r\n    \"WUD\",\r\n    \"WUF\",\r\n    \"WUG\",\r\n    \"WUK\",\r\n    \"WUL\",\r\n    \"WUZ\",\r\n    \"WUX\",\r\n    \"WUC\",\r\n    \"WUV\",\r\n    \"WUB\",\r\n    \"WUN\",\r\n    \"WUM\",\r\n    \"RAQ\",\r\n    \"RAW\",\r\n    \"RAT\",\r\n    \"RAP\",\r\n    \"RAS\",\r\n    \"RAD\",\r\n    \"RAF\",\r\n    \"RAG\",\r\n    \"RAK\",\r\n    \"RAL\",\r\n    \"RAZ\",\r\n    \"RAX\",\r\n    \"RAC\",\r\n    \"RAV\",\r\n    \"RAB\",\r\n    \"RAN\",\r\n    \"RAM\",\r\n    \"REQ\",\r\n    \"REW\",\r\n    \"RET\",\r\n    \"REP\",\r\n    \"RES\",\r\n    \"RED\",\r\n    \"REF\",\r\n    \"REG\",\r\n    \"REK\",\r\n    \"REL\",\r\n    \"REZ\",\r\n    \"REX\",\r\n    \"REC\",\r\n    \"REV\",\r\n    \"REB\",\r\n    \"REN\",\r\n    \"REM\",\r\n    \"RIQ\",\r\n    \"RIW\",\r\n    \"RIT\",\r\n    \"RIP\",\r\n    \"RIS\",\r\n    \"RID\",\r\n    \"RIF\",\r\n    \"RIG\",\r\n    \"RIK\",\r\n    \"RIL\",\r\n    \"RIZ\",\r\n    \"RIX\",\r\n    \"RIC\",\r\n    \"RIV\",\r\n    \"RIB\",\r\n    \"RIN\",\r\n    \"RIM\",\r\n    \"ROQ\",\r\n    \"ROW\",\r\n    \"ROT\",\r\n    \"ROP\",\r\n    \"ROS\",\r\n    \"ROD\",\r\n    \"ROF\",\r\n    \"ROG\",\r\n    \"ROK\",\r\n    \"ROL\",\r\n    \"ROZ\",\r\n    \"ROX\",\r\n    \"ROC\",\r\n    \"ROV\",\r\n    \"ROB\",\r\n    \"RON\",\r\n    \"ROM\",\r\n    \"RUQ\",\r\n    \"RUW\",\r\n    \"RUT\",\r\n    \"RUP\",\r\n    \"RUS\",\r\n    \"RUD\",\r\n    \"RUF\",\r\n    \"RUG\",\r\n    \"RUK\",\r\n    \"RUL\",\r\n    \"RUZ\",\r\n    \"RUX\",\r\n    \"RUC\",\r\n    \"RUV\",\r\n    \"RUB\",\r\n    \"RUN\",\r\n    \"RUM\",\r\n    \"TAQ\",\r\n    \"TAW\",\r\n    \"TAR\",\r\n    \"TAP\",\r\n    \"TAS\",\r\n    \"TAD\",\r\n    \"TAF\",\r\n    \"TAG\",\r\n    \"TAK\",\r\n    \"TAL\",\r\n    \"TAZ\",\r\n    \"TAX\",\r\n    \"TAC\",\r\n    \"TAV\",\r\n    \"TAB\",\r\n    \"TAN\",\r\n    \"TAM\",\r\n    \"TEQ\",\r\n    \"TEW\",\r\n    \"TER\",\r\n    \"TEP\",\r\n    \"TES\",\r\n    \"TED\",\r\n    \"TEF\",\r\n    \"TEG\",\r\n    \"TEK\",\r\n    \"TEL\",\r\n    \"TEZ\",\r\n    \"TEX\",\r\n    \"TEC\",\r\n    \"TEV\",\r\n    \"TEB\",\r\n    \"TEN\",\r\n    \"TEM\",\r\n    \"TIQ\",\r\n    \"TIW\",\r\n    \"TIR\",\r\n    \"TIP\",\r\n    \"TIS\",\r\n    \"TID\",\r\n    \"TIF\",\r\n    \"TIG\",\r\n    \"TIK\",\r\n    \"TIL\",\r\n    \"TIZ\",\r\n    \"TIX\",\r\n    \"TIC\",\r\n    \"TIV\",\r\n    \"TIB\",\r\n    \"TIN\",\r\n    \"TIM\",\r\n    \"TOQ\",\r\n    \"TOW\",\r\n    \"TOR\",\r\n    \"TOP\",\r\n    \"TOS\",\r\n    \"TOD\",\r\n    \"TOF\",\r\n    \"TOG\",\r\n    \"TOK\",\r\n    \"TOL\",\r\n    \"TOZ\",\r\n    \"TOX\",\r\n    \"TOC\",\r\n    \"TOV\",\r\n    \"TOB\",\r\n    \"TON\",\r\n    \"TOM\",\r\n    \"TUQ\",\r\n    \"TUW\",\r\n    \"TUR\",\r\n    \"TUP\",\r\n    \"TUS\",\r\n    \"TUD\",\r\n    \"TUF\",\r\n    \"TUG\",\r\n    \"TUK\",\r\n    \"TUL\",\r\n    \"TUZ\",\r\n    \"TUX\",\r\n    \"TUC\",\r\n    \"TUV\",\r\n    \"TUB\",\r\n    \"TUN\",\r\n    \"TUM\",\r\n    \"PAQ\",\r\n    \"PAW\",\r\n    \"PAR\",\r\n    \"PAT\",\r\n    \"PAS\",\r\n    \"PAD\",\r\n    \"PAF\",\r\n    \"PAG\",\r\n    \"PAK\",\r\n    \"PAL\",\r\n    \"PAZ\",\r\n    \"PAX\",\r\n    \"PAC\",\r\n    \"PAV\",\r\n    \"PAB\",\r\n    \"PAN\",\r\n    \"PAM\",\r\n    \"PEQ\",\r\n    \"PEW\",\r\n    \"PER\",\r\n    \"PET\",\r\n    \"PES\",\r\n    \"PED\",\r\n    \"PEF\",\r\n    \"PEG\",\r\n    \"PEK\",\r\n    \"PEL\",\r\n    \"PEZ\",\r\n    \"PEX\",\r\n    \"PEC\",\r\n    \"PEV\",\r\n    \"PEB\",\r\n    \"PEN\",\r\n    \"PEM\",\r\n    \"PIQ\",\r\n    \"PIW\",\r\n    \"PIR\",\r\n    \"PIT\",\r\n    \"PIS\",\r\n    \"PID\",\r\n    \"PIF\",\r\n    \"PIG\",\r\n    \"PIK\",\r\n    \"PIL\",\r\n    \"PIZ\",\r\n    \"PIX\",\r\n    \"PIC\",\r\n    \"PIV\",\r\n    \"PIB\",\r\n    \"PIN\",\r\n    \"PIM\",\r\n    \"POQ\",\r\n    \"POW\",\r\n    \"POR\",\r\n    \"POT\",\r\n    \"POS\",\r\n    \"POD\",\r\n    \"POF\",\r\n    \"POG\",\r\n    \"POK\",\r\n    \"POL\",\r\n    \"POZ\",\r\n    \"POX\",\r\n    \"POC\",\r\n    \"POV\",\r\n    \"POB\",\r\n    \"PON\",\r\n    \"POM\",\r\n    \"PUQ\",\r\n    \"PUW\",\r\n    \"PUR\",\r\n    \"PUT\",\r\n    \"PUS\",\r\n    \"PUD\",\r\n    \"PUF\",\r\n    \"PUG\",\r\n    \"PUK\",\r\n    \"PUL\",\r\n    \"PUZ\",\r\n    \"PUX\",\r\n    \"PUC\",\r\n    \"PUV\",\r\n    \"PUB\",\r\n    \"PUN\",\r\n    \"PUM\",\r\n    \"SAQ\",\r\n    \"SAW\",\r\n    \"SAR\",\r\n    \"SAT\",\r\n    \"SAP\",\r\n    \"SAD\",\r\n    \"SAF\",\r\n    \"SAG\",\r\n    \"SAK\",\r\n    \"SAL\",\r\n    \"SAZ\",\r\n    \"SAX\",\r\n    \"SAC\",\r\n    \"SAV\",\r\n    \"SAB\",\r\n    \"SAN\",\r\n    \"SAM\",\r\n    \"SEQ\",\r\n    \"SEW\",\r\n    \"SER\",\r\n    \"SET\",\r\n    \"SEP\",\r\n    \"SED\",\r\n    \"SEF\",\r\n    \"SEG\",\r\n    \"SEK\",\r\n    \"SEL\",\r\n    \"SEZ\",\r\n    \"SEX\",\r\n    \"SEC\",\r\n    \"SEV\",\r\n    \"SEB\",\r\n    \"SEN\",\r\n    \"SEM\",\r\n    \"SIQ\",\r\n    \"SIW\",\r\n    \"SIR\",\r\n    \"SIT\",\r\n    \"SIP\",\r\n    \"SID\",\r\n    \"SIF\",\r\n    \"SIG\",\r\n    \"SIK\",\r\n    \"SIL\",\r\n    \"SIZ\",\r\n    \"SIX\",\r\n    \"SIC\",\r\n    \"SIV\",\r\n    \"SIB\",\r\n    \"SIN\",\r\n    \"SIM\",\r\n    \"SOQ\",\r\n    \"SOW\",\r\n    \"SOR\",\r\n    \"SOT\",\r\n    \"SOP\",\r\n    \"SOD\",\r\n    \"SOF\",\r\n    \"SOG\",\r\n    \"SOK\",\r\n    \"SOL\",\r\n    \"SOZ\",\r\n    \"SOX\",\r\n    \"SOC\",\r\n    \"SOV\",\r\n    \"SOB\",\r\n    \"SON\",\r\n    \"SOM\",\r\n    \"SUQ\",\r\n    \"SUW\",\r\n    \"SUR\",\r\n    \"SUT\",\r\n    \"SUP\",\r\n    \"SUD\",\r\n    \"SUF\",\r\n    \"SUG\",\r\n    \"SUK\",\r\n    \"SUL\",\r\n    \"SUZ\",\r\n    \"SUX\",\r\n    \"SUC\",\r\n    \"SUV\",\r\n    \"SUB\",\r\n    \"SUN\",\r\n    \"SUM\",\r\n    \"DAQ\",\r\n    \"DAW\",\r\n    \"DAR\",\r\n    \"DAT\",\r\n    \"DAP\",\r\n    \"DAS\",\r\n    \"DAF\",\r\n    \"DAG\",\r\n    \"DAK\",\r\n    \"DAL\",\r\n    \"DAZ\",\r\n    \"DAX\",\r\n    \"DAC\",\r\n    \"DAV\",\r\n    \"DAB\",\r\n    \"DAN\",\r\n    \"DAM\",\r\n    \"DEQ\",\r\n    \"DEW\",\r\n    \"DER\",\r\n    \"DET\",\r\n    \"DEP\",\r\n    \"DES\",\r\n    \"DEF\",\r\n    \"DEG\",\r\n    \"DEK\",\r\n    \"DEL\",\r\n    \"DEZ\",\r\n    \"DEX\",\r\n    \"DEC\",\r\n    \"DEV\",\r\n    \"DEB\",\r\n    \"DEN\",\r\n    \"DEM\",\r\n    \"DIQ\",\r\n    \"DIW\",\r\n    \"DIR\",\r\n    \"DIT\",\r\n    \"DIP\",\r\n    \"DIS\",\r\n    \"DIF\",\r\n    \"DIG\",\r\n    \"DIK\",\r\n    \"DIL\",\r\n    \"DIZ\",\r\n    \"DIX\",\r\n    \"DIC\",\r\n    \"DIV\",\r\n    \"DIB\",\r\n    \"DIN\",\r\n    \"DIM\",\r\n    \"DOQ\",\r\n    \"DOW\",\r\n    \"DOR\",\r\n    \"DOT\",\r\n    \"DOP\",\r\n    \"DOS\",\r\n    \"DOF\",\r\n    \"DOG\",\r\n    \"DOK\",\r\n    \"DOL\",\r\n    \"DOZ\",\r\n    \"DOX\",\r\n    \"DOC\",\r\n    \"DOV\",\r\n    \"DOB\",\r\n    \"DON\",\r\n    \"DOM\",\r\n    \"DUQ\",\r\n    \"DUW\",\r\n    \"DUR\",\r\n    \"DUT\",\r\n    \"DUP\",\r\n    \"DUS\",\r\n    \"DUF\",\r\n    \"DUG\",\r\n    \"DUK\",\r\n    \"DUL\",\r\n    \"DUZ\",\r\n    \"DUX\",\r\n    \"DUC\",\r\n    \"DUV\",\r\n    \"DUB\",\r\n    \"DUN\",\r\n    \"DUM\",\r\n    \"FAQ\",\r\n    \"FAW\",\r\n    \"FAR\",\r\n    \"FAT\",\r\n    \"FAP\",\r\n    \"FAS\",\r\n    \"FAD\",\r\n    \"FAG\",\r\n    \"FAK\",\r\n    \"FAL\",\r\n    \"FAZ\",\r\n    \"FAX\",\r\n    \"FAC\",\r\n    \"FAV\",\r\n    \"FAB\",\r\n    \"FAN\",\r\n    \"FAM\",\r\n    \"FEQ\",\r\n    \"FEW\",\r\n    \"FER\",\r\n    \"FET\",\r\n    \"FEP\",\r\n    \"FES\",\r\n    \"FED\",\r\n    \"FEG\",\r\n    \"FEK\",\r\n    \"FEL\",\r\n    \"FEZ\",\r\n    \"FEX\",\r\n    \"FEC\",\r\n    \"FEV\",\r\n    \"FEB\",\r\n    \"FEN\",\r\n    \"FEM\",\r\n    \"FIQ\",\r\n    \"FIW\",\r\n    \"FIR\",\r\n    \"FIT\",\r\n    \"FIP\",\r\n    \"FIS\",\r\n    \"FID\",\r\n    \"FIG\",\r\n    \"FIK\",\r\n    \"FIL\",\r\n    \"FIZ\",\r\n    \"FIX\",\r\n    \"FIC\",\r\n    \"FIV\",\r\n    \"FIB\",\r\n    \"FIN\",\r\n    \"FIM\",\r\n    \"FOQ\",\r\n    \"FOW\",\r\n    \"FOR\",\r\n    \"FOT\",\r\n    \"FOP\",\r\n    \"FOS\",\r\n    \"FOD\",\r\n    \"FOG\",\r\n    \"FOK\",\r\n    \"FOL\",\r\n    \"FOZ\",\r\n    \"FOX\",\r\n    \"FOC\",\r\n    \"FOV\",\r\n    \"FOB\",\r\n    \"FON\",\r\n    \"FOM\",\r\n    \"FUQ\",\r\n    \"FUW\",\r\n    \"FUR\",\r\n    \"FUT\",\r\n    \"FUP\",\r\n    \"FUS\",\r\n    \"FUD\",\r\n    \"FUG\",\r\n    \"FUK\",\r\n    \"FUL\",\r\n    \"FUZ\",\r\n    \"FUX\",\r\n    \"FUC\",\r\n    \"FUV\",\r\n    \"FUB\",\r\n    \"FUN\",\r\n    \"FUM\",\r\n    \"GAQ\",\r\n    \"GAW\",\r\n    \"GAR\",\r\n    \"GAT\",\r\n    \"GAP\",\r\n    \"GAS\",\r\n    \"GAD\",\r\n    \"GAF\",\r\n    \"GAK\",\r\n    \"GAL\",\r\n    \"GAZ\",\r\n    \"GAX\",\r\n    \"GAC\",\r\n    \"GAV\",\r\n    \"GAB\",\r\n    \"GAN\",\r\n    \"GAM\",\r\n    \"GEQ\",\r\n    \"GEW\",\r\n    \"GER\",\r\n    \"GET\",\r\n    \"GEP\",\r\n    \"GES\",\r\n    \"GED\",\r\n    \"GEF\",\r\n    \"GEK\",\r\n    \"GEL\",\r\n    \"GEZ\",\r\n    \"GEX\",\r\n    \"GEC\",\r\n    \"GEV\",\r\n    \"GEB\",\r\n    \"GEN\",\r\n    \"GEM\",\r\n    \"GIQ\",\r\n    \"GIW\",\r\n    \"GIR\",\r\n    \"GIT\",\r\n    \"GIP\",\r\n    \"GIS\",\r\n    \"GID\",\r\n    \"GIF\",\r\n    \"GIK\",\r\n    \"GIL\",\r\n    \"GIZ\",\r\n    \"GIX\",\r\n    \"GIC\",\r\n    \"GIV\",\r\n    \"GIB\",\r\n    \"GIN\",\r\n    \"GIM\",\r\n    \"GOQ\",\r\n    \"GOW\",\r\n    \"GOR\",\r\n    \"GOT\",\r\n    \"GOP\",\r\n    \"GOS\",\r\n    \"GOD\",\r\n    \"GOF\",\r\n    \"GOK\",\r\n    \"GOL\",\r\n    \"GOZ\",\r\n    \"GOX\",\r\n    \"GOC\",\r\n    \"GOV\",\r\n    \"GOB\",\r\n    \"GON\",\r\n    \"GOM\",\r\n    \"GUQ\",\r\n    \"GUW\",\r\n    \"GUR\",\r\n    \"GUT\",\r\n    \"GUP\",\r\n    \"GUS\",\r\n    \"GUD\",\r\n    \"GUF\",\r\n    \"GUK\",\r\n    \"GUL\",\r\n    \"GUZ\",\r\n    \"GUX\",\r\n    \"GUC\",\r\n    \"GUV\",\r\n    \"GUB\",\r\n    \"GUN\",\r\n    \"GUM\",\r\n    \"KAQ\",\r\n    \"KAW\",\r\n    \"KAR\",\r\n    \"KAT\",\r\n    \"KAP\",\r\n    \"KAS\",\r\n    \"KAD\",\r\n    \"KAF\",\r\n    \"KAG\",\r\n    \"KAL\",\r\n    \"KAZ\",\r\n    \"KAX\",\r\n    \"KAC\",\r\n    \"KAV\",\r\n    \"KAB\",\r\n    \"KAN\",\r\n    \"KAM\",\r\n    \"KEQ\",\r\n    \"KEW\",\r\n    \"KER\",\r\n    \"KET\",\r\n    \"KEP\",\r\n    \"KES\",\r\n    \"KED\",\r\n    \"KEF\",\r\n    \"KEG\",\r\n    \"KEL\",\r\n    \"KEZ\",\r\n    \"KEX\",\r\n    \"KEC\",\r\n    \"KEV\",\r\n    \"KEB\",\r\n    \"KEN\",\r\n    \"KEM\",\r\n    \"KIQ\",\r\n    \"KIW\",\r\n    \"KIR\",\r\n    \"KIT\",\r\n    \"KIP\",\r\n    \"KIS\",\r\n    \"KID\",\r\n    \"KIF\",\r\n    \"KIG\",\r\n    \"KIL\",\r\n    \"KIZ\",\r\n    \"KIX\",\r\n    \"KIC\",\r\n    \"KIV\",\r\n    \"KIB\",\r\n    \"KIN\",\r\n    \"KIM\",\r\n    \"KOQ\",\r\n    \"KOW\",\r\n    \"KOR\",\r\n    \"KOT\",\r\n    \"KOP\",\r\n    \"KOS\",\r\n    \"KOD\",\r\n    \"KOF\",\r\n    \"KOG\",\r\n    \"KOL\",\r\n    \"KOZ\",\r\n    \"KOX\",\r\n    \"KOC\",\r\n    \"KOV\",\r\n    \"KOB\",\r\n    \"KON\",\r\n    \"KOM\",\r\n    \"KUQ\",\r\n    \"KUW\",\r\n    \"KUR\",\r\n    \"KUT\",\r\n    \"KUP\",\r\n    \"KUS\",\r\n    \"KUD\",\r\n    \"KUF\",\r\n    \"KUG\",\r\n    \"KUL\",\r\n    \"KUZ\",\r\n    \"KUX\",\r\n    \"KUC\",\r\n    \"KUV\",\r\n    \"KUB\",\r\n    \"KUN\",\r\n    \"KUM\",\r\n    \"LAQ\",\r\n    \"LAW\",\r\n    \"LAR\",\r\n    \"LAT\",\r\n    \"LAP\",\r\n    \"LAS\",\r\n    \"LAD\",\r\n    \"LAF\",\r\n    \"LAG\",\r\n    \"LAK\",\r\n    \"LAZ\",\r\n    \"LAX\",\r\n    \"LAC\",\r\n    \"LAV\",\r\n    \"LAB\",\r\n    \"LAN\",\r\n    \"LAM\",\r\n    \"LEQ\",\r\n    \"LEW\",\r\n    \"LER\",\r\n    \"LET\",\r\n    \"LEP\",\r\n    \"LES\",\r\n    \"LED\",\r\n    \"LEF\",\r\n    \"LEG\",\r\n    \"LEK\",\r\n    \"LEZ\",\r\n    \"LEX\",\r\n    \"LEC\",\r\n    \"LEV\",\r\n    \"LEB\",\r\n    \"LEN\",\r\n    \"LEM\",\r\n    \"LIQ\",\r\n    \"LIW\",\r\n    \"LIR\",\r\n    \"LIT\",\r\n    \"LIP\",\r\n    \"LIS\",\r\n    \"LID\",\r\n    \"LIF\",\r\n    \"LIG\",\r\n    \"LIK\",\r\n    \"LIZ\",\r\n    \"LIX\",\r\n    \"LIC\",\r\n    \"LIV\",\r\n    \"LIB\",\r\n    \"LIN\",\r\n    \"LIM\",\r\n    \"LOQ\",\r\n    \"LOW\",\r\n    \"LOR\",\r\n    \"LOT\",\r\n    \"LOP\",\r\n    \"LOS\",\r\n    \"LOD\",\r\n    \"LOF\",\r\n    \"LOG\",\r\n    \"LOK\",\r\n    \"LOZ\",\r\n    \"LOX\",\r\n    \"LOC\",\r\n    \"LOV\",\r\n    \"LOB\",\r\n    \"LON\",\r\n    \"LOM\",\r\n    \"LUQ\",\r\n    \"LUW\",\r\n    \"LUR\",\r\n    \"LUT\",\r\n    \"LUP\",\r\n    \"LUS\",\r\n    \"LUD\",\r\n    \"LUF\",\r\n    \"LUG\",\r\n    \"LUK\",\r\n    \"LUZ\",\r\n    \"LUX\",\r\n    \"LUC\",\r\n    \"LUV\",\r\n    \"LUB\",\r\n    \"LUN\",\r\n    \"LUM\",\r\n    \"ZAQ\",\r\n    \"ZAW\",\r\n    \"ZAR\",\r\n    \"ZAT\",\r\n    \"ZAP\",\r\n    \"ZAS\",\r\n    \"ZAD\",\r\n    \"ZAF\",\r\n    \"ZAG\",\r\n    \"ZAK\",\r\n    \"ZAL\",\r\n    \"ZAX\",\r\n    \"ZAC\",\r\n    \"ZAV\",\r\n    \"ZAB\",\r\n    \"ZAN\",\r\n    \"ZAM\",\r\n    \"ZEQ\",\r\n    \"ZEW\",\r\n    \"ZER\",\r\n    \"ZET\",\r\n    \"ZEP\",\r\n    \"ZES\",\r\n    \"ZED\",\r\n    \"ZEF\",\r\n    \"ZEG\",\r\n    \"ZEK\",\r\n    \"ZEL\",\r\n    \"ZEX\",\r\n    \"ZEC\",\r\n    \"ZEV\",\r\n    \"ZEB\",\r\n    \"ZEN\",\r\n    \"ZEM\",\r\n    \"ZIQ\",\r\n    \"ZIW\",\r\n    \"ZIR\",\r\n    \"ZIT\",\r\n    \"ZIP\",\r\n    \"ZIS\",\r\n    \"ZID\",\r\n    \"ZIF\",\r\n    \"ZIG\",\r\n    \"ZIK\",\r\n    \"ZIL\",\r\n    \"ZIX\",\r\n    \"ZIC\",\r\n    \"ZIV\",\r\n    \"ZIB\",\r\n    \"ZIN\",\r\n    \"ZIM\",\r\n    \"ZOQ\",\r\n    \"ZOW\",\r\n    \"ZOR\",\r\n    \"ZOT\",\r\n    \"ZOP\",\r\n    \"ZOS\",\r\n    \"ZOD\",\r\n    \"ZOF\",\r\n    \"ZOG\",\r\n    \"ZOK\",\r\n    \"ZOL\",\r\n    \"ZOX\",\r\n    \"ZOC\",\r\n    \"ZOV\",\r\n    \"ZOB\",\r\n    \"ZON\",\r\n    \"ZOM\",\r\n    \"ZUQ\",\r\n    \"ZUW\",\r\n    \"ZUR\",\r\n    \"ZUT\",\r\n    \"ZUP\",\r\n    \"ZUS\",\r\n    \"ZUD\",\r\n    \"ZUF\",\r\n    \"ZUG\",\r\n    \"ZUK\",\r\n    \"ZUL\",\r\n    \"ZUX\",\r\n    \"ZUC\",\r\n    \"ZUV\",\r\n    \"ZUB\",\r\n    \"ZUN\",\r\n    \"ZUM\",\r\n    \"XAQ\",\r\n    \"XAW\",\r\n    \"XAR\",\r\n    \"XAT\",\r\n    \"XAP\",\r\n    \"XAS\",\r\n    \"XAD\",\r\n    \"XAF\",\r\n    \"XAG\",\r\n    \"XAK\",\r\n    \"XAL\",\r\n    \"XAZ\",\r\n    \"XAC\",\r\n    \"XAV\",\r\n    \"XAB\",\r\n    \"XAN\",\r\n    \"XAM\",\r\n    \"XEQ\",\r\n    \"XEW\",\r\n    \"XER\",\r\n    \"XET\",\r\n    \"XEP\",\r\n    \"XES\",\r\n    \"XED\",\r\n    \"XEF\",\r\n    \"XEG\",\r\n    \"XEK\",\r\n    \"XEL\",\r\n    \"XEZ\",\r\n    \"XEC\",\r\n    \"XEV\",\r\n    \"XEB\",\r\n    \"XEN\",\r\n    \"XEM\",\r\n    \"XIQ\",\r\n    \"XIW\",\r\n    \"XIR\",\r\n    \"XIT\",\r\n    \"XIP\",\r\n    \"XIS\",\r\n    \"XID\",\r\n    \"XIF\",\r\n    \"XIG\",\r\n    \"XIK\",\r\n    \"XIL\",\r\n    \"XIZ\",\r\n    \"XIC\",\r\n    \"XIV\",\r\n    \"XIB\",\r\n    \"XIN\",\r\n    \"XIM\",\r\n    \"XOQ\",\r\n    \"XOW\",\r\n    \"XOR\",\r\n    \"XOT\",\r\n    \"XOP\",\r\n    \"XOS\",\r\n    \"XOD\",\r\n    \"XOF\",\r\n    \"XOG\",\r\n    \"XOK\",\r\n    \"XOL\",\r\n    \"XOZ\",\r\n    \"XOC\",\r\n    \"XOV\",\r\n    \"XOB\",\r\n    \"XON\",\r\n    \"XOM\",\r\n    \"XUQ\",\r\n    \"XUW\",\r\n    \"XUR\",\r\n    \"XUT\",\r\n    \"XUP\",\r\n    \"XUS\",\r\n    \"XUD\",\r\n    \"XUF\",\r\n    \"XUG\",\r\n    \"XUK\",\r\n    \"XUL\",\r\n    \"XUZ\",\r\n    \"XUC\",\r\n    \"XUV\",\r\n    \"XUB\",\r\n    \"XUN\",\r\n    \"XUM\",\r\n    \"CAQ\",\r\n    \"CAW\",\r\n    \"CAR\",\r\n    \"CAT\",\r\n    \"CAP\",\r\n    \"CAS\",\r\n    \"CAD\",\r\n    \"CAF\",\r\n    \"CAG\",\r\n    \"CAK\",\r\n    \"CAL\",\r\n    \"CAZ\",\r\n    \"CAX\",\r\n    \"CAV\",\r\n    \"CAB\",\r\n    \"CAN\",\r\n    \"CAM\",\r\n    \"CEQ\",\r\n    \"CEW\",\r\n    \"CER\",\r\n    \"CET\",\r\n    \"CEP\",\r\n    \"CES\",\r\n    \"CED\",\r\n    \"CEF\",\r\n    \"CEG\",\r\n    \"CEK\",\r\n    \"CEL\",\r\n    \"CEZ\",\r\n    \"CEX\",\r\n    \"CEV\",\r\n    \"CEB\",\r\n    \"CEN\",\r\n    \"CEM\",\r\n    \"CIQ\",\r\n    \"CIW\",\r\n    \"CIR\",\r\n    \"CIT\",\r\n    \"CIP\",\r\n    \"CIS\",\r\n    \"CID\",\r\n    \"CIF\",\r\n    \"CIG\",\r\n    \"CIK\",\r\n    \"CIL\",\r\n    \"CIZ\",\r\n    \"CIX\",\r\n    \"CIV\",\r\n    \"CIB\",\r\n    \"CIN\",\r\n    \"CIM\",\r\n    \"COQ\",\r\n    \"COW\",\r\n    \"COR\",\r\n    \"COT\",\r\n    \"COP\",\r\n    \"COS\",\r\n    \"COD\",\r\n    \"COF\",\r\n    \"COG\",\r\n    \"COK\",\r\n    \"COL\",\r\n    \"COZ\",\r\n    \"COX\",\r\n    \"COV\",\r\n    \"COB\",\r\n    \"CON\",\r\n    \"COM\",\r\n    \"CUQ\",\r\n    \"CUW\",\r\n    \"CUR\",\r\n    \"CUT\",\r\n    \"CUP\",\r\n    \"CUS\",\r\n    \"CUD\",\r\n    \"CUF\",\r\n    \"CUG\",\r\n    \"CUK\",\r\n    \"CUL\",\r\n    \"CUZ\",\r\n    \"CUX\",\r\n    \"CUV\",\r\n    \"CUB\",\r\n    \"CUN\",\r\n    \"CUM\",\r\n    \"VAQ\",\r\n    \"VAW\",\r\n    \"VAR\",\r\n    \"VAT\",\r\n    \"VAP\",\r\n    \"VAS\",\r\n    \"VAD\",\r\n    \"VAF\",\r\n    \"VAG\",\r\n    \"VAK\",\r\n    \"VAL\",\r\n    \"VAZ\",\r\n    \"VAX\",\r\n    \"VAC\",\r\n    \"VAB\",\r\n    \"VAN\",\r\n    \"VAM\",\r\n    \"VEQ\",\r\n    \"VEW\",\r\n    \"VER\",\r\n    \"VET\",\r\n    \"VEP\",\r\n    \"VES\",\r\n    \"VED\",\r\n    \"VEF\",\r\n    \"VEG\",\r\n    \"VEK\",\r\n    \"VEL\",\r\n    \"VEZ\",\r\n    \"VEX\",\r\n    \"VEC\",\r\n    \"VEB\",\r\n    \"VEN\",\r\n    \"VEM\",\r\n    \"VIQ\",\r\n    \"VIW\",\r\n    \"VIR\",\r\n    \"VIT\",\r\n    \"VIP\",\r\n    \"VIS\",\r\n    \"VID\",\r\n    \"VIF\",\r\n    \"VIG\",\r\n    \"VIK\",\r\n    \"VIL\",\r\n    \"VIZ\",\r\n    \"VIX\",\r\n    \"VIC\",\r\n    \"VIB\",\r\n    \"VIN\",\r\n    \"VIM\",\r\n    \"VOQ\",\r\n    \"VOW\",\r\n    \"VOR\",\r\n    \"VOT\",\r\n    \"VOP\",\r\n    \"VOS\",\r\n    \"VOD\",\r\n    \"VOF\",\r\n    \"VOG\",\r\n    \"VOK\",\r\n    \"VOL\",\r\n    \"VOZ\",\r\n    \"VOX\",\r\n    \"VOC\",\r\n    \"VOB\",\r\n    \"VON\",\r\n    \"VOM\",\r\n    \"VUQ\",\r\n    \"VUW\",\r\n    \"VUR\",\r\n    \"VUT\",\r\n    \"VUP\",\r\n    \"VUS\",\r\n    \"VUD\",\r\n    \"VUF\",\r\n    \"VUG\",\r\n    \"VUK\",\r\n    \"VUL\",\r\n    \"VUZ\",\r\n    \"VUX\",\r\n    \"VUC\",\r\n    \"VUB\",\r\n    \"VUN\",\r\n    \"VUM\",\r\n    \"BAQ\",\r\n    \"BAW\",\r\n    \"BAR\",\r\n    \"BAT\",\r\n    \"BAP\",\r\n    \"BAS\",\r\n    \"BAD\",\r\n    \"BAF\",\r\n    \"BAG\",\r\n    \"BAK\",\r\n    \"BAL\",\r\n    \"BAZ\",\r\n    \"BAX\",\r\n    \"BAC\",\r\n    \"BAV\",\r\n    \"BAN\",\r\n    \"BAM\",\r\n    \"BEQ\",\r\n    \"BEW\",\r\n    \"BER\",\r\n    \"BET\",\r\n    \"BEP\",\r\n    \"BES\",\r\n    \"BED\",\r\n    \"BEF\",\r\n    \"BEG\",\r\n    \"BEK\",\r\n    \"BEL\",\r\n    \"BEZ\",\r\n    \"BEX\",\r\n    \"BEC\",\r\n    \"BEV\",\r\n    \"BEN\",\r\n    \"BEM\",\r\n    \"BIQ\",\r\n    \"BIW\",\r\n    \"BIR\",\r\n    \"BIT\",\r\n    \"BIP\",\r\n    \"BIS\",\r\n    \"BID\",\r\n    \"BIF\",\r\n    \"BIG\",\r\n    \"BIK\",\r\n    \"BIL\",\r\n    \"BIZ\",\r\n    \"BIX\",\r\n    \"BIC\",\r\n    \"BIV\",\r\n    \"BIN\",\r\n    \"BIM\",\r\n    \"BOQ\",\r\n    \"BOW\",\r\n    \"BOR\",\r\n    \"BOT\",\r\n    \"BOP\",\r\n    \"BOS\",\r\n    \"BOD\",\r\n    \"BOF\",\r\n    \"BOG\",\r\n    \"BOK\",\r\n    \"BOL\",\r\n    \"BOZ\",\r\n    \"BOX\",\r\n    \"BOC\",\r\n    \"BOV\",\r\n    \"BON\",\r\n    \"BOM\",\r\n    \"BUQ\",\r\n    \"BUW\",\r\n    \"BUR\",\r\n    \"BUT\",\r\n    \"BUP\",\r\n    \"BUS\",\r\n    \"BUD\",\r\n    \"BUF\",\r\n    \"BUG\",\r\n    \"BUK\",\r\n    \"BUL\",\r\n    \"BUZ\",\r\n    \"BUX\",\r\n    \"BUC\",\r\n    \"BUV\",\r\n    \"BUN\",\r\n    \"BUM\",\r\n    \"NAQ\",\r\n    \"NAW\",\r\n    \"NAR\",\r\n    \"NAT\",\r\n    \"NAP\",\r\n    \"NAS\",\r\n    \"NAD\",\r\n    \"NAF\",\r\n    \"NAG\",\r\n    \"NAK\",\r\n    \"NAL\",\r\n    \"NAZ\",\r\n    \"NAX\",\r\n    \"NAC\",\r\n    \"NAV\",\r\n    \"NAB\",\r\n    \"NAM\",\r\n    \"NEQ\",\r\n    \"NEW\",\r\n    \"NER\",\r\n    \"NET\",\r\n    \"NEP\",\r\n    \"NES\",\r\n    \"NED\",\r\n    \"NEF\",\r\n    \"NEG\",\r\n    \"NEK\",\r\n    \"NEL\",\r\n    \"NEZ\",\r\n    \"NEX\",\r\n    \"NEC\",\r\n    \"NEV\",\r\n    \"NEB\",\r\n    \"NEM\",\r\n    \"NIQ\",\r\n    \"NIW\",\r\n    \"NIR\",\r\n    \"NIT\",\r\n    \"NIP\",\r\n    \"NIS\",\r\n    \"NID\",\r\n    \"NIF\",\r\n    \"NIG\",\r\n    \"NIK\",\r\n    \"NIL\",\r\n    \"NIZ\",\r\n    \"NIX\",\r\n    \"NIC\",\r\n    \"NIV\",\r\n    \"NIB\",\r\n    \"NIM\",\r\n    \"NOQ\",\r\n    \"NOW\",\r\n    \"NOR\",\r\n    \"NOT\",\r\n    \"NOP\",\r\n    \"NOS\",\r\n    \"NOD\",\r\n    \"NOF\",\r\n    \"NOG\",\r\n    \"NOK\",\r\n    \"NOL\",\r\n    \"NOZ\",\r\n    \"NOX\",\r\n    \"NOC\",\r\n    \"NOV\",\r\n    \"NOB\",\r\n    \"NOM\",\r\n    \"NUQ\",\r\n    \"NUW\",\r\n    \"NUR\",\r\n    \"NUT\",\r\n    \"NUP\",\r\n    \"NUS\",\r\n    \"NUD\",\r\n    \"NUF\",\r\n    \"NUG\",\r\n    \"NUK\",\r\n    \"NUL\",\r\n    \"NUZ\",\r\n    \"NUX\",\r\n    \"NUC\",\r\n    \"NUV\",\r\n    \"NUB\",\r\n    \"NUM\",\r\n    \"MAQ\",\r\n    \"MAW\",\r\n    \"MAR\",\r\n    \"MAT\",\r\n    \"MAP\",\r\n    \"MAS\",\r\n    \"MAD\",\r\n    \"MAF\",\r\n    \"MAG\",\r\n    \"MAK\",\r\n    \"MAL\",\r\n    \"MAZ\",\r\n    \"MAX\",\r\n    \"MAC\",\r\n    \"MAV\",\r\n    \"MAB\",\r\n    \"MAN\",\r\n    \"MEQ\",\r\n    \"MEW\",\r\n    \"MER\",\r\n    \"MET\",\r\n    \"MEP\",\r\n    \"MES\",\r\n    \"MED\",\r\n    \"MEF\",\r\n    \"MEG\",\r\n    \"MEK\",\r\n    \"MEL\",\r\n    \"MEZ\",\r\n    \"MEX\",\r\n    \"MEC\",\r\n    \"MEV\",\r\n    \"MEB\",\r\n    \"MEN\",\r\n    \"MIQ\",\r\n    \"MIW\",\r\n    \"MIR\",\r\n    \"MIT\",\r\n    \"MIP\",\r\n    \"MIS\",\r\n    \"MID\",\r\n    \"MIF\",\r\n    \"MIG\",\r\n    \"MIK\",\r\n    \"MIL\",\r\n    \"MIZ\",\r\n    \"MIX\",\r\n    \"MIC\",\r\n    \"MIV\",\r\n    \"MIB\",\r\n    \"MIN\",\r\n    \"MOQ\",\r\n    \"MOW\",\r\n    \"MOR\",\r\n    \"MOT\",\r\n    \"MOP\",\r\n    \"MOS\",\r\n    \"MOD\",\r\n    \"MOF\",\r\n    \"MOG\",\r\n    \"MOK\",\r\n    \"MOL\",\r\n    \"MOZ\",\r\n    \"MOX\",\r\n    \"MOC\",\r\n    \"MOV\",\r\n    \"MOB\",\r\n    \"MON\",\r\n    \"MUQ\",\r\n    \"MUW\",\r\n    \"MUR\",\r\n    \"MUT\",\r\n    \"MUP\",\r\n    \"MUS\",\r\n    \"MUD\",\r\n    \"MUF\",\r\n    \"MUG\",\r\n    \"MUK\",\r\n    \"MUL\",\r\n    \"MUZ\",\r\n    \"MUX\",\r\n    \"MUC\",\r\n    \"MUV\",\r\n    \"MUB\",\r\n    \"MUN\"\r\n];\r\n\r\nexport const VALID_RULES = [\r\n    \"0001\",\r\n    \"1011\",\r\n    \"0221\",\r\n    \"1231\",\r\n    \"0021\",\r\n    \"1031\",\r\n    \"0112\",\r\n    \"1012\",\r\n    \"1232\",\r\n    \"0332\",\r\n    \"0132\",\r\n    \"1032\",\r\n    \"0223\",\r\n    \"2023\",\r\n    \"3033\",\r\n    \"1233\",\r\n    \"0023\",\r\n    \"1033\",\r\n    \"0114\",\r\n    \"2024\",\r\n    \"1234\",\r\n    \"0134\",\r\n    \"1034\",\r\n    \"0024\"\r\n];\r\n\r\nexport const FORMS = [\r\n    [\r\n        'All <span class=\"subject\">$</span> is <span class=\"subject\">$</span>',\r\n        'No <span class=\"subject\">$</span> is <span class=\"subject\">$</span>',\r\n        'Some <span class=\"subject\">$</span> is <span class=\"subject\">$</span>',\r\n        'Some <span class=\"subject\">$</span> is not <span class=\"subject\">$</span>'\r\n    ],\r\n    [\r\n        '<span class=\"is-negated\">No</span> <span class=\"subject\">$</span> is <span class=\"subject\">$</span>',\r\n        '<span class=\"is-negated\">All</span> <span class=\"subject\">$</span> is <span class=\"subject\">$</span>',\r\n        'Some <span class=\"subject\">$</span> <span class=\"is-negated\">is not</span> <span class=\"subject\">$</span>',\r\n        'Some <span class=\"subject\">$</span> <span class=\"is-negated\">is</span> <span class=\"subject\">$</span>'\r\n    ],\r\n];\r\n\r\nexport const NOUNS = [\r\n    \"Acrobat\",\r\n    \"Afro\",\r\n    \"Albatross\",\r\n    \"Algae\",\r\n    \"Alligator\",\r\n    \"Almond\",\r\n    \"Alpaca\",\r\n    \"Amber\",\r\n    \"Ambulance\",\r\n    \"Amethyst\",\r\n    \"Amulet\",\r\n    \"Andes\",\r\n    \"Ankle\",\r\n    \"Anklet\",\r\n    \"Ant\",\r\n    \"Antlers\",\r\n    \"Anvil\",\r\n    \"Apartment\",\r\n    \"Apple\",\r\n    \"Apricot\",\r\n    \"Aquarium\",\r\n    \"Arch\",\r\n    \"Architect\",\r\n    \"Arena\",\r\n    \"Armadillo\",\r\n    \"Armchair\",\r\n    \"Armor\",\r\n    \"Arrow\",\r\n    \"Artichoke\",\r\n    \"Artist\",\r\n    \"Asteroid\",\r\n    \"Astronaut\",\r\n    \"Athlete\",\r\n    \"Atom\",\r\n    \"Attic\",\r\n    \"Aubergine\",\r\n    \"Aunt\",\r\n    \"Avocado\",\r\n    \"Baboon\",\r\n    \"Baby\",\r\n    \"Back\",\r\n    \"Backpack\",\r\n    \"Badge\",\r\n    \"Badger\",\r\n    \"Bag\",\r\n    \"Bagel\",\r\n    \"Bakery\",\r\n    \"Baklava\",\r\n    \"Balcony\",\r\n    \"Bald\",\r\n    \"Ball\",\r\n    \"Ballerina\",\r\n    \"Balloon\",\r\n    \"Bamboo\",\r\n    \"Banana\",\r\n    \"Bandage\",\r\n    \"Bandana\",\r\n    \"Banjo\",\r\n    \"Bank\",\r\n    \"Banner\",\r\n    \"Bar\",\r\n    \"Barbecue\",\r\n    \"Barbell\",\r\n    \"Barbie\",\r\n    \"Barge\",\r\n    \"Barley\",\r\n    \"Barn\",\r\n    \"Barracuda\",\r\n    \"Barrel\",\r\n    \"Baseball\",\r\n    \"Basement\",\r\n    \"Basin\",\r\n    \"Basket\",\r\n    \"Basketball\",\r\n    \"Bass\",\r\n    \"Bassoon\",\r\n    \"Bat\",\r\n    \"Bathrobe\",\r\n    \"Bathroom\",\r\n    \"Bathtub\",\r\n    \"Bayonet\",\r\n    \"Beach\",\r\n    \"Bead\",\r\n    \"Beanbag\",\r\n    \"Beanie\",\r\n    \"Beans\",\r\n    \"Beanstalk\",\r\n    \"Bear\",\r\n    \"Beard\",\r\n    \"Beast\",\r\n    \"Beaver\",\r\n    \"Bed\",\r\n    \"Bedbug\",\r\n    \"Bedroom\",\r\n    \"Beehive\",\r\n    \"Beer\",\r\n    \"Beet\",\r\n    \"Beetle\",\r\n    \"Bell\",\r\n    \"Belt\",\r\n    \"Bench\",\r\n    \"Beret\",\r\n    \"Bermudas\",\r\n    \"Berry\",\r\n    \"Bicycle\",\r\n    \"Bigfoot\",\r\n    \"Bike\",\r\n    \"Bikini\",\r\n    \"Bill\",\r\n    \"Binoculars\",\r\n    \"Birch\",\r\n    \"Bird\",\r\n    \"Birdcage\",\r\n    \"Biscotti\",\r\n    \"Biscuit\",\r\n    \"Bison\",\r\n    \"Black\",\r\n    \"Blackberry\",\r\n    \"Blackboard\",\r\n    \"Blade\",\r\n    \"Blazer\",\r\n    \"Blender\",\r\n    \"Blimp\",\r\n    \"Blind\",\r\n    \"Block\",\r\n    \"Blouse\",\r\n    \"Blowfish\",\r\n    \"Blueberry\",\r\n    \"Blush\",\r\n    \"Boa\",\r\n    \"Board\",\r\n    \"Boardwalk\",\r\n    \"Boat\",\r\n    \"Bobcat\",\r\n    \"Bobsled\",\r\n    \"Body\",\r\n    \"Bog\",\r\n    \"Boiler\",\r\n    \"Bolt\",\r\n    \"Bomb\",\r\n    \"Bonbon\",\r\n    \"Bones\",\r\n    \"Bonsai\",\r\n    \"Book\",\r\n    \"Bookcase\",\r\n    \"Bookend\",\r\n    \"Booklet\",\r\n    \"Bookstore\",\r\n    \"Boombox\",\r\n    \"Booster\",\r\n    \"Booth\",\r\n    \"Boots\",\r\n    \"Booty\",\r\n    \"Boulevard\",\r\n    \"Bow\",\r\n    \"Bowling\",\r\n    \"Box\",\r\n    \"Boxer\",\r\n    \"Boy\",\r\n    \"Brace\",\r\n    \"Bracelet\",\r\n    \"Brain\",\r\n    \"Brake\",\r\n    \"Branch\",\r\n    \"Brandy\",\r\n    \"Brass\",\r\n    \"Brassiere\",\r\n    \"Brave\",\r\n    \"Brazier\",\r\n    \"Bread\",\r\n    \"Breakfast\",\r\n    \"Brick\",\r\n    \"Bridal\",\r\n    \"Bridge\",\r\n    \"Briefcase\",\r\n    \"Broadway\",\r\n    \"Broccoli\",\r\n    \"Broker\",\r\n    \"Broom\",\r\n    \"Broth\",\r\n    \"Brother\",\r\n    \"Brunette\",\r\n    \"Brush\",\r\n    \"Bubble\",\r\n    \"Bucket\",\r\n    \"Buckles\",\r\n    \"Bud\",\r\n    \"Buffalo\",\r\n    \"Buffet\",\r\n    \"Builder\",\r\n    \"Bulb\",\r\n    \"Bulldozer\",\r\n    \"Bullet\",\r\n    \"Bumper\",\r\n    \"Bun\",\r\n    \"Buoy\",\r\n    \"Burger\",\r\n    \"Burrito\",\r\n    \"Bus\",\r\n    \"Bush\",\r\n    \"Butcher\",\r\n    \"Butler\",\r\n    \"Butter\",\r\n    \"Buttercup\",\r\n    \"Button\",\r\n    \"Buttons\",\r\n    \"Cab\",\r\n    \"Cabbage\",\r\n    \"Cabin\",\r\n    \"Cabinet\",\r\n    \"Cable\",\r\n    \"Cacao\",\r\n    \"Cactus\",\r\n    \"Cadet\",\r\n    \"Cafe\",\r\n    \"Cage\",\r\n    \"Cake\",\r\n    \"Calculator\",\r\n    \"Calendar\",\r\n    \"Calf\",\r\n    \"Caliber\",\r\n    \"Call\",\r\n    \"Camcorder\",\r\n    \"Camel\",\r\n    \"Camera\",\r\n    \"Camp\",\r\n    \"Campfire\",\r\n    \"Can\",\r\n    \"Canal\",\r\n    \"Candle\",\r\n    \"Candy\",\r\n    \"Cane\",\r\n    \"Cannoli\",\r\n    \"Canoe\",\r\n    \"Canon\",\r\n    \"Canopy\",\r\n    \"Canvas\",\r\n    \"Canyon\",\r\n    \"Cap\",\r\n    \"Cape\",\r\n    \"Cappuccino\",\r\n    \"Captain\",\r\n    \"Car\",\r\n    \"Carbon\",\r\n    \"Card\",\r\n    \"Cardboard\",\r\n    \"Cardigan\",\r\n    \"Cargo\",\r\n    \"Carp\",\r\n    \"Carpenter\",\r\n    \"Carpet\",\r\n    \"Carriage\",\r\n    \"Carrot\",\r\n    \"Cart\",\r\n    \"Cartoon\",\r\n    \"Cartridge\",\r\n    \"Cascade\",\r\n    \"Case\",\r\n    \"Cash\",\r\n    \"Cashier\",\r\n    \"Casino\",\r\n    \"Casket\",\r\n    \"Cast\",\r\n    \"Castle\",\r\n    \"Cat\",\r\n    \"Catalog\",\r\n    \"Catcher\",\r\n    \"Caterpillar\",\r\n    \"Cauldron\",\r\n    \"Cave\",\r\n    \"Caviar\",\r\n    \"Ceiling\",\r\n    \"Cell\",\r\n    \"Cellar\",\r\n    \"Cello\",\r\n    \"Cement\",\r\n    \"Cemetery\",\r\n    \"Center\",\r\n    \"Ceramic\",\r\n    \"Cereal\",\r\n    \"Certificate\",\r\n    \"Chain\",\r\n    \"Chair\",\r\n    \"Chalk\",\r\n    \"Chamber\",\r\n    \"Chameleon\",\r\n    \"Champagne\",\r\n    \"Championship\",\r\n    \"Chandelier\",\r\n    \"Changer\",\r\n    \"Channel\",\r\n    \"Chapel\",\r\n    \"Charger\",\r\n    \"Chariot\",\r\n    \"Chateau\",\r\n    \"Check\",\r\n    \"Checkbook\",\r\n    \"Cheek\",\r\n    \"Cheeks\",\r\n    \"Cheer\",\r\n    \"Cheese\",\r\n    \"Cheetah\",\r\n    \"Chef\",\r\n    \"Cherry\",\r\n    \"Chest\",\r\n    \"Chestnut\",\r\n    \"Chick\",\r\n    \"Chicken\",\r\n    \"Child\",\r\n    \"Children\",\r\n    \"Chili\",\r\n    \"Chimney\",\r\n    \"Chin\",\r\n    \"China\",\r\n    \"Chip\",\r\n    \"Chips\",\r\n    \"Chisel\",\r\n    \"Chocolate\",\r\n    \"Choir\",\r\n    \"Choker\",\r\n    \"Chop\",\r\n    \"Chopper\",\r\n    \"Chord\",\r\n    \"Christmas\",\r\n    \"Chrome\",\r\n    \"Chuckle\",\r\n    \"Church\",\r\n    \"Cider\",\r\n    \"Cigar\",\r\n    \"Cinema\",\r\n    \"Circle\",\r\n    \"Circus\",\r\n    \"Citadel\",\r\n    \"Citizen\",\r\n    \"City\",\r\n    \"Clam\",\r\n    \"Clamp\",\r\n    \"Clap\",\r\n    \"Clarinet\",\r\n    \"Class\",\r\n    \"Classroom\",\r\n    \"Claw\",\r\n    \"Clay\",\r\n    \"Cleaner\",\r\n    \"Clearing\",\r\n    \"Clerk\",\r\n    \"Click\",\r\n    \"Client\",\r\n    \"Cliff\",\r\n    \"Climber\",\r\n    \"Clip\",\r\n    \"Clock\",\r\n    \"Closet\",\r\n    \"Cloth\",\r\n    \"Clothes\",\r\n    \"Cloud\",\r\n    \"Club\",\r\n    \"Coach\",\r\n    \"Coal\",\r\n    \"Coast\",\r\n    \"Coat\",\r\n    \"Cobalt\",\r\n    \"Cobra\",\r\n    \"Cockpit\",\r\n    \"Cocktail\",\r\n    \"Coconut\",\r\n    \"Coffee\",\r\n    \"Coil\",\r\n    \"Coin\",\r\n    \"Collar\",\r\n    \"Collection\",\r\n    \"College\",\r\n    \"Colonel\",\r\n    \"Colony\",\r\n    \"Column\",\r\n    \"Comb\",\r\n    \"Comedy\",\r\n    \"Commander\",\r\n    \"Commission\",\r\n    \"Computer\",\r\n    \"Concert\",\r\n    \"Condor\",\r\n    \"Cone\",\r\n    \"Confetti\",\r\n    \"Container\",\r\n    \"Contest\",\r\n    \"Continent\",\r\n    \"Cook\",\r\n    \"Cooker\",\r\n    \"Cookie\",\r\n    \"Cookware\",\r\n    \"Cooler\",\r\n    \"Copper\",\r\n    \"Copy\",\r\n    \"Coral\",\r\n    \"Cord\",\r\n    \"Cork\",\r\n    \"Corn\",\r\n    \"Corner\",\r\n    \"Corral\",\r\n    \"Costume\",\r\n    \"Cottage\",\r\n    \"Cotton\",\r\n    \"Couch\",\r\n    \"Cougar\",\r\n    \"Cousin\",\r\n    \"Cow\",\r\n    \"Cowboy\",\r\n    \"Crab\",\r\n    \"Crack\",\r\n    \"Cracker\",\r\n    \"Crane\",\r\n    \"Crate\",\r\n    \"Crater\",\r\n    \"Cravat\",\r\n    \"Crayon\",\r\n    \"Creature\",\r\n    \"Creme\",\r\n    \"Crest\",\r\n    \"Crib\",\r\n    \"Cricket\",\r\n    \"Crisp\",\r\n    \"Critter\",\r\n    \"Crocodile\",\r\n    \"Croissant\",\r\n    \"Cross\",\r\n    \"Crossbow\",\r\n    \"Crow\",\r\n    \"Crown\",\r\n    \"Crucible\",\r\n    \"Crumb\",\r\n    \"Crust\",\r\n    \"Crystal\",\r\n    \"Cucumber\",\r\n    \"Cuff\",\r\n    \"Cup\",\r\n    \"Cupcake\",\r\n    \"Currency\",\r\n    \"Curtain\",\r\n    \"Cushion\",\r\n    \"Cymbal\",\r\n    \"Daffodil\",\r\n    \"Dagger\",\r\n    \"Dahlia\",\r\n    \"Daisy\",\r\n    \"Dam\",\r\n    \"Dancer\",\r\n    \"Dandelion\",\r\n    \"Dart\",\r\n    \"Date\",\r\n    \"Dates\",\r\n    \"Daughter\",\r\n    \"Dealer\",\r\n    \"Deck\",\r\n    \"Decoder\",\r\n    \"Decoy\",\r\n    \"Deer\",\r\n    \"Demon\",\r\n    \"Den\",\r\n    \"Denim\",\r\n    \"Dentist\",\r\n    \"Deodorant\",\r\n    \"Deputy\",\r\n    \"Desert\",\r\n    \"Designer\",\r\n    \"Desk\",\r\n    \"Dessert\",\r\n    \"Detective\",\r\n    \"Devil\",\r\n    \"Diamond\",\r\n    \"Diaper\",\r\n    \"Diary\",\r\n    \"Dice\",\r\n    \"Dictator\",\r\n    \"Digger\",\r\n    \"Dime\",\r\n    \"Diner\",\r\n    \"Dinghy\",\r\n    \"Dinosaur\",\r\n    \"Diploma\",\r\n    \"Diplomat\",\r\n    \"Director\",\r\n    \"Dirt\",\r\n    \"Disco\",\r\n    \"Dish\",\r\n    \"Disk\",\r\n    \"Diver\",\r\n    \"Diving\",\r\n    \"Djinn\",\r\n    \"Dock\",\r\n    \"Doctor\",\r\n    \"Doe\",\r\n    \"Dog\",\r\n    \"Doll\",\r\n    \"Dollar\",\r\n    \"Dolphin\",\r\n    \"Donkey\",\r\n    \"Donor\",\r\n    \"Door\",\r\n    \"Doorknob\",\r\n    \"Doorstep\",\r\n    \"Dorm\",\r\n    \"Dot\",\r\n    \"Dough\",\r\n    \"Dove\",\r\n    \"Dragon\",\r\n    \"Dragonfly\",\r\n    \"Drain\",\r\n    \"Drape\",\r\n    \"Drawer\",\r\n    \"Dress\",\r\n    \"Dresser\",\r\n    \"Drill\",\r\n    \"Drink\",\r\n    \"Driver\",\r\n    \"Driveway\",\r\n    \"Drone\",\r\n    \"Drop\",\r\n    \"Drug\",\r\n    \"Drum\",\r\n    \"Drummer\",\r\n    \"Duck\",\r\n    \"Duct\",\r\n    \"Duel\",\r\n    \"Dumbbell\",\r\n    \"Dump\",\r\n    \"Dune\",\r\n    \"Dynamite\",\r\n    \"Eagle\",\r\n    \"Ear\",\r\n    \"Earlobe\",\r\n    \"Earn\",\r\n    \"Earrings\",\r\n    \"Ears\",\r\n    \"Eclipse\",\r\n    \"Eel\",\r\n    \"Egg\",\r\n    \"Eggplant\",\r\n    \"Elbow\",\r\n    \"Elder\",\r\n    \"Elephant\",\r\n    \"Elevator\",\r\n    \"Elf\",\r\n    \"Elk\",\r\n    \"Ellipse\",\r\n    \"Escort\",\r\n    \"Eye\",\r\n    \"Eyebrow\",\r\n    \"Eyelid\",\r\n    \"Factory\",\r\n    \"Fairy\",\r\n    \"Fan\",\r\n    \"Fang\",\r\n    \"Farm\",\r\n    \"Farmer\",\r\n    \"Fat\",\r\n    \"Father\",\r\n    \"Faucet\",\r\n    \"Fax\",\r\n    \"Feast\",\r\n    \"Feed\",\r\n    \"Fence\",\r\n    \"Ferry\",\r\n    \"Field\",\r\n    \"Fig\",\r\n    \"Fight\",\r\n    \"Figure\",\r\n    \"Film\",\r\n    \"Finger\",\r\n    \"Fire\",\r\n    \"Firearm\",\r\n    \"Fireplace\",\r\n    \"Firework\",\r\n    \"Firm\",\r\n    \"Fish\",\r\n    \"Fisherman\",\r\n    \"Fist\",\r\n    \"Flag\",\r\n    \"Flame\",\r\n    \"Flamingo\",\r\n    \"Flannel\",\r\n    \"Flash\",\r\n    \"Flat\",\r\n    \"Flea\",\r\n    \"Fleet\",\r\n    \"Flock\",\r\n    \"Floor\",\r\n    \"Florist\",\r\n    \"Flour\",\r\n    \"Flower\",\r\n    \"Flute\",\r\n    \"Fly\",\r\n    \"Foam\",\r\n    \"Fog\",\r\n    \"Foil\",\r\n    \"Fondue\",\r\n    \"Food\",\r\n    \"Foot\",\r\n    \"Football\",\r\n    \"Footprint\",\r\n    \"Ford\",\r\n    \"Forest\",\r\n    \"Fork\",\r\n    \"Fortress\",\r\n    \"Fossil\",\r\n    \"Fountain\",\r\n    \"Fox\",\r\n    \"Fracture\",\r\n    \"France\",\r\n    \"Freeze\",\r\n    \"Fridge\",\r\n    \"Frog\",\r\n    \"Front\",\r\n    \"Frost\",\r\n    \"Fruit\",\r\n    \"Fry\",\r\n    \"Fuel\",\r\n    \"Fur\",\r\n    \"Furniture\",\r\n    \"Galaxy\",\r\n    \"Gander\",\r\n    \"Gang\",\r\n    \"Garage\",\r\n    \"Garb\",\r\n    \"Garden\",\r\n    \"Garland\",\r\n    \"Garlic\",\r\n    \"Garment\",\r\n    \"Gas\",\r\n    \"Gasket\",\r\n    \"Gate\",\r\n    \"Gateway\",\r\n    \"Gauge\",\r\n    \"Gear\",\r\n    \"Gecko\",\r\n    \"Gel\",\r\n    \"Gem\",\r\n    \"Geranium\",\r\n    \"Gesture\",\r\n    \"Ghost\",\r\n    \"Giant\",\r\n    \"Gift\",\r\n    \"Ginger\",\r\n    \"Giraffe\",\r\n    \"Girl\",\r\n    \"Glass\",\r\n    \"Glasses\",\r\n    \"Glen\",\r\n    \"Gloves\",\r\n    \"Glue\",\r\n    \"Gnat\",\r\n    \"Goat\",\r\n    \"Gold\",\r\n    \"Goldfish\",\r\n    \"Golf\",\r\n    \"Gondola\",\r\n    \"Gong\",\r\n    \"Goose\",\r\n    \"Gopher\",\r\n    \"Gorilla\",\r\n    \"Gothic\",\r\n    \"Governor\",\r\n    \"Graffiti\",\r\n    \"Grains\",\r\n    \"Granite\",\r\n    \"Grape\",\r\n    \"Grapes\",\r\n    \"Graph\",\r\n    \"Grass\",\r\n    \"Grasshopper\",\r\n    \"Gravy\",\r\n    \"Grease\",\r\n    \"Great\",\r\n    \"Green\",\r\n    \"Greenhouse\",\r\n    \"Grid\",\r\n    \"Grin\",\r\n    \"Grocery\",\r\n    \"Guitar\",\r\n    \"Gull\",\r\n    \"Gum\",\r\n    \"Gun\",\r\n    \"Gym\",\r\n    \"Gymnast\",\r\n    \"Hair\",\r\n    \"Haircut\",\r\n    \"Ham\",\r\n    \"Hamburger\",\r\n    \"Hammer\",\r\n    \"Hand\",\r\n    \"Handbag\",\r\n    \"Handle\",\r\n    \"Hangar\",\r\n    \"Hanger\",\r\n    \"Harbor\",\r\n    \"Harpoon\",\r\n    \"Hat\",\r\n    \"Hatch\",\r\n    \"Hatchet\",\r\n    \"Hawk\",\r\n    \"Hay\",\r\n    \"Haze\",\r\n    \"Head\",\r\n    \"Headband\",\r\n    \"Headlight\",\r\n    \"Headline\",\r\n    \"Headphone\",\r\n    \"Headquarters\",\r\n    \"Hearse\",\r\n    \"Heart\",\r\n    \"Heater\",\r\n    \"Heels\",\r\n    \"Helicopter\",\r\n    \"Helmet\",\r\n    \"Hen\",\r\n    \"Herb\",\r\n    \"Herbs\",\r\n    \"Herring\",\r\n    \"Hide\",\r\n    \"Highway\",\r\n    \"Hike\",\r\n    \"Hill\",\r\n    \"Hinge\",\r\n    \"Hippopotamus\",\r\n    \"Hit\",\r\n    \"Hive\",\r\n    \"Hockey\",\r\n    \"Hog\",\r\n    \"Hole\",\r\n    \"Home\",\r\n    \"Honey\",\r\n    \"Hood\",\r\n    \"Hoof\",\r\n    \"Hook\",\r\n    \"Horn\",\r\n    \"Horse\",\r\n    \"Hose\",\r\n    \"Hospital\",\r\n    \"Hostel\",\r\n    \"Hostess\",\r\n    \"Hot\",\r\n    \"Hotel\",\r\n    \"Hour\",\r\n    \"Housing\",\r\n    \"Howl\",\r\n    \"Hub\",\r\n    \"Huddle\",\r\n    \"Hull\",\r\n    \"Human\",\r\n    \"Hummingbird\",\r\n    \"Hump\",\r\n    \"Hurricane\",\r\n    \"Hut\",\r\n    \"Hydrant\",\r\n    \"Ice\",\r\n    \"Iceberg\",\r\n    \"Icecream\",\r\n    \"Iguana\",\r\n    \"Impala\",\r\n    \"Inbox\",\r\n    \"India\",\r\n    \"Indigo\",\r\n    \"Infant\",\r\n    \"Injection\",\r\n    \"Ink\",\r\n    \"Insect\",\r\n    \"Inspector\",\r\n    \"Interpreter\",\r\n    \"Invoice\",\r\n    \"Iris\",\r\n    \"Iron\",\r\n    \"Island\",\r\n    \"Jacket\",\r\n    \"Jackpot\",\r\n    \"Jade\",\r\n    \"Jaguar\",\r\n    \"Jail\",\r\n    \"Jam\",\r\n    \"Jar\",\r\n    \"Jasmine\",\r\n    \"Jaw\",\r\n    \"Jazz\",\r\n    \"Jeans\",\r\n    \"Jeep\",\r\n    \"Jelly\",\r\n    \"Jellyfish\",\r\n    \"Jet\",\r\n    \"Jewel\",\r\n    \"Jewelry\",\r\n    \"Jockey\",\r\n    \"Jog\",\r\n    \"Journal\",\r\n    \"Jug\",\r\n    \"Juggler\",\r\n    \"Juice\",\r\n    \"Juicer\",\r\n    \"Jump\",\r\n    \"Jumper\",\r\n    \"Jungle\",\r\n    \"Kale\",\r\n    \"Kangaroo\",\r\n    \"Kayak\",\r\n    \"Keel\",\r\n    \"Kelp\",\r\n    \"Kettle\",\r\n    \"Key\",\r\n    \"Keyboard\",\r\n    \"Kick\",\r\n    \"Kid\",\r\n    \"Kidney\",\r\n    \"King\",\r\n    \"Kiss\",\r\n    \"Kitchen\",\r\n    \"Kite\",\r\n    \"Kitten\",\r\n    \"Kiwi\",\r\n    \"Knee\",\r\n    \"Knife\",\r\n    \"Knight\",\r\n    \"Knob\",\r\n    \"Knot\",\r\n    \"Koala\",\r\n    \"Ladder\",\r\n    \"Lady\",\r\n    \"Ladybug\",\r\n    \"Lake\",\r\n    \"Lamb\",\r\n    \"Lamp\",\r\n    \"Lantern\",\r\n    \"Laptop\",\r\n    \"Laser\",\r\n    \"Laundry\",\r\n    \"Lava\",\r\n    \"Lavender\",\r\n    \"Lawn\",\r\n    \"Lawyer\",\r\n    \"Lead\",\r\n    \"Leaf\",\r\n    \"League\",\r\n    \"Leash\",\r\n    \"Leather\",\r\n    \"Leave\",\r\n    \"Leaves\",\r\n    \"Ledge\",\r\n    \"Leech\",\r\n    \"Leg\",\r\n    \"Legging\",\r\n    \"Leggings\",\r\n    \"Lemon\",\r\n    \"Lemonade\",\r\n    \"Lens\",\r\n    \"Leopard\",\r\n    \"Letter\",\r\n    \"Lever\",\r\n    \"Library\",\r\n    \"Lid\",\r\n    \"Light\",\r\n    \"Lighthouse\",\r\n    \"Lightning\",\r\n    \"Lilac\",\r\n    \"Lily\",\r\n    \"Lime\",\r\n    \"Liner\",\r\n    \"Lion\",\r\n    \"Lip\",\r\n    \"Lips\",\r\n    \"Litter\",\r\n    \"Lizard\",\r\n    \"Llama\",\r\n    \"Loaf\",\r\n    \"Lobster\",\r\n    \"Lock\",\r\n    \"Locomotive\",\r\n    \"Lodge\",\r\n    \"Lollipop\",\r\n    \"Luggage\",\r\n    \"Lunchbox\",\r\n    \"Lung\",\r\n    \"Lynx\",\r\n    \"Lyre\",\r\n    \"Lyric\",\r\n    \"Machine\",\r\n    \"Magician\",\r\n    \"Magnet\",\r\n    \"Magnolia\",\r\n    \"Mail\",\r\n    \"Mailbox\",\r\n    \"Makeup\",\r\n    \"Man\",\r\n    \"Mango\",\r\n    \"Manhole\",\r\n    \"Mansion\",\r\n    \"Map\",\r\n    \"Maple\",\r\n    \"Marble\",\r\n    \"Mars\",\r\n    \"Martian\",\r\n    \"Mask\",\r\n    \"Matrix\",\r\n    \"Mattress\",\r\n    \"Mature\",\r\n    \"Meadow\",\r\n    \"Meal\",\r\n    \"Measure\",\r\n    \"Meat\",\r\n    \"Mechanic\",\r\n    \"Medal\",\r\n    \"Medicine\",\r\n    \"Melon\",\r\n    \"Menu\",\r\n    \"Mercury\",\r\n    \"Meteor\",\r\n    \"Meter\",\r\n    \"Microphone\",\r\n    \"Microscope\",\r\n    \"Microwave\",\r\n    \"Mile\",\r\n    \"Milk\",\r\n    \"Mill\",\r\n    \"Miller\",\r\n    \"Miss\",\r\n    \"Mist\",\r\n    \"Mister\",\r\n    \"Mistress\",\r\n    \"Mitt\",\r\n    \"Mitten\",\r\n    \"Mixer\",\r\n    \"Mobile\",\r\n    \"Mock\",\r\n    \"Mole\",\r\n    \"Molecule\",\r\n    \"Money\",\r\n    \"Monopoly\",\r\n    \"Monument\",\r\n    \"Moon\",\r\n    \"Moose\",\r\n    \"Mop\",\r\n    \"Mosaic\",\r\n    \"Mosque\",\r\n    \"Mosquito\",\r\n    \"Moss\",\r\n    \"Mother\",\r\n    \"Motor\",\r\n    \"Motorcycle\",\r\n    \"Mountain\",\r\n    \"Mouse\",\r\n    \"Moustache\",\r\n    \"Mouth\",\r\n    \"Movie\",\r\n    \"Mud\",\r\n    \"Mug\",\r\n    \"Mulch\",\r\n    \"Muscle\",\r\n    \"Museum\",\r\n    \"Mushroom\",\r\n    \"Musician\",\r\n    \"Nail\",\r\n    \"Napkin\",\r\n    \"Nautilus\",\r\n    \"Navy\",\r\n    \"Neck\",\r\n    \"Necklace\",\r\n    \"Needle\",\r\n    \"Nest\",\r\n    \"Newspaper\",\r\n    \"Night\",\r\n    \"Ninja\",\r\n    \"Noodles\",\r\n    \"North\",\r\n    \"Nose\",\r\n    \"Notebook\",\r\n    \"Nun\",\r\n    \"Nurse\",\r\n    \"Nut\",\r\n    \"Nylon\",\r\n    \"Oar\",\r\n    \"Oat\",\r\n    \"Oboe\",\r\n    \"Ocean\",\r\n    \"Octopus\",\r\n    \"Oil\",\r\n    \"Olive\",\r\n    \"Omelet\",\r\n    \"Onion\",\r\n    \"Orange\",\r\n    \"Orchid\",\r\n    \"Organ\",\r\n    \"Ornament\",\r\n    \"Ostrich\",\r\n    \"Otter\",\r\n    \"Oval\",\r\n    \"Oven\",\r\n    \"Owl\",\r\n    \"Ox\",\r\n    \"Oyster\",\r\n    \"Pad\",\r\n    \"Pail\",\r\n    \"Paint\",\r\n    \"Painter\",\r\n    \"Palace\",\r\n    \"Palette\",\r\n    \"Palm\",\r\n    \"Pan\",\r\n    \"Pancake\",\r\n    \"Panda\",\r\n    \"Panel\",\r\n    \"Pansy\",\r\n    \"Panther\",\r\n    \"Pants\",\r\n    \"Parachute\",\r\n    \"Parfume\",\r\n    \"Park\",\r\n    \"Parrot\",\r\n    \"Passport\",\r\n    \"Pasta\",\r\n    \"Paste\",\r\n    \"Pastor\",\r\n    \"Pastry\",\r\n    \"Paw\",\r\n    \"Pawn\",\r\n    \"Peacock\",\r\n    \"Peanut\",\r\n    \"Pear\",\r\n    \"Peasant\",\r\n    \"Pedal\",\r\n    \"Pedestrian\",\r\n    \"Pediatrician\",\r\n    \"Peel\",\r\n    \"Pen\",\r\n    \"Pencil\",\r\n    \"Pendant\",\r\n    \"Penguin\",\r\n    \"Penny\",\r\n    \"Pepper\",\r\n    \"Pest\",\r\n    \"Pet\",\r\n    \"Pharmacist\",\r\n    \"Pharmacy\",\r\n    \"Phone\",\r\n    \"Photo\",\r\n    \"Piano\",\r\n    \"Pickle\",\r\n    \"Pie\",\r\n    \"Pier\",\r\n    \"Pig\",\r\n    \"Pigeon\",\r\n    \"Pigment\",\r\n    \"Pike\",\r\n    \"Pilgrim\",\r\n    \"Pill\",\r\n    \"Pillar\",\r\n    \"Pillow\",\r\n    \"Pin\",\r\n    \"Pineapple\",\r\n    \"Pink\",\r\n    \"Pipe\",\r\n    \"Pirate\",\r\n    \"Pitcher\",\r\n    \"Pizza\",\r\n    \"Plan\",\r\n    \"Plane\",\r\n    \"Plant\",\r\n    \"Plasma\",\r\n    \"Plastic\",\r\n    \"Plate\",\r\n    \"Plates\",\r\n    \"Plow\",\r\n    \"Plumber\",\r\n    \"Plume\",\r\n    \"Pocket\",\r\n    \"Poker\",\r\n    \"Police\",\r\n    \"Policeman\",\r\n    \"Polish\",\r\n    \"Politician\",\r\n    \"Polo\",\r\n    \"Pond\",\r\n    \"Pony\",\r\n    \"Pool\",\r\n    \"Pop\",\r\n    \"Popcorn\",\r\n    \"Pope\",\r\n    \"Poppy\",\r\n    \"Porch\",\r\n    \"Pork\",\r\n    \"Post\",\r\n    \"Postman\",\r\n    \"Pot\",\r\n    \"Potato\",\r\n    \"Pottery\",\r\n    \"Pouch\",\r\n    \"Pound\",\r\n    \"Powder\",\r\n    \"Prairie\",\r\n    \"Pregnancy\",\r\n    \"Pretzel\",\r\n    \"Prey\",\r\n    \"Price\",\r\n    \"Priest\",\r\n    \"Print\",\r\n    \"Printer\",\r\n    \"Prism\",\r\n    \"Prison\",\r\n    \"Produce\",\r\n    \"Projection\",\r\n    \"Promenade\",\r\n    \"Propeller\",\r\n    \"Protein\",\r\n    \"Pub\",\r\n    \"Puddle\",\r\n    \"Puff\",\r\n    \"Pulley\",\r\n    \"Pump\",\r\n    \"Pumpkin\",\r\n    \"Punch\",\r\n    \"Pupil\",\r\n    \"Puppet\",\r\n    \"Puppy\",\r\n    \"Purple\",\r\n    \"Purse\",\r\n    \"Push\",\r\n    \"Puzzle\",\r\n    \"Pyramid\",\r\n    \"Python\",\r\n    \"Quartz\",\r\n    \"Quiz\",\r\n    \"Rabbit\",\r\n    \"Raccoon\",\r\n    \"Radar\",\r\n    \"Radiator\",\r\n    \"Radio\",\r\n    \"Rag\",\r\n    \"Rail\",\r\n    \"Railroad\",\r\n    \"Rain\",\r\n    \"Rainbow\",\r\n    \"Ram\",\r\n    \"Ranch\",\r\n    \"Receiver\",\r\n    \"Recipe\",\r\n    \"Red\",\r\n    \"Reed\",\r\n    \"Referee\",\r\n    \"Refrigerator\",\r\n    \"Relic\",\r\n    \"Resort\",\r\n    \"Restaurant\",\r\n    \"Ribbon\",\r\n    \"Ribs\",\r\n    \"Rice\",\r\n    \"Rider\",\r\n    \"Rifle\",\r\n    \"Ring\",\r\n    \"Rink\",\r\n    \"Road\",\r\n    \"Robot\",\r\n    \"Rock\",\r\n    \"Rocket\",\r\n    \"Rod\",\r\n    \"Roller\",\r\n    \"Roof\",\r\n    \"Room\",\r\n    \"Root\",\r\n    \"Rope\",\r\n    \"Rose\",\r\n    \"Rot\",\r\n    \"Rowboat\",\r\n    \"Rubber\",\r\n    \"Rug\",\r\n    \"Rugby\",\r\n    \"Ruins\",\r\n    \"Ruler\",\r\n    \"Rust\",\r\n    \"Sack\",\r\n    \"Sacred\",\r\n    \"Saddle\",\r\n    \"Saffron\",\r\n    \"Sailboat\",\r\n    \"Sailor\",\r\n    \"Salad\",\r\n    \"Salmon\",\r\n    \"Salon\",\r\n    \"Salt\",\r\n    \"Sandal\",\r\n    \"Sandals\",\r\n    \"Sandcastle\",\r\n    \"Sandwich\",\r\n    \"Sapphire\",\r\n    \"Satellite\",\r\n    \"Satin\",\r\n    \"Sauce\",\r\n    \"Saucer\",\r\n    \"Savage\",\r\n    \"Saw\",\r\n    \"Saxophone\",\r\n    \"Scale\",\r\n    \"Scanner\",\r\n    \"Scarecrow\",\r\n    \"Scarf\",\r\n    \"School\",\r\n    \"Scissors\",\r\n    \"Scooter\",\r\n    \"Screen\",\r\n    \"Screw\",\r\n    \"Sculptor\",\r\n    \"Sculpture\",\r\n    \"Seal\",\r\n    \"Seat\",\r\n    \"Seed\",\r\n    \"Shack\",\r\n    \"Shampoo\",\r\n    \"Shark\",\r\n    \"Shed\",\r\n    \"Sheep\",\r\n    \"Sheet\",\r\n    \"Shelf\",\r\n    \"Shell\",\r\n    \"Shelter\",\r\n    \"Shield\",\r\n    \"Ship\",\r\n    \"Shirt\",\r\n    \"Shoe\",\r\n    \"Shoes\",\r\n    \"Shop\",\r\n    \"Shorts\",\r\n    \"Shower\",\r\n    \"Shrimp\",\r\n    \"Sick\",\r\n    \"Sidewalk\",\r\n    \"Silk\",\r\n    \"Silver\",\r\n    \"Singer\",\r\n    \"Sink\",\r\n    \"Skate\",\r\n    \"Skater\",\r\n    \"Skeleton\",\r\n    \"Ski\",\r\n    \"Skin\",\r\n    \"Skirt\",\r\n    \"Skull\",\r\n    \"Skunk\",\r\n    \"Sky\",\r\n    \"Skyscraper\",\r\n    \"Sleep\",\r\n    \"Slice\",\r\n    \"Slide\",\r\n    \"Slipper\",\r\n    \"Slippers\",\r\n    \"Slug\",\r\n    \"Smoke\",\r\n    \"Snack\",\r\n    \"Snake\",\r\n    \"Sneaker\",\r\n    \"Sneeze\",\r\n    \"Sniff\",\r\n    \"Snow\",\r\n    \"Snowball\",\r\n    \"Snowboard\",\r\n    \"Snowflake\",\r\n    \"Snowman\",\r\n    \"Soap\",\r\n    \"Soccer\",\r\n    \"Sock\",\r\n    \"Socks\",\r\n    \"Soda\",\r\n    \"Sofa\",\r\n    \"Soil\",\r\n    \"Soldier\",\r\n    \"Son\",\r\n    \"Sorbet\",\r\n    \"Soup\",\r\n    \"Spade\",\r\n    \"Spaghetti\",\r\n    \"Spare\",\r\n    \"Sparrow\",\r\n    \"Speaker\",\r\n    \"Spear\",\r\n    \"Spider\",\r\n    \"Spiral\",\r\n    \"Spirit\",\r\n    \"Spit\",\r\n    \"Splash\",\r\n    \"Split\",\r\n    \"Sponge\",\r\n    \"Spoon\",\r\n    \"Spray\",\r\n    \"Spring\",\r\n    \"Sprinkler\",\r\n    \"Squad\",\r\n    \"Square\",\r\n    \"Squat\",\r\n    \"Squirrel\",\r\n    \"Stain\",\r\n    \"Stair\",\r\n    \"Stamp\",\r\n    \"Star\",\r\n    \"Station\",\r\n    \"Stereo\",\r\n    \"Stick\",\r\n    \"Sticker\",\r\n    \"Stitch\",\r\n    \"Stomach\",\r\n    \"Stove\",\r\n    \"Strap\",\r\n    \"Straw\",\r\n    \"Strawberry\",\r\n    \"Stream\",\r\n    \"Street\",\r\n    \"Strobe\",\r\n    \"Submarine\",\r\n    \"Subway\",\r\n    \"Succulent\",\r\n    \"Sugar\",\r\n    \"Suit\",\r\n    \"Suitcase\",\r\n    \"Sulfur\",\r\n    \"Sun\",\r\n    \"Sundae\",\r\n    \"Sunflower\",\r\n    \"Sunglasses\",\r\n    \"Supermarket\",\r\n    \"Supernova\",\r\n    \"Surfboard\",\r\n    \"Surgeon\",\r\n    \"Sushi\",\r\n    \"Swamp\",\r\n    \"Swan\",\r\n    \"Swarm\",\r\n    \"Sweater\",\r\n    \"Sweet\",\r\n    \"Swim\",\r\n    \"Swimmer\",\r\n    \"Sword\",\r\n    \"Table\",\r\n    \"Tablet\",\r\n    \"Taco\",\r\n    \"Tail\",\r\n    \"Tailor\",\r\n    \"Tangerine\",\r\n    \"Tank\",\r\n    \"Tanker\",\r\n    \"Tap\",\r\n    \"Tape\",\r\n    \"Target\",\r\n    \"Tattoo\",\r\n    \"Tavern\",\r\n    \"Taxi\",\r\n    \"Tea\",\r\n    \"Teacher\",\r\n    \"Tear\",\r\n    \"Teddy\",\r\n    \"Teeth\",\r\n    \"Telephone\",\r\n    \"Telescope\",\r\n    \"Television\",\r\n    \"Temple\",\r\n    \"Tennis\",\r\n    \"Terrarium\",\r\n    \"Textbook\",\r\n    \"Theater\",\r\n    \"Thermometer\",\r\n    \"Thermos\",\r\n    \"Thief\",\r\n    \"Thigh\",\r\n    \"Thorn\",\r\n    \"Throne\",\r\n    \"Throttle\",\r\n    \"Thunder\",\r\n    \"Tiger\",\r\n    \"Tile\",\r\n    \"Timer\",\r\n    \"Tin\",\r\n    \"Tire\",\r\n    \"Toad\",\r\n    \"Toast\",\r\n    \"Toaster\",\r\n    \"Tobacco\",\r\n    \"Toe\",\r\n    \"Toes\",\r\n    \"Toilet\",\r\n    \"Tomato\",\r\n    \"Tomb\",\r\n    \"Tongue\",\r\n    \"Tool\",\r\n    \"Tooth\",\r\n    \"Tortilla\",\r\n    \"Tortoise\",\r\n    \"Towel\",\r\n    \"Tower\",\r\n    \"Town\",\r\n    \"Toy\",\r\n    \"Tractor\",\r\n    \"Trader\",\r\n    \"Tram\",\r\n    \"Trampoline\",\r\n    \"Trap\",\r\n    \"Tray\",\r\n    \"Treasure\",\r\n    \"Tree\",\r\n    \"Triangle\",\r\n    \"Tribe\",\r\n    \"Tricycle\",\r\n    \"Trolley\",\r\n    \"Troop\",\r\n    \"Trophy\",\r\n    \"Trousers\",\r\n    \"Trout\",\r\n    \"Truck\",\r\n    \"Truffle\",\r\n    \"Trumpet\",\r\n    \"Trunk\",\r\n    \"Tube\",\r\n    \"Tulip\",\r\n    \"Tuna\",\r\n    \"Tunnel\",\r\n    \"Turban\",\r\n    \"Turbine\",\r\n    \"Turkey\",\r\n    \"Turtle\",\r\n    \"Tusk\",\r\n    \"Twine\",\r\n    \"Umbrella\",\r\n    \"Underwear\",\r\n    \"Unicorn\",\r\n    \"Uniform\",\r\n    \"Vaccine\",\r\n    \"Vacuum\",\r\n    \"Valentine\",\r\n    \"Van\",\r\n    \"Vanilla\",\r\n    \"Vase\",\r\n    \"Vault\",\r\n    \"Vegetable\",\r\n    \"Vehicle\",\r\n    \"Vessel\",\r\n    \"Villa\",\r\n    \"Vinegar\",\r\n    \"Vinyl\",\r\n    \"Violet\",\r\n    \"Violin\",\r\n    \"Violinist\",\r\n    \"Viper\",\r\n    \"Volcano\",\r\n    \"Vortex\",\r\n    \"Vulture\",\r\n    \"Wafer\",\r\n    \"Waffle\",\r\n    \"Wagon\",\r\n    \"Waiter\",\r\n    \"Wallet\",\r\n    \"Walnut\",\r\n    \"Wardrobe\",\r\n    \"Warrior\",\r\n    \"Wasabi\",\r\n    \"Waste\",\r\n    \"Watch\",\r\n    \"Water\",\r\n    \"Waterfall\",\r\n    \"Wax\",\r\n    \"Weapon\",\r\n    \"Weasel\",\r\n    \"Wedding\",\r\n    \"Whale\",\r\n    \"Wheat\",\r\n    \"Wheel\",\r\n    \"Whip\",\r\n    \"White\",\r\n    \"Wick\",\r\n    \"Widow\",\r\n    \"Wife\",\r\n    \"Willow\",\r\n    \"Window\",\r\n    \"Wing\",\r\n    \"Winter\",\r\n    \"Witch\",\r\n    \"Wobble\",\r\n    \"Wolf\",\r\n    \"Woman\",\r\n    \"Wood\",\r\n    \"Woodpecker\",\r\n    \"Wool\",\r\n    \"Worm\",\r\n    \"Wrench\",\r\n    \"Wrestler\",\r\n    \"Writer\",\r\n    \"Xylophone\",\r\n    \"Yacht\",\r\n    \"Yam\",\r\n    \"Yoga\",\r\n    \"Yogurt\",\r\n    \"Yolk\",\r\n    \"Zebra\",\r\n    \"Zen\",\r\n    \"Zero\",\r\n    \"Zip\",\r\n    \"Zipper\",\r\n    \"Zoo\"\r\n];\r\n","import { EnumQuestionType } from \"./question.constants\";\r\n\r\nexport enum EnumQuestionGroup {\r\n    Comparison = \"Comparison\",\r\n    Direction = \"Direction\",\r\n    Arrangement = \"Arrangement\",\r\n}\r\n\r\nexport interface ISettingParams {\r\n    enabled: boolean;\r\n    minNumOfPremises: number;\r\n    maxNumOfPremises: number;\r\n    basic: boolean;\r\n    group?: EnumQuestionGroup;\r\n}\r\n\r\nexport const QUESTION_TYPE_SETTING_PARAMS: Record<EnumQuestionType, ISettingParams> = {\r\n    [EnumQuestionType.Distinction]: {\r\n        enabled: true,\r\n        minNumOfPremises: 2,\r\n        maxNumOfPremises: 20,\r\n        basic: true\r\n    },\r\n    [EnumQuestionType.ComparisonNumerical]: {\r\n        enabled: true,\r\n        minNumOfPremises: 2,\r\n        maxNumOfPremises: 20,\r\n        basic: true,\r\n        group: EnumQuestionGroup.Comparison\r\n    },\r\n    [EnumQuestionType.ComparisonChronological]: {\r\n        enabled: true,\r\n        minNumOfPremises: 2,\r\n        maxNumOfPremises: 20,\r\n        basic: true,\r\n        group: EnumQuestionGroup.Comparison\r\n    },\r\n    [EnumQuestionType.Syllogism]: {\r\n        enabled: true,\r\n        minNumOfPremises: 2,\r\n        maxNumOfPremises: 20,\r\n        basic: true\r\n    },\r\n    [EnumQuestionType.LinearArrangement]: {\r\n        enabled: true,\r\n        minNumOfPremises: 2,\r\n        maxNumOfPremises: 20,\r\n        basic: true,\r\n        group: EnumQuestionGroup.Arrangement\r\n    },\r\n    [EnumQuestionType.CircularArrangement]: {\r\n        enabled: true,\r\n        minNumOfPremises: 2,\r\n        maxNumOfPremises: 20,\r\n        basic: true,\r\n        group: EnumQuestionGroup.Arrangement\r\n    },\r\n    [EnumQuestionType.Direction]: {\r\n        enabled: true,\r\n        minNumOfPremises: 2,\r\n        maxNumOfPremises: 20,\r\n        basic: true,\r\n        group: EnumQuestionGroup.Direction\r\n    },\r\n    [EnumQuestionType.Direction3DSpatial]: {\r\n        enabled: true,\r\n        minNumOfPremises: 2,\r\n        maxNumOfPremises: 20,\r\n        basic: true,\r\n        group: EnumQuestionGroup.Direction\r\n    },\r\n    [EnumQuestionType.Direction3DTemporal]: {\r\n        enabled: true,\r\n        minNumOfPremises: 2,\r\n        maxNumOfPremises: 20,\r\n        basic: true,\r\n        group: EnumQuestionGroup.Direction\r\n    },\r\n    [EnumQuestionType.GraphMatching]: {\r\n        enabled: true,\r\n        minNumOfPremises: 2,\r\n        maxNumOfPremises: 20,\r\n        basic: false\r\n    },\r\n    [EnumQuestionType.Analogy]: {\r\n        enabled: true,\r\n        minNumOfPremises: 3,\r\n        maxNumOfPremises: 20,\r\n        basic: false\r\n    },\r\n    [EnumQuestionType.Binary]: {\r\n        enabled: true,\r\n        minNumOfPremises: 4,\r\n        maxNumOfPremises: 20,\r\n        basic: false\r\n    },\r\n}\r\n\r\nexport const DEFAULT_ENABLED_FLAGS = {\r\n    meaningfulWords: true,\r\n    meta: true,\r\n    negation: true,\r\n    binary: {\r\n        and: true,\r\n        nand: true,\r\n        or: true,\r\n        nor: true,\r\n        xor: true,\r\n        xnor: true,\r\n    },\r\n};","import { EnumQuestionType } from \"./question.constants\";\r\n\r\nexport const INF = Infinity;\r\n\r\nexport enum EnumScreens {\r\n    Intro = \"Intro\",\r\n    Start = \"Start\",\r\n    Tutorial = \"Tutorial\",\r\n    Game = \"Game\",\r\n    Feedback = \"Feedback\",\r\n    History = \"History\",\r\n    Tutorials = \"Tutorials\",\r\n    Stats = \"Stats\",\r\n    PlaygroundMode = \"Playground Mode\",\r\n    Settings = \"Settings\",\r\n    TiersMatrix = \"Tiers Matrix\",\r\n    OtherGames = \"Other Games\",\r\n}\r\n\r\nexport enum EnumTiers {\r\n    Adept = \"Adept\",\r\n    Scholar = \"Scholar\",\r\n    Savant = \"Savant\",\r\n    Expert = \"Expert\",\r\n    Mastermind = \"Mastermind\",\r\n    Visionary = \"Visionary\",\r\n    Genius = \"Genius\",\r\n    Virtuoso = \"Virtuoso\",\r\n    Luminary = \"Luminary\",\r\n    Prodigy = \"Prodigy\",\r\n    Oracle = \"Oracle\",\r\n    Sage = \"Sage\",\r\n    Philosopher = \"Philosopher\",\r\n    Mystic = \"Mystic\",\r\n    Transcendent = \"Transcendent\",\r\n}\r\n\r\nexport const TIER_COLORS: Record<EnumTiers, { bgColor: string, textColor: string }> = {\r\n    [EnumTiers.Adept]:          { bgColor: \"#F0F8FF\", textColor: \"#045D56\" },  // Alice Blue with Teal\r\n    [EnumTiers.Scholar]:        { bgColor: \"#ADD8E6\", textColor: \"#013220\" },  // Light Blue with Deep Green\r\n    [EnumTiers.Savant]:         { bgColor: \"#E6E6FA\", textColor: \"#4B0082\" },  // Lavender with Indigo\r\n    [EnumTiers.Expert]:         { bgColor: \"#D8BFD8\", textColor: \"#8B008B\" },  // Thistle with Dark Magenta\r\n    [EnumTiers.Mastermind]:     { bgColor: \"#DDA0DD\", textColor: \"#483D8B\" },  // Plum with Dark Slate Blue\r\n    [EnumTiers.Visionary]:      { bgColor: \"#B0E0E6\", textColor: \"#002366\" },  // Powder Blue with Royal Blue\r\n    [EnumTiers.Genius]:         { bgColor: \"#AFEEEE\", textColor: \"#004953\" },  // Pale Turquoise with Deep Aqua\r\n    [EnumTiers.Virtuoso]:       { bgColor: \"#00CED1\", textColor: \"#002D62\" },  // Dark Turquoise with Deep Blue\r\n    [EnumTiers.Luminary]:       { bgColor: \"#98FB98\", textColor: \"#006400\" },  // Pale Green with Dark Green\r\n    [EnumTiers.Prodigy]:        { bgColor: \"#FFFACD\", textColor: \"#556B2F\" },  // Lemon Chiffon with Dark Olive Green\r\n    [EnumTiers.Oracle]:         { bgColor: \"#FFDAB9\", textColor: \"#A0522D\" },  // Peach Puff with Sienna\r\n    [EnumTiers.Sage]:           { bgColor: \"#FFC0CB\", textColor: \"#8B0000\" },  // Pink with Dark Red\r\n    [EnumTiers.Philosopher]:    { bgColor: \"#D8BFD8\", textColor: \"#4A235A\" },  // Thistle with Dark Purple\r\n    [EnumTiers.Mystic]:         { bgColor: \"#C71585\", textColor: \"#FFE4E1\" },  // Medium Violet Red with Misty Rose\r\n    [EnumTiers.Transcendent]:   { bgColor: \"#4B0082\", textColor: \"#F0F8FF\" },  // Indigo with Alice Blue\r\n};\r\n\r\nexport const TIER_SCORE_RANGES: Record<EnumTiers, { minScore: number, maxScore: number }> = {\r\n    [EnumTiers.Adept]:          { minScore: -INF, maxScore:  249 },\r\n    [EnumTiers.Scholar]:        { minScore:  250, maxScore:  499 },\r\n    [EnumTiers.Savant]:         { minScore:  500, maxScore:  749 },\r\n    [EnumTiers.Expert]:         { minScore:  750, maxScore:  999 },\r\n    [EnumTiers.Mastermind]:     { minScore: 1000, maxScore: 1249 },\r\n    [EnumTiers.Visionary]:      { minScore: 1250, maxScore: 1499 },\r\n    [EnumTiers.Genius]:         { minScore: 1500, maxScore: 1749 },\r\n    [EnumTiers.Virtuoso]:       { minScore: 1750, maxScore: 1999 },\r\n    [EnumTiers.Luminary]:       { minScore: 2000, maxScore: 2249 },\r\n    [EnumTiers.Prodigy]:        { minScore: 2250, maxScore: 2499 },\r\n    [EnumTiers.Oracle]:         { minScore: 2500, maxScore: 2749 },\r\n    [EnumTiers.Sage]:           { minScore: 2750, maxScore: 2999 },\r\n    [EnumTiers.Philosopher]:    { minScore: 3000, maxScore: 3249 },\r\n    [EnumTiers.Mystic]:         { minScore: 3250, maxScore: 3499 },\r\n    [EnumTiers.Transcendent]:   { minScore: 3500, maxScore:  INF },\r\n};\r\n\r\nexport const TIER_SCORE_ADJUSTMENTS: Record<EnumTiers, { increment: number, decrement: number }> = {\r\n    [EnumTiers.Adept]:          { increment: 10, decrement: 10 },\r\n    [EnumTiers.Scholar]:        { increment: 10, decrement: 10 },\r\n    [EnumTiers.Savant]:         { increment: 10, decrement: 10 },\r\n    [EnumTiers.Expert]:         { increment: 10, decrement: 10 },\r\n    [EnumTiers.Mastermind]:     { increment: 10, decrement: 10 },\r\n    [EnumTiers.Visionary]:      { increment: 10, decrement: 10 },\r\n    [EnumTiers.Genius]:         { increment: 10, decrement: 10 },\r\n    [EnumTiers.Virtuoso]:       { increment: 10, decrement: 10 },\r\n    [EnumTiers.Luminary]:       { increment: 10, decrement: 10 },\r\n    [EnumTiers.Prodigy]:        { increment: 10, decrement: 10 },\r\n    [EnumTiers.Oracle]:         { increment: 10, decrement: 10 },\r\n    [EnumTiers.Sage]:           { increment: 10, decrement: 10 },\r\n    [EnumTiers.Philosopher]:    { increment: 10, decrement: 10 },\r\n    [EnumTiers.Mystic]:         { increment: 10, decrement: 10 },\r\n    [EnumTiers.Transcendent]:   { increment: 10, decrement: 10 },\r\n};\r\n\r\nexport const ORDERED_TIERS = Object.keys(TIER_SCORE_RANGES) as EnumTiers[];\r\n\r\nexport const ORDERED_QUESTION_TYPES = [ \r\n    EnumQuestionType.Distinction,\r\n    EnumQuestionType.ComparisonNumerical,\r\n    EnumQuestionType.ComparisonChronological,\r\n    EnumQuestionType.Syllogism,\r\n    EnumQuestionType.LinearArrangement,\r\n    EnumQuestionType.CircularArrangement,\r\n    EnumQuestionType.Direction,\r\n    EnumQuestionType.Direction3DSpatial,\r\n    EnumQuestionType.Direction3DTemporal,\r\n    EnumQuestionType.GraphMatching,\r\n    EnumQuestionType.Analogy,\r\n    EnumQuestionType.Binary,\r\n];\r\n\r\nexport const TIERS_MATRIX: Record<number, [ 0|1, 0|1, 0|1, 0|1, 0|1, 0|1, 0|1, 0|1, 0|1, 0|1, 0|1, 0|1 ]> = {\r\n     0: [  1,  1,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0 ],\r\n     1: [  1,  1,  1,  1,  0,  0,  0,  0,  0,  0,  0,  0 ],\r\n     2: [  1,  1,  1,  1,  1,  0,  0,  0,  0,  0,  0,  0 ],\r\n     3: [  1,  1,  1,  1,  1,  1,  0,  0,  0,  0,  0,  0 ],\r\n     4: [  1,  1,  1,  1,  1,  1,  1,  0,  0,  0,  0,  0 ],\r\n     5: [  1,  1,  1,  1,  1,  1,  1,  1,  1,  0,  1,  0 ],\r\n     6: [  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1 ],\r\n     7: [  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1 ],\r\n     8: [  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1 ],\r\n     9: [  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1 ],\r\n    10: [  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1 ],\r\n    11: [  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1 ],\r\n    12: [  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1 ],\r\n    13: [  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1 ],\r\n    14: [  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1 ],\r\n};","import { EnumArrangements, EnumQuestionType } from \"../constants/question.constants\";\r\n\r\nexport interface IArrangementRelationship {\r\n    description: EnumArrangements;\r\n    steps: number;\r\n}\r\n\r\nexport interface IArrangementPremise {\r\n    a: string;\r\n    b: string;\r\n    relationship: IArrangementRelationship;\r\n    metaRelationships: IArrangementPremise[],\r\n    uid: string;\r\n}\r\n\r\nexport interface IDirectionProposition {\r\n    pair: [[string, number, number], [string, number, number]];\r\n    trasversalDifference?: number;\r\n    cardinals: [string, number][];\r\n    relationship: string;\r\n    uid: string;\r\n}\r\n\r\nexport interface IDirection3DProposition {\r\n    pair: [[string, number, number, number], [string, number, number, number]];\r\n    trasversalDifference: number;\r\n    cardinals: [string, number][];\r\n    relationship: string;\r\n    uid: string;\r\n}\r\n\r\nexport class Question {\r\n    instructions?: string[];\r\n    notes?: string[];\r\n    type: EnumQuestionType;\r\n    isValid = false;\r\n    premises: string[] = [];\r\n    conclusion: string | string[] = \"\";\r\n    createdAt = new Date().getTime();\r\n    answeredAt = new Date().getTime();\r\n    userAnswer?: boolean;\r\n    negations = 0;\r\n    metaRelations = 0;\r\n    timerTypeOnAnswer = \"0\";\r\n    userScore = 0;\r\n    playgroundMode = false;\r\n    // Technical fields\r\n    rule = \"\";\r\n    bucket: string[] = [];\r\n    buckets: string[][][] = [];\r\n    coords: [string, number, number][] = [];\r\n    coords3D: [string, number, number, number][] = [];\r\n    graphPremises: [string, string, string][] = [];\r\n    graphConclusion: [string, string, string][] = [];\r\n\r\n    constructor(type: EnumQuestionType) {\r\n        this.type = type;\r\n    }\r\n}","import { jsonCopy } from \"src/app/utils/json\";\r\nimport { EnumQuestionType } from \"../constants/question.constants\";\r\nimport { EnumQuestionGroup, DEFAULT_ENABLED_FLAGS, QUESTION_TYPE_SETTING_PARAMS } from \"../constants/settings.constants\";\r\nimport { b2n } from \"../utils/question.utils\";\r\n\r\nconst getNumOfEnabledQuestions = (settings: Settings, basicQuestionFilter: boolean) => {\r\n    return Object.values(settings.question)\r\n        .filter(qs => qs.basic === basicQuestionFilter)\r\n        .reduce((a, c) => a + b2n(c.enabled), 0);\r\n};\r\n\r\nconst getNumOfEnabledOperators = (settings: Settings) => {\r\n    return Object.values(settings.enabled.binary)\r\n        .reduce((a, c) => a + b2n(c), 0);\r\n};\r\n\r\nexport interface Picked<T> {\r\n    picked: T[];\r\n    remaining: T[];\r\n}\r\n\r\nexport function canGenerateQuestion(\r\n    questionType: EnumQuestionType,\r\n    numOfPremises: number,\r\n    settings: Settings\r\n) {\r\n    const enoughPremises = numOfPremises >= settings.question[questionType].minNumOfPremises;\r\n    if (settings.question[questionType].basic || questionType === EnumQuestionType.GraphMatching) {\r\n        return enoughPremises;\r\n    }\r\n    return enoughPremises && getNumOfEnabledQuestions(settings, true) >= 2;\r\n}\r\n\r\nexport function areSettingsInvalid(settings: Settings) {\r\n    const numOfEnabledBasicQuestions = getNumOfEnabledQuestions(settings, true);\r\n    const numOfEnabledQuestions = numOfEnabledBasicQuestions + getNumOfEnabledQuestions(settings, false);\r\n    const numOfEnabledOperators = getNumOfEnabledOperators(settings);\r\n    const isAnalogyEnabled = settings.question[EnumQuestionType.Analogy].enabled;\r\n    const isBinaryEnabled = settings.question[EnumQuestionType.Binary].enabled;\r\n\r\n    if (numOfEnabledQuestions < 1) {\r\n        return \"You need at least one question type\";\r\n    }\r\n    if ((isAnalogyEnabled || isBinaryEnabled) && numOfEnabledBasicQuestions < 2) {\r\n        return \"Analogy/binary type of questions need at least two other basic question types\";\r\n    }\r\n    if (isBinaryEnabled && numOfEnabledOperators < 2) {\r\n        return \"Binary needs at least two operators\"\r\n    }\r\n\r\n    return null;\r\n}\r\n\r\nexport interface IQuestionSettingsParams {\r\n    minNumOfPremises: number;\r\n    maxNumOfPremises: number;\r\n    basic: boolean;\r\n    group?: EnumQuestionGroup;\r\n    enabled: boolean;\r\n    numOfPremises?: number;\r\n}\r\n\r\nexport class QuestionSettings {\r\n    enabled: boolean;\r\n    minNumOfPremises: number; // Min number of premises\r\n    private numOfPremises!: number; // Actual number of premises\r\n    maxNumOfPremises: number; // Max number of premises\r\n    basic: boolean; // Basic questions can be used by other questions (ex. Analogy, Binary, ...)\r\n    group?: EnumQuestionGroup; // Group that this question belongs to (ex. Direction, ...)\r\n\r\n    constructor(params: IQuestionSettingsParams) {\r\n        this.minNumOfPremises = params.minNumOfPremises;\r\n        this.maxNumOfPremises = params.maxNumOfPremises;\r\n        this.basic = params.basic;\r\n        this.group = params.group;\r\n\r\n        // Some props are immutable because they are user for validation\r\n        this.freezeProp(\"minNumOfPremises\");\r\n        this.freezeProp(\"maxNumOfPremises\");\r\n        this.freezeProp(\"basic\");\r\n        this.freezeProp(\"group\");\r\n        \r\n        this.enabled = params.enabled;\r\n        this.setNumOfPremises(params.numOfPremises || params.minNumOfPremises);\r\n    }\r\n    \r\n    freezeProp(prop: string) {\r\n        Object.defineProperty(this, prop, { configurable: false, writable: false });\r\n    }\r\n\r\n    setNumOfPremises(numOfPremises: number) {\r\n        this.numOfPremises = this.clampNumOfPremises(numOfPremises);\r\n    }\r\n\r\n    getNumOfPremises() {\r\n        return this.numOfPremises;\r\n    }\r\n\r\n    clampNumOfPremises(numOfPremises: number) {\r\n        return Math.max(this.minNumOfPremises, Math.min(this.maxNumOfPremises, numOfPremises))\r\n    }\r\n}\r\n\r\nexport class Settings {\r\n    question!: Record<EnumQuestionType, QuestionSettings>;\r\n    enabled: typeof DEFAULT_ENABLED_FLAGS;\r\n\r\n    private configSettings?: Settings;\r\n\r\n    constructor(settings?: Settings) {\r\n        this.configSettings = settings;\r\n        this.enabled = settings?.enabled || jsonCopy(DEFAULT_ENABLED_FLAGS);\r\n        this.initQuestionSettings(EnumQuestionType.Distinction);\r\n        this.initQuestionSettings(EnumQuestionType.ComparisonNumerical);\r\n        this.initQuestionSettings(EnumQuestionType.ComparisonChronological);\r\n        this.initQuestionSettings(EnumQuestionType.Syllogism);\r\n        this.initQuestionSettings(EnumQuestionType.LinearArrangement);\r\n        this.initQuestionSettings(EnumQuestionType.CircularArrangement);\r\n        this.initQuestionSettings(EnumQuestionType.Direction);\r\n        this.initQuestionSettings(EnumQuestionType.Direction3DSpatial);\r\n        this.initQuestionSettings(EnumQuestionType.Direction3DTemporal);\r\n        this.initQuestionSettings(EnumQuestionType.GraphMatching);\r\n        this.initQuestionSettings(EnumQuestionType.Analogy);\r\n        this.initQuestionSettings(EnumQuestionType.Binary);\r\n    }\r\n\r\n    initQuestionSettings(type: EnumQuestionType) {\r\n        if (!this.question) {\r\n            this.question = {} as any;\r\n        }\r\n        this.question[type] = new QuestionSettings(\r\n            // @ts-ignore\r\n            this.configSettings?.question[type] || QUESTION_TYPE_SETTING_PARAMS[type]\r\n        );\r\n    }\r\n\r\n    setEnable(prop: \"meaningfulWords\"|\"meta\"|\"negation\", value: boolean) {\r\n        this.enabled[prop] = value;\r\n        return this;\r\n    }\r\n\r\n    setQuestionSettings(type: EnumQuestionType, enabled: boolean, numOfPremises: number) {\r\n        this.question[type].enabled = enabled;\r\n        this.question[type].setNumOfPremises(numOfPremises);\r\n        return this;\r\n    }\r\n}\r\n","import { EnumQuestionType } from \"../constants/question.constants\";\r\n\r\nexport class TypeBasedStats {\r\n    [EnumQuestionType.Syllogism] = new TypeBasedStatsInner(EnumQuestionType.Syllogism);\r\n    [EnumQuestionType.Distinction] = new TypeBasedStatsInner(EnumQuestionType.Distinction);\r\n    [EnumQuestionType.ComparisonNumerical] = new TypeBasedStatsInner(EnumQuestionType.ComparisonNumerical);\r\n    [EnumQuestionType.ComparisonChronological] = new TypeBasedStatsInner(EnumQuestionType.ComparisonChronological);\r\n    [EnumQuestionType.LinearArrangement] = new TypeBasedStatsInner(EnumQuestionType.LinearArrangement);\r\n    [EnumQuestionType.CircularArrangement] = new TypeBasedStatsInner(EnumQuestionType.CircularArrangement);\r\n    [EnumQuestionType.Direction] = new TypeBasedStatsInner(EnumQuestionType.Direction);\r\n    [EnumQuestionType.Direction3DSpatial] = new TypeBasedStatsInner(EnumQuestionType.Direction3DSpatial);\r\n    [EnumQuestionType.Direction3DTemporal] = new TypeBasedStatsInner(EnumQuestionType.Direction3DTemporal);\r\n    [EnumQuestionType.GraphMatching] = new TypeBasedStatsInner(EnumQuestionType.GraphMatching);\r\n    [EnumQuestionType.Analogy] = new TypeBasedStatsInner(EnumQuestionType.Analogy);\r\n    [EnumQuestionType.Binary] = new TypeBasedStatsInner(EnumQuestionType.Binary);\r\n}\r\n\r\nexport class TypeBasedStatsInner {\r\n    type: EnumQuestionType;\r\n    completed = 0;\r\n    accuracy = 0;\r\n    stats = {\r\n        \"2\": new TypeBasedStatsInner2(),\r\n        \"3\": new TypeBasedStatsInner2(),\r\n        \"4\": new TypeBasedStatsInner2(),\r\n        \"5\": new TypeBasedStatsInner2(),\r\n        \"6+\": new TypeBasedStatsInner2(),\r\n    };\r\n    \r\n    constructor(type: EnumQuestionType) {\r\n        this.type = type;\r\n    }\r\n}\r\n\r\nexport class TypeBasedStatsInner2 {\r\n    sum = 0;\r\n    count = 0;\r\n    fastest = 0;\r\n    slowest = 0;\r\n    correct = 0;\r\n    incorrect = 0;\r\n    timeout = 0;\r\n    last10Sum = 0;\r\n    last10Count = 0;\r\n    last10Fastest = 0;\r\n    last10Slowest = 0;\r\n    last10Correct = 0;\r\n    last10Incorrect = 0;\r\n    last10Timeout = 0;\r\n}","import { Component } from '@angular/core';\r\nimport { SyllogimousService } from '../../services/syllogimous.service';\r\nimport { Router } from '@angular/router';\r\nimport { EnumScreens } from '../../constants/syllogimous.constants';\r\n\r\n@Component({\r\n    selector: 'app-feedback',\r\n    templateUrl: './feedback.component.html',\r\n    styleUrls: ['./feedback.component.css']\r\n})\r\nexport class FeedbackComponent {\r\n    EnumScreens = EnumScreens;\r\n\r\n    constructor(\r\n        public sylSrv: SyllogimousService,\r\n        public router: Router\r\n    ) { }\r\n}\r\n","<app-card>\r\n    <div body>\r\n        <app-progress-and-performance\r\n            [feedbackPage]=\"true\"\r\n            [playgroundMode]=\"sylSrv.settings === sylSrv.playgroundSettings\"\r\n        ></app-progress-and-performance>\r\n\r\n        <div\r\n            *ngIf=\"{\r\n                timeout: sylSrv.question.userAnswer === undefined,\r\n                validity: sylSrv.question.userAnswer === sylSrv.question.isValid\r\n            } as d\"\r\n            class=\"feedback-wrap\"\r\n            [class.feedback-timeout]=\"d.timeout\"\r\n            [class.feedback-correct]=\"!d.timeout && d.validity\"\r\n            [class.feedback-incorrect]=\"!d.timeout && !d.validity\"\r\n        >\r\n            <div class=\"fs-1 fw-bold text-uppercase\">\r\n                {{ d.timeout ? \"Timeout\" : d.validity ? \"Correct\": \"Incorrect\" }}\r\n            </div>\r\n        </div>\r\n    </div>\r\n\r\n    <div footer class=\"playcard-toolbar\">\r\n        <div>\r\n            <button\r\n                class=\"btn btn-outline-primary\"\r\n                (click)=\"router.navigate([EnumScreens.Start]);\"\r\n            >\r\n                <i class=\"bi bi-arrow-left\"></i> Start\r\n            </button>\r\n        </div>\r\n        <div>\r\n            <button class=\"btn btn-primary\" (click)=\"sylSrv.play()\">\r\n                Play <i class=\"bi bi-play-fill\"></i>\r\n            </button>\r\n        </div>\r\n    </div>\r\n</app-card>","import { Component } from '@angular/core';\r\nimport { SyllogimousService } from '../../services/syllogimous.service';\r\nimport { StatsService } from '../../services/stats.service';\r\nimport { LS_GAME_MODE, LS_TIMER } from '../../constants/local-storage.constants';\r\nimport { LS_CUSTOM_TIMERS_KEY } from '../settings/modal-timer-settings/modal-timer-settings.component';\r\nimport { Router } from '@angular/router';\r\nimport { EnumScreens } from '../../constants/syllogimous.constants';\r\nimport { GameTimerService } from '../../services/game-timer.service';\r\n\r\n@Component({\r\n    selector: 'app-game',\r\n    templateUrl: './game.component.html',\r\n    styleUrls: ['./game.component.css']\r\n})\r\nexport class GameComponent {\r\n    Array = Array;\r\n    \r\n    timerType;\r\n    gameMode;\r\n    timerTimeSeconds = 0;\r\n    trueButtonToTheRight = false;\r\n\r\n    constructor(\r\n        public sylSrv: SyllogimousService,\r\n        public gameTimerService: GameTimerService,\r\n        private statsService: StatsService,\r\n        private router: Router,\r\n    ) {\r\n        this.timerType = localStorage.getItem(LS_TIMER) || '0';\r\n        this.gameMode = localStorage.getItem(LS_GAME_MODE) || '0';\r\n        this.trueButtonToTheRight = Math.random() > 0.5;\r\n\r\n        if (this.sylSrv.question.conclusion === \"!\") {\r\n            this.router.navigate([EnumScreens.Start]);\r\n        }\r\n    }\r\n\r\n    ngOnInit() {\r\n        switch(this.timerType) {\r\n            case '1': {\r\n                console.log(\"Custom timer\");\r\n\r\n                const customTimers = JSON.parse(localStorage.getItem(LS_CUSTOM_TIMERS_KEY) || \"{}\");\r\n                this.timerTimeSeconds = customTimers[this.sylSrv.question.type] || 90;\r\n                this.kickTimer();\r\n                \r\n                break;\r\n            }\r\n            case '2': {\r\n                console.log(\"Adaptive timer\");\r\n\r\n                const correctRate = 0.5;\r\n                const incorrectRate = 1;\r\n                const timeoutRate = 1.5;\r\n                const newLevelBonus = 15;\r\n                const negationBonus = 3;\r\n                const metaRelationBonus = 4;\r\n                this.timerTimeSeconds = 90;\r\n\r\n                const questionType = this.sylSrv.question.type;\r\n                const questionPremises = this.sylSrv.question.premises.length;\r\n                const { typeBasedStats } = this.statsService.calcStats(this.timerType);\r\n                const tbs = typeBasedStats[questionType];\r\n\r\n                if (tbs?.stats) {\r\n                    const prevStats = (tbs.stats as any)[questionPremises - 1];\r\n                    const currStats = (tbs.stats as any)[questionPremises];\r\n\r\n                    let avgTimeToRespond = this.timerTimeSeconds;\r\n                    if (currStats && currStats.count > 2) {\r\n                        avgTimeToRespond = (currStats.last10Sum / 1000) / (currStats.last10Count || 1);\r\n                        avgTimeToRespond -= correctRate * currStats.last10Correct;\r\n                        avgTimeToRespond += incorrectRate * currStats.last10Incorrect;\r\n                        avgTimeToRespond += timeoutRate * currStats.last10Timeout;\r\n                    } else if (prevStats && prevStats.count > 2) {\r\n                        avgTimeToRespond = (prevStats.last10Sum / 1000) / (prevStats.last10Count || 1);\r\n                        avgTimeToRespond -= correctRate * prevStats.last10Correct;\r\n                        avgTimeToRespond += incorrectRate * prevStats.last10Incorrect;\r\n                        avgTimeToRespond += timeoutRate * prevStats.last10Timeout;\r\n                        avgTimeToRespond += newLevelBonus; // Bonus for the new level\r\n                    }\r\n\r\n                    avgTimeToRespond += negationBonus * this.sylSrv.question.negations;\r\n                    avgTimeToRespond += metaRelationBonus * this.sylSrv.question.metaRelations;\r\n\r\n                    this.timerTimeSeconds = Math.floor(Math.max(0, avgTimeToRespond));\r\n                }\r\n\r\n                this.kickTimer();\r\n                \r\n                break;\r\n            }\r\n            default: {\r\n                console.log(\"No timer\");\r\n            }\r\n        }\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this.gameTimerService.stop();\r\n    }\r\n\r\n    kickTimer = async () => {\r\n        await this.gameTimerService.start(this.timerTimeSeconds);\r\n        this.sylSrv.checkQuestion();\r\n    }\r\n}\r\n","<ng-template #questionInstructionsAndNotes>\r\n    <ng-container *ngIf=\"{ instructions: sylSrv.question.instructions, notes: sylSrv.question.notes } as info\">\r\n        <div *ngIf=\"info.instructions?.length || info.notes?.length\">\r\n            <div *ngIf=\"info.instructions?.length\">\r\n                <div class=\"small text-muted\">Instructions</div>\r\n                <div class=\"instructions\">\r\n                    <div *ngFor=\"let instruction of info.instructions\" [innerHTML]=\"instruction\"></div>\r\n                </div>\r\n            </div>\r\n    \r\n            <div *ngIf=\"info.notes?.length\" class=\"notes\">\r\n                <div *ngFor=\"let note of info.notes\" [innerHTML]=\"note\"></div>\r\n            </div>\r\n        </div>\r\n    </ng-container>\r\n</ng-template>\r\n\r\n<app-card>\r\n    <div body class=\"battlefield\" [ngStyle]=\"{ width: (gameMode === '1') ? '100%' : 'auto' }\">\r\n        <div class=\"timerbar-wrap\">\r\n            <ngb-progressbar *ngIf=\"timerType !== '0'\" class=\"timerbar\" type=\"success\" [value]=\"100 * gameTimerService.remainingSeconds / timerTimeSeconds\">\r\n                <span class=\"me-2\">{{gameTimerService.remainingSeconds}} s</span>\r\n            </ngb-progressbar>\r\n        </div>\r\n\r\n        <div [class.d-none]=\"gameMode !== '1'\">\r\n            <ngb-carousel\r\n                #carousel\r\n                [interval]=\"999999999\"\r\n                [showNavigationArrows]=\"false\"\r\n                [showNavigationIndicators]=\"false\"\r\n                style=\"border: 0; box-shadow: none;\"\r\n            >\r\n                <ng-template ngbSlide *ngIf=\"sylSrv.question.instructions?.length || sylSrv.question.notes?.length\">\r\n                    <div style=\"display: grid; place-items: center;\">\r\n                        <ng-container *ngTemplateOutlet=\"questionInstructionsAndNotes\"></ng-container>\r\n                    </div>\r\n                </ng-template>\r\n\r\n                <ng-template ngbSlide *ngFor=\"let p of sylSrv.question.premises; let i = index; let last = last;\">\r\n                    <div style=\"display: grid; place-items: center;\">\r\n                        <div>\r\n                            <small class=\"text-muted\">{{last ? \"Last premise\" : \"Premise \" + (i + 1)}}</small>\r\n                            <div [innerHTML]=\"p\"></div>\r\n                        </div>\r\n                    </div>\r\n                </ng-template>\r\n\r\n                <ng-container *ngIf=\"Array.isArray(sylSrv.question.conclusion); else conclusionsIsStringCarouselTemplate\">\r\n                    <ng-template ngbSlide *ngFor=\"let c of sylSrv.question.conclusion; let i = index; let last = last;\">\r\n                        <div style=\"display: grid; place-items: center;\">\r\n                            <div>\r\n                                <small class=\"text-muted\">{{last ? \"Last conclusion\" : \"Conclusion \" + (i + 1)}}</small>\r\n                                <div [innerHTML]=\"c\"></div>\r\n                            </div>\r\n                        </div>\r\n                    </ng-template>\r\n                </ng-container>\r\n                <ng-template #conclusionsIsStringCarouselTemplate>\r\n                    <ng-template ngbSlide>\r\n                        <div style=\"display: grid; place-items: center;\">\r\n                            <div>\r\n                                <small class=\"text-muted\">Conclusion</small>\r\n                                <div [innerHTML]=\"sylSrv.question.conclusion\"></div>\r\n                            </div>\r\n                        </div>\r\n                    </ng-template>\r\n                </ng-template>\r\n            </ngb-carousel>\r\n    \r\n            <div class=\"flex-between p-3\" style=\"position: absolute; left: 0; bottom: 0; width: 100%;\">\r\n                <button class=\"btn border-0\" style=\"box-shadow: none;\" (click)=\"carousel.prev()\"><i class=\"bi bi-arrow-left\"></i> Prev</button>\r\n                <button class=\"btn border-0\" style=\"box-shadow: none;\" (click)=\"carousel.next()\">Next <i class=\"bi bi-arrow-right\"></i></button>\r\n            </div>\r\n        </div>\r\n        \r\n        <div class=\"d-grid gap-4\" [class.d-none]=\"gameMode === '1'\">\r\n            <ng-container *ngTemplateOutlet=\"questionInstructionsAndNotes\"></ng-container>\r\n\r\n            <div>\r\n                <div class=\"small text-muted\">Premises</div>\r\n                <div class=\"premises\" *ngIf=\"sylSrv.question.premises as premises\">\r\n                    <div *ngFor=\"let p of premises\" [innerHTML]=\"p\"></div>\r\n                </div>\r\n            </div>\r\n\r\n            <div *ngIf=\"Array.isArray(sylSrv.question.conclusion); else conclusionIsStringTemplate\">\r\n                <div class=\"small text-muted\">Conclusion</div>\r\n                <div class=\"conclusions\" *ngIf=\"sylSrv.question.conclusion as conclusions\">\r\n                    <div *ngFor=\"let c of conclusions\" [innerHTML]=\"c\"></div>\r\n                </div>\r\n            </div>\r\n            <ng-template #conclusionIsStringTemplate>\r\n                <div>\r\n                    <div class=\"small text-muted\">Conclusion</div>\r\n                    <div [innerHTML]=\"sylSrv.question.conclusion\"></div>\r\n                </div>\r\n            </ng-template>\r\n        </div>\r\n    </div>\r\n\r\n    <div footer class=\"d-flex gap-3 justify-content-center\">\r\n        <button *ngIf=\"!trueButtonToTheRight\" class=\"btn btn-lg btn-success col-md-3 col-4\" (click)=\"sylSrv.checkQuestion(true)\">True</button>\r\n        <button class=\"btn btn-lg btn-danger col-md-3 col-4\" (click)=\"sylSrv.checkQuestion(false)\">False</button>\r\n        <button *ngIf=\"trueButtonToTheRight\" class=\"btn btn-lg btn-success col-md-3 col-4\" (click)=\"sylSrv.checkQuestion(true)\">True</button>\r\n    </div>\r\n</app-card>","import { Component } from '@angular/core';\r\nimport { SyllogimousService } from '../../services/syllogimous.service';\r\nimport { Question } from '../../models/question.models';\r\nimport { Router } from '@angular/router';\r\nimport { EnumScreens } from '../../constants/syllogimous.constants';\r\nimport { ToastService } from 'src/app/services/toast.service';\r\n\r\n@Component({\r\n    selector: 'app-history',\r\n    templateUrl: './history.component.html',\r\n    styleUrls: ['./history.component.css']\r\n})\r\nexport class HistoryComponent {\r\n    Array = Array;\r\n    EnumScreens = EnumScreens;\r\n\r\n    allQuestions: Question[] = [];\r\n    questions: Question[] = [];\r\n    sliceIdx = -25;\r\n    \r\n    constructor(\r\n        public sylSrv: SyllogimousService,\r\n        public router: Router,\r\n        private toaster: ToastService\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n        this.allQuestions = this.sylSrv.questions;\r\n        this.loadMoreQuestions();\r\n    }\r\n\r\n    loadMoreQuestions() {\r\n        this.sliceIdx += 25;\r\n        this.questions.push(...this.allQuestions.slice(this.sliceIdx, this.sliceIdx+25));\r\n    }\r\n\r\n    copyQuestion(q: Question) {\r\n        const el = document.createElement(\"TEXTAREA\") as HTMLTextAreaElement;\r\n        document.body.appendChild(el);\r\n        el.value = JSON.stringify(q, null, 2);\r\n        el.focus();\r\n        el.select();\r\n        document.execCommand(\"copy\");\r\n        this.toaster.show(\"Question raw JSON data copied into your clipboard!\", { classname: \"bg-success text-light\" });\r\n        document.body.removeChild(el);\r\n    }\r\n}\r\n","<app-card>\r\n    <div body class=\"p-3\">\r\n        <div class=\"text-center\" *ngIf=\"!questions.length\">\r\n            <h3 class=\"mb-3\">Play to see something here</h3>\r\n            <button class=\"btn btn-lg btn-primary\" (click)=\"sylSrv.playArcadeMode()\">\r\n                Play <i class=\"bi bi-play-fill\"></i>\r\n            </button>\r\n        </div>\r\n\r\n        <div class=\"d-grid py-3\" style=\"gap: 2rem;\">\r\n            <div\r\n                class=\"card mx-md-3\"\r\n                *ngFor=\"let q of questions\"\r\n                [class.timeout]=\"q.userAnswer === undefined\"\r\n                [class.correct]=\"q.userAnswer !== undefined && q.userAnswer === q.isValid\"\r\n                [class.incorrect]=\"q.userAnswer !== undefined && q.userAnswer !== q.isValid\"\r\n            >\r\n                <div class=\"mode-title\">{{q.playgroundMode ? \"Playground Mode\" : \"Arcade Mode\"}}</div>\r\n\r\n                <button class=\"copy-paste\" (click)=\"copyQuestion(q)\" ngbTooltip=\"Click here to copy the question raw JSON data\">C</button>\r\n\r\n                <div class=\"question-text\">\r\n                    <div *ngIf=\"q.instructions?.length || q.notes?.length\">\r\n                        <div *ngIf=\"q.instructions?.length\">\r\n                            <div class=\"small text-muted\">Instructions</div>\r\n                            <div class=\"instructions\">\r\n                                <div *ngFor=\"let instruction of q.instructions\" [innerHTML]=\"instruction\"></div>\r\n                            </div>\r\n                        </div>\r\n                \r\n                        <div *ngIf=\"q.notes?.length\" class=\"notes\">\r\n                            <div *ngFor=\"let note of q.notes\" [innerHTML]=\"note\"></div>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div>\r\n                        <div class=\"small text-muted mb-1\">Premises</div>\r\n                        <div class=\"premises\">\r\n                            <div *ngFor=\"let p of q.premises\" [innerHTML]=\"p\"></div>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div *ngIf=\"Array.isArray(q.conclusion); else conclusionIsStringTemplate\">\r\n                        <div class=\"small text-muted mb-1\">Conclusion</div>\r\n                        <div class=\"conclusions\">\r\n                            <div *ngFor=\"let c of q.conclusion\" [innerHTML]=\"c\"></div>\r\n                        </div>\r\n                    </div>\r\n                    <ng-template #conclusionIsStringTemplate>\r\n                        <div>\r\n                            <div class=\"small text-muted mb-1\">Conclusion</div>\r\n                            <div [innerHTML]=\"q.conclusion\"></div>\r\n                        </div>\r\n                    </ng-template>\r\n                </div>\r\n    \r\n                <small class=\"d-grid\" style=\"grid-template-columns: repeat(4, 1fr);\">\r\n                    <div class=\"bd-left\">\r\n                        <div class=\"fw-bold\">Type</div>\r\n                        {{ q.type }}\r\n                    </div>\r\n    \r\n                    <div class=\"bd-left\">\r\n                        <div class=\"fw-bold\">Correct Answer</div>\r\n                        {{ q.isValid }}\r\n                    </div>\r\n    \r\n                    <div class=\"bd-left\">\r\n                        <div class=\"fw-bold\">User Answer</div>\r\n                        {{ (q.userAnswer === undefined) ? \"Timeout\" : q.userAnswer }}\r\n                    </div>\r\n    \r\n                    <div class=\"bd-left\">\r\n                        <div class=\"fw-bold\">Time</div>\r\n                        {{ (q.userAnswer === undefined) ? \"Timeout\" : (((q.answeredAt - q.createdAt) / 1000) | number:\".1-1\") + \"s\" }}\r\n                    </div>\r\n                </small>\r\n            </div>\r\n\r\n            <div *ngIf=\"questions.length && questions.length !== allQuestions.length\" class=\"d-flex justify-content-center\">\r\n                <button class=\"btn btn-primary\" (click)=\"loadMoreQuestions()\">Load More</button>\r\n            </div>\r\n        </div>\r\n    </div>\r\n\r\n    <div footer class=\"playcard-toolbar\">\r\n        <div>\r\n            <button\r\n                class=\"btn btn-outline-primary\"\r\n                (click)=\"router.navigate([EnumScreens.Start]);\"\r\n            >\r\n                <i class=\"bi bi-arrow-left\"></i> Start\r\n            </button>\r\n        </div>\r\n        <div>{{ questions.length }} / {{ allQuestions.length }}</div>\r\n    </div>\r\n</app-card>","import { Component } from '@angular/core';\r\nimport { SyllogimousService } from '../../services/syllogimous.service';\r\n\r\n@Component({\r\n    selector: 'app-intro',\r\n    templateUrl: './intro.component.html',\r\n    styleUrls: ['./intro.component.css']\r\n})\r\nexport class IntroComponent {\r\n    constructor(\r\n        public sylSrv: SyllogimousService\r\n    ) { }\r\n}\r\n","<app-card>\r\n    <div body class=\"py-3 px-md-3\">\r\n        <h1>Welcome to Syllogimous!</h1>\r\n        <p>Syllogimous v4 takes classic logic challenges and turns them into a brain workout. This latest version introduces new features designed to enhance your brain training experience.</p>\r\n        <p>Syllogimous is based on <a href=\"https://en.wikipedia.org/wiki/Relational_frame_theory\" target=\"_blank\">Relational Frame Theory (RFT)</a>, a psychological theory that suggests that the fundamental process of human thought involves forming relationships between concepts. Studies indicate that training in relational skills can significantly enhance cognitive functions.</p>\r\n        <p>Therefore, by playing Syllogimous, you're boosting your problem-solving skills, hopefully while having fun.</p>\r\n\r\n        <h2>Useful Links</h2>\r\n        <div class=\"d-grid justify-content-start gap-1\">\r\n            <a href=\"https://groups.google.com/g/brain-training\" target=\"_blank\">Brain Training Google Groups</a>\r\n            <a href=\"https://t.me/brain_training\" target=\"_blank\">Brain Training Telegram</a>\r\n        </div>\r\n    </div>\r\n    \r\n    <div footer class=\"playcard-toolbar\">\r\n        <div>\r\n            <div class=\"form-check\">\r\n                <input #dontShowAnymore class=\"form-check-input\" type=\"checkbox\" value=\"\" id=\"dontShowAnymore\">\r\n                <label class=\"form-check-label\" for=\"dontShowAnymore\">\r\n                    Don't show anymore\r\n                </label>\r\n            </div>\r\n        </div>\r\n        <div>\r\n            <button\r\n                class=\"btn btn-outline-primary\"\r\n                (click)=\"sylSrv.skipIntro(dontShowAnymore.checked)\"\r\n            >Skip Intro</button>\r\n        </div>\r\n    </div>\r\n</app-card>\r\n","import { Component } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { EnumScreens } from '../../constants/syllogimous.constants';\r\n\r\n@Component({\r\n  selector: 'app-other-games',\r\n  templateUrl: './other-games.component.html',\r\n  styleUrls: ['./other-games.component.css']\r\n})\r\nexport class OtherGamesComponent {\r\n  EnumScreens = EnumScreens;\r\n\r\n  constructor(public router: Router) {}\r\n\r\n}\r\n","<app-card>\r\n    <div body class=\"py-3 px-md-3\">\r\n        <p>Feel free to explore a collection of games I've created over the years. Take a moment to check them out and challenge your mind!</p>\r\n        <p>I'd love to hear your ideas and opinions, so don't hesitate to share them, you can find me on Telegram <i>@FredoCorleone</i>.</p>\r\n        <p>Wishing you a great life and happy brain training!</p>\r\n        \r\n        <div class=\"d-grid gap-3\">\r\n            <div>\r\n                <div class=\"section-minititle\">N-back Games</div>\r\n                <div class=\"d-grid justify-content-start\">\r\n                    <a href=\"https://4skinskywalker.github.io/3D-Hyper-N-back/\" target=\"_blank\">3D Hyper N-back</a>\r\n                    <a href=\"https://4skinskywalker.github.io/3D-Dual-N-back-Cubeception/\" target=\"_blank\">3D Dual N-back (Cubeception)</a>\r\n                    <a href=\"https://4skinskywalker.github.io/3D-Dual-N-back-Cube-in-the-Middle/\" target=\"_blank\">3D Dual N-back (Cube in the Middle)</a>\r\n                </div>\r\n            </div>\r\n    \r\n            <div>\r\n                <div class=\"section-minititle\">Mental Rotation Games</div>\r\n                <div class=\"d-grid justify-content-start\">\r\n                    <a href=\"https://4skinskywalker.github.io/3d-rotation/\" target=\"_blank\">3D Rotation</a>\r\n                    <a href=\"https://4skinskywalker.github.io/Mental-Rotation-Training/\" target=\"_blank\">Box Mental Rotation</a>\r\n                </div>\r\n            </div>\r\n\r\n            <div>\r\n                <div class=\"section-minititle\">Miscellaneous Games</div>\r\n                <div class=\"d-grid justify-content-start\">\r\n                    <a href=\"https://4skinskywalker.github.io/logi-number/\" target=\"_blank\">Logi Number</a>\r\n                    <a href=\"https://4skinskywalker.github.io/Word-Memorization-Training/\" target=\"_blank\">Word Memorization Training</a>\r\n                    <!--<a href=\"https://4skinskywalker.github.io/aptitude-tests/\" target=\"_blank\">Aptitude Tests</a>-->\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n\r\n    <div footer class=\"playcard-toolbar\">\r\n        <div>\r\n            <button\r\n                class=\"btn btn-outline-primary\"\r\n                (click)=\"router.navigate([EnumScreens.Start])\"\r\n            >\r\n                <i class=\"bi bi-arrow-left\"></i> Start\r\n            </button>\r\n        </div>\r\n    </div>\r\n</app-card>\r\n","import { Component } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { NgbModal } from '@ng-bootstrap/ng-bootstrap';\r\nimport { IDynamicField } from 'src/app/shared/components/dynamic-form/dynamic-form.component';\r\nimport { areSettingsInvalid, QuestionSettings, Settings } from 'src/app/syllogimous/models/settings.models';\r\nimport { SyllogimousService } from 'src/app/syllogimous/services/syllogimous.service';\r\nimport { EnumScreens } from '../../constants/syllogimous.constants';\r\nimport { EnumQuestionType } from '../../constants/question.constants';\r\nimport { LS_PG_SETTINGS } from '../../constants/local-storage.constants';\r\n\r\nfunction capitalize(val: string) {\r\n    return val[0].toUpperCase() + val.slice(1);\r\n}\r\n\r\nfunction decomposeCamelCase(val: string) {\r\n    const splitted = val.split(/(?=[A-Z][a-z])/);\r\n    return splitted.map(x => capitalize(x)).join(\" \");\r\n}\r\n\r\n@Component({\r\n    selector: 'app-playground-Mode',\r\n    templateUrl: './playground-mode.component.html',\r\n    styleUrls: ['./playground-mode.component.css']\r\n})\r\nexport class PlaygroundModeComponent {\r\n    EnumScreens = EnumScreens;\r\n    fields: IDynamicField[] = [];\r\n    formData: any = {};\r\n    validationError: string | null = null;\r\n\r\n    genericEnables: [string, boolean][];\r\n    binaryEnables: [string, boolean][];\r\n    questionControls: [string, QuestionSettings][];\r\n\r\n    constructor(\r\n        public router: Router,\r\n        private modalService: NgbModal,\r\n        private sylSrv: SyllogimousService,\r\n    ) {\r\n        const settings = this.loadPlaygroundSettings() || new Settings();\r\n\r\n        this.genericEnables = Object.entries(settings.enabled).filter(([field]) => field !== \"binary\") as [string, boolean][];\r\n        this.binaryEnables = Object.entries(settings.enabled.binary);\r\n        this.questionControls = Object.entries(settings.question);\r\n\r\n        // Create generic boolean controls\r\n        for (const [field, value] of this.genericEnables) {\r\n            this.fields.push({\r\n                type: \"checkbox\",\r\n                label: decomposeCamelCase(field),\r\n                field,\r\n                value,\r\n            });\r\n        }\r\n\r\n        // Create controls for questions (enable checkbox and num of premises slider)\r\n        let isFirst = true;\r\n        for (const [qt, qs] of this.questionControls) {\r\n            const filler = isFirst ? '<div class=\"pt-3\"></div>' : \"<div></div>\";\r\n            isFirst = false;\r\n            this.fields.push(\r\n                {\r\n                    filler,\r\n                    field: \"\",\r\n                    label: \"\"\r\n                },\r\n                {\r\n                    field: qt,\r\n                    label: decomposeCamelCase(qt), // ${qs.basic ? \"(Basic)\" : \"\"}\r\n                    type: \"checkbox\",\r\n                    value: qs.enabled,\r\n                },\r\n                {\r\n                    field: qt + \"premises\",\r\n                    label: \"Number of Premises\",\r\n                    type: \"range\",\r\n                    value: qs.getNumOfPremises(),\r\n                    min: qs.minNumOfPremises,\r\n                    max: qs.maxNumOfPremises,\r\n                    step: 1\r\n                }\r\n            );\r\n        }\r\n\r\n        // Create binary boolean controls\r\n        for (const [field, value] of this.binaryEnables) {\r\n            this.fields.push({\r\n                type: \"checkbox\",\r\n                label: decomposeCamelCase(field),\r\n                field,\r\n                value,\r\n            });\r\n        }\r\n    }\r\n\r\n    async play(content: any) {\r\n        const settings = new Settings();\r\n\r\n        // Set generic boolean values\r\n        for (const [field, value] of this.genericEnables) {\r\n            (settings.enabled as any)[field] = this.formData[field];\r\n        }\r\n\r\n        // Set binary boolean values\r\n        for (const [field, value] of this.binaryEnables) {\r\n            (settings.enabled.binary as any)[field] = this.formData[field];\r\n        }\r\n\r\n        // Set question enables and num of premises\r\n        for (const [qt, qs] of this.questionControls) {\r\n            const _qt = qt as EnumQuestionType;\r\n            settings.question[_qt].enabled = this.formData[_qt];\r\n            settings.question[_qt].setNumOfPremises(this.formData[_qt + \"premises\"]);\r\n        }\r\n\r\n        // Check configuration\r\n        this.validationError = areSettingsInvalid(settings);\r\n        if (this.validationError) {\r\n            await this.modalService.open(content, { centered: true }).result;\r\n            return;\r\n        }\r\n\r\n        this.sylSrv.playgroundSettings = settings;\r\n        console.log(\"Playground settings\", settings);\r\n        this.savePlaygroundSettings(settings);\r\n\r\n        this.sylSrv.play();\r\n    }\r\n\r\n    loadPlaygroundSettings() {\r\n        const serialized = localStorage.getItem(LS_PG_SETTINGS);\r\n        if (serialized) {\r\n            const deserialized = JSON.parse(serialized) as Settings;\r\n            return new Settings(deserialized);\r\n        }\r\n        return undefined;\r\n    }\r\n\r\n    savePlaygroundSettings(settings: Settings) {\r\n        localStorage.setItem(LS_PG_SETTINGS, JSON.stringify(settings));\r\n    }\r\n}\r\n","<ng-template #content let-modal>\r\n    <div class=\"modal-header\">\r\n        <h4 class=\"modal-title\" id=\"modal-basic-title\">Error</h4>\r\n        <button class=\"btn-close\" aria-label=\"Close\" (click)=\"modal.dismiss()\"></button>\r\n    </div>\r\n    <div class=\"modal-body\">\r\n        {{ validationError }}\r\n    </div>\r\n    <div class=\"modal-footer\">\r\n        <button class=\"btn btn-danger\" (click)=\"modal.dismiss()\">OK</button>\r\n    </div>\r\n</ng-template>\r\n\r\n<app-card>\r\n    <div body class=\"d-grid py-3 px-md-3\" style=\"gap: 2rem;\">\r\n        <div class=\"text-center lead\">Playground is a freestyle mode where questions are just for practice, they don't count for points or stats.</div>\r\n\r\n        <div class=\"card shadow-sm\">\r\n            <div class=\"card-header py-2 small\">Game mode</div>\r\n            <div class=\"card-body\">\r\n                <app-game-mode-choose></app-game-mode-choose>\r\n            </div>\r\n        </div>\r\n\r\n        <div class=\"card shadow-sm\">\r\n            <div class=\"card-header py-2 small\">Timer mode</div>\r\n            <div class=\"card-body\">\r\n                <app-timer-choose></app-timer-choose>\r\n            </div>\r\n        </div>\r\n\r\n        <div class=\"card shadow-sm\">\r\n            <div class=\"card-header py-2 small\">Questions and premises</div>\r\n            <div class=\"card-body\">\r\n                <app-dynamic-form\r\n                    gap=\"0.5rem\"\r\n                    [fields]=\"fields\"\r\n                    (formValueChanged)=\"formData = $event\"\r\n                    [emitInitial]=\"true\"\r\n                ></app-dynamic-form>\r\n            </div>\r\n        </div>\r\n    </div>\r\n\r\n    <div footer class=\"playcard-toolbar\">\r\n        <div>\r\n            <button\r\n                class=\"btn btn-outline-primary\"\r\n                (click)=\"router.navigate([ EnumScreens.Start ])\"\r\n            >\r\n                <i class=\"bi bi-arrow-left\"></i> Start\r\n            </button>\r\n        </div>\r\n        <div>\r\n            <button\r\n                class=\"btn btn-primary\"\r\n                (click)=\"play(content)\"\r\n            >\r\n                Play <i class=\"bi bi-play-fill\"></i>\r\n            </button>\r\n        </div>\r\n    </div>\r\n</app-card>","import { Component, Input } from '@angular/core';\r\nimport { LS_GAME_MODE } from '../../../constants/local-storage.constants';\r\n\r\n@Component({\r\n    selector: 'app-game-mode-choose',\r\n    templateUrl: './game-mode-choose.component.html',\r\n    styleUrls: ['./game-mode-choose.component.css']\r\n})\r\nexport class GameModeChooseComponent {\r\n    \r\n    constructor() { }\r\n\r\n    ngAfterViewInit() {\r\n        const gameMode = localStorage.getItem(LS_GAME_MODE) || '0';\r\n        (document.querySelector(`#mode-choice-${gameMode}`) as HTMLInputElement).checked = true;\r\n    }\r\n\r\n    async setMode(gameMode: string) {\r\n        localStorage.setItem(LS_GAME_MODE, gameMode);\r\n    }\r\n}\r\n","<div class=\"game-mode-choices\">\r\n    <div class=\"game-mode-choice\">\r\n        <input type=\"radio\" id=\"mode-choice-0\" name=\"mode-kind\" (click)=\"setMode('0')\">\r\n        <label for=\"mode-choice-0\" ngbTooltip=\"View all premises on the screen simultaneously\">View all premises</label>\r\n    </div>\r\n\r\n    <div class=\"game-mode-choice\">\r\n        <input type=\"radio\" id=\"mode-choice-1\" name=\"mode-kind\" (click)=\"setMode('1')\">\r\n        <label for=\"mode-choice-1\" ngbTooltip=\"View one premise at a time in a carousel format\">Carousel</label>\r\n    </div>\r\n</div>","import { Component } from '@angular/core';\r\nimport { NgbActiveModal } from '@ng-bootstrap/ng-bootstrap';\r\nimport { SharedModule } from 'src/app/shared/shared.module';\r\nimport { IDynamicField } from 'src/app/shared/components/dynamic-form/dynamic-form.component';\r\nimport { EnumQuestionType } from 'src/app/syllogimous/constants/question.constants';\r\n\r\nexport const LS_CUSTOM_TIMERS_KEY = \"SYL_CUSTOM_TIMERS\";\r\n\r\n@Component({\r\n    selector: 'app-modal-timer-settings',\r\n    templateUrl: './modal-timer-settings.component.html',\r\n    styleUrls: ['./modal-timer-settings.component.css'],\r\n    imports: [SharedModule],\r\n    standalone: true\r\n})\r\nexport class ModalTimerSettingsComponent {\r\n    fields: IDynamicField[] = [];\r\n    formData: any = {};\r\n\r\n    constructor(\r\n        public activeModal: NgbActiveModal\r\n    ) {\r\n        this.load();\r\n        for (const type of Object.values(EnumQuestionType)) {\r\n            this.fields.push({\r\n                field: type,\r\n                label: type,\r\n                type: \"range\",\r\n                value: this.formData[type] || 90,\r\n                min: 15,\r\n                max: 240,\r\n                step: 5\r\n            });\r\n        }\r\n    }\r\n\r\n    load() {\r\n        this.formData = JSON.parse(localStorage.getItem(LS_CUSTOM_TIMERS_KEY) || \"{}\")\r\n    }\r\n\r\n    save() {\r\n        localStorage.setItem(LS_CUSTOM_TIMERS_KEY, JSON.stringify(this.formData));\r\n        this.activeModal.close(\"Closed\");\r\n    }\r\n}\r\n","<div class=\"modal-body text-center\">\r\n    <h4>Timer Settings</h4>\r\n\r\n    <div class=\"my-4 text-start\" style=\"font-size: 1.15rem;\">\r\n        <div class=\"timers-overflow\">\r\n            <app-dynamic-form [fields]=\"fields\" (formValueChanged)=\"formData = $event\"></app-dynamic-form>\r\n        </div>\r\n    </div>\r\n\r\n    <div class=\"d-flex gap-3 justify-content-center\">\r\n        <button class=\"btn btn-outline-secondary\" style=\"width: 100px;\" (click)=\"activeModal.dismiss()\">Cancel</button>\r\n        <button class=\"btn btn-primary\" style=\"width: 100px;\" (click)=\"save()\">Save</button>\r\n    </div>\r\n</div>","import { Component } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { EnumScreens } from '../../constants/syllogimous.constants';\r\nimport { FormControl } from '@angular/forms';\r\nimport { DEFAULT_DAILY_GOAL, DEFAULT_PREMISES_DOWN_THRESHOLD, DEFAULT_PREMISES_UP_THRESHOLD, DEFAULT_TRAINING_UNIT_LENGTH, DEFAULT_WEEKLY_GOAL, ProgressAndPerformanceService } from '../../services/progress-and-performance.service';\r\nimport { LS_DAILY_GOAL, LS_PREMISES_DOWN_THRESHOLD, LS_PREMISES_UP_THRESHOLD, LS_TRAINING_UNIT_LENGTH, LS_WEEKLY_GOAL } from '../../constants/local-storage.constants';\r\nimport { SyllogimousService } from '../../services/syllogimous.service';\r\n\r\n@Component({\r\n    selector: 'app-settings',\r\n    templateUrl: './settings.component.html',\r\n    styleUrls: ['./settings.component.css']\r\n})\r\nexport class SettingsComponent {\r\n    Math = Math;\r\n    EnumScreens = EnumScreens;\r\n\r\n    dailyProgressMinutes = new FormControl(DEFAULT_DAILY_GOAL);\r\n    weeklyProgressMinutes = new FormControl(DEFAULT_WEEKLY_GOAL);\r\n\r\n    trainingUnitLength = new FormControl(DEFAULT_TRAINING_UNIT_LENGTH);\r\n    premisesUpThreshold = new FormControl(DEFAULT_PREMISES_UP_THRESHOLD);\r\n    premisesDownThreshold = new FormControl(DEFAULT_PREMISES_DOWN_THRESHOLD);\r\n\r\n    constructor(\r\n        public router: Router,\r\n        public sylSrv: SyllogimousService,\r\n        private progressAndPerformanceService: ProgressAndPerformanceService\r\n    ) {\r\n        // Playtime stuff     \r\n        const daily = localStorage.getItem(LS_DAILY_GOAL);\r\n        this.dailyProgressMinutes.setValue(Number(daily) || DEFAULT_DAILY_GOAL);\r\n        this.dailyProgressMinutes.valueChanges\r\n            .subscribe(v => localStorage.setItem(LS_DAILY_GOAL, String(v)));\r\n\r\n        const weekly = localStorage.getItem(LS_WEEKLY_GOAL);\r\n        this.weeklyProgressMinutes.setValue(Number(weekly) || DEFAULT_WEEKLY_GOAL);\r\n        this.weeklyProgressMinutes.valueChanges\r\n            .subscribe(v => localStorage.setItem(LS_WEEKLY_GOAL, String(v)));\r\n\r\n        // Training unit stuff\r\n        const { trainingUnitLength, premisesUpThreshold, premisesDownThreshold } = this.progressAndPerformanceService.getTrainingUnitSettings();\r\n        \r\n        this.trainingUnitLength.setValue(trainingUnitLength);\r\n        this.trainingUnitLength.valueChanges\r\n            .subscribe(v => localStorage.setItem(LS_TRAINING_UNIT_LENGTH, String(v)));\r\n\r\n        this.premisesUpThreshold.setValue(premisesUpThreshold);\r\n        this.premisesUpThreshold.valueChanges\r\n            .subscribe(v => localStorage.setItem(LS_PREMISES_UP_THRESHOLD, String(v)));\r\n\r\n        this.premisesDownThreshold.setValue(premisesDownThreshold);\r\n        this.premisesDownThreshold.valueChanges\r\n            .subscribe(v => localStorage.setItem(LS_PREMISES_DOWN_THRESHOLD, String(v)));\r\n    }\r\n\r\n}\r\n","<app-card>\r\n    <div body class=\"d-grid py-3 px-md-3\" style=\"gap: 2rem;\">\r\n        <div class=\"card shadow-sm\">\r\n            <div class=\"card-header py-2 small\">Game mode</div>\r\n            <div class=\"card-body\">\r\n                <app-game-mode-choose></app-game-mode-choose>\r\n            </div>\r\n        </div>\r\n\r\n        <div class=\"card shadow-sm\">\r\n            <div class=\"card-header py-2 small\">Timer mode</div>\r\n            <div class=\"card-body\">\r\n                <app-timer-choose></app-timer-choose>\r\n            </div>\r\n        </div>\r\n\r\n        <div class=\"card shadow-sm\">\r\n            <div class=\"card-header py-2 small\">Playtime settings</div>\r\n            <div class=\"card-body\">\r\n                <div class=\"d-grid\" style=\"gap: 0.75rem;\">\r\n                    <app-input\r\n                        type=\"range\"\r\n                        min=\"15\"\r\n                        max=\"60\"\r\n                        step=\"5\"\r\n                        name=\"dailyProgressMinutes\"\r\n                        [label]=\"'Daily goal: ' + dailyProgressMinutes.value + ' minutes'\"\r\n                        [ngControl]=\"dailyProgressMinutes\"\r\n                        [noParenthesisValue]=\"true\"\r\n                    ></app-input>\r\n            \r\n                    <app-input\r\n                        type=\"range\"\r\n                        min=\"60\"\r\n                        max=\"240\"\r\n                        step=\"5\"\r\n                        name=\"weeklyProgressMinutes\"\r\n                        [label]=\"'Weekly goal: ' + weeklyProgressMinutes.value + ' minutes'\"\r\n                        [ngControl]=\"weeklyProgressMinutes\"\r\n                        [noParenthesisValue]=\"true\"\r\n                    ></app-input>\r\n                </div>\r\n            </div>\r\n        </div>\r\n\r\n        <div class=\"card shadow-sm\">\r\n            <div class=\"card-header py-2 small\">Performance tracker</div>\r\n            <div class=\"card-body\">\r\n                <div class=\"d-grid\" style=\"gap: 1rem;\">\r\n                    <app-input\r\n                        type=\"range\"\r\n                        min=\"10\"\r\n                        max=\"30\"\r\n                        step=\"5\"\r\n                        name=\"trainingUnitLength\"\r\n                        [label]=\"'Sample size: ' + trainingUnitLength.value + ' questions'\"\r\n                        [ngControl]=\"trainingUnitLength\"\r\n                        [noParenthesisValue]=\"true\"\r\n                    ></app-input>\r\n    \r\n                    <app-input\r\n                        type=\"range\"\r\n                        min=\"0\"\r\n                        max=\"0.9\"\r\n                        step=\"0.1\"\r\n                        helper=\"Percentage of incorrect answers at which premises will decrease\"\r\n                        name=\"premisesDownThreshold\"\r\n                        [label]=\"'Premises decrease threshold: ' + Math.round((premisesDownThreshold.value || 0)*100) + '%'\"\r\n                        [ngControl]=\"premisesDownThreshold\"\r\n                        [noParenthesisValue]=\"true\"\r\n                    ></app-input>\r\n        \r\n                    <app-input\r\n                        type=\"range\"\r\n                        min=\"0.1\"\r\n                        max=\"1\"\r\n                        step=\"0.1\"\r\n                        helper=\"Percentage of correct answers required for premises to increase\"\r\n                        name=\"premisesUpThreshold\"\r\n                        [label]=\"'Premises increase threshold: ' + Math.round((premisesUpThreshold.value || 0)*100) + '%'\"\r\n                        [ngControl]=\"premisesUpThreshold\"\r\n                        [noParenthesisValue]=\"true\"\r\n                    ></app-input>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n\r\n    <div footer class=\"playcard-toolbar\">\r\n        <button\r\n            class=\"btn btn-outline-primary\"\r\n            (click)=\"router.navigate([EnumScreens.Start])\"\r\n        >\r\n            <i class=\"bi bi-arrow-left\"></i> Start\r\n        </button>\r\n        <div>\r\n            <button\r\n                class=\"btn btn-primary\"\r\n                (click)=\"sylSrv.playArcadeMode()\"\r\n            >\r\n                Play <i class=\"bi bi-play-fill\"></i>\r\n            </button>\r\n        </div>\r\n    </div>\r\n</app-card>\r\n","import { Component, Input } from '@angular/core';\r\nimport { NgbModal } from '@ng-bootstrap/ng-bootstrap';\r\nimport { LS_TIMER } from '../../../constants/local-storage.constants';\r\nimport { ModalTimerSettingsComponent } from '../modal-timer-settings/modal-timer-settings.component';\r\n\r\n@Component({\r\n    selector: 'app-timer-choose',\r\n    templateUrl: './timer-choose.component.html',\r\n    styleUrls: ['./timer-choose.component.css']\r\n})\r\nexport class TimerChooseComponent {\r\n    \r\n    constructor(\r\n        private modalService: NgbModal\r\n    ) {}\r\n\r\n    ngAfterViewInit() {\r\n        const timerType = localStorage.getItem(LS_TIMER) || '0';\r\n        (document.querySelector(`#timer-choice-${timerType}`) as HTMLInputElement).checked = true;\r\n    }\r\n\r\n    async setTimer(timerType: string) {\r\n        localStorage.setItem(LS_TIMER, timerType);\r\n        if (timerType === \"1\") {\r\n            const modalRef = this.modalService.open(ModalTimerSettingsComponent, { centered: true });\r\n            await modalRef.result;\r\n        }\r\n    }\r\n}\r\n","<div class=\"timer-choices\">\r\n    <div class=\"timer-choice\">\r\n        <input type=\"radio\" id=\"timer-choice-2\" name=\"timer-kind\" (click)=\"setTimer('2')\">\r\n        <label for=\"timer-choice-2\" ngbTooltip=\"Timer adapts as you play\">Adaptive timer</label>\r\n    </div>\r\n\r\n    <div class=\"timer-choice\">\r\n        <input type=\"radio\" id=\"timer-choice-1\" name=\"timer-kind\" (click)=\"setTimer('1')\">\r\n        <label for=\"timer-choice-1\" ngbTooltip=\"Choose your own timers\">Custom timer</label>\r\n    </div>\r\n\r\n    <div class=\"timer-choice\">\r\n        <input type=\"radio\" id=\"timer-choice-0\" name=\"timer-kind\" (click)=\"setTimer('0')\">\r\n        <label for=\"timer-choice-0\" ngbTooltip=\"No timer at all\">Timer disabled</label>\r\n    </div>\r\n</div>","import { Component } from '@angular/core';\r\nimport { EnumScreens, EnumTiers, TIER_SCORE_RANGES } from '../../constants/syllogimous.constants';\r\nimport { Question } from '../../models/question.models';\r\nimport { SyllogimousService } from '../../services/syllogimous.service';\r\nimport { Router } from '@angular/router';\r\nimport { formatTime } from 'src/app/utils/date';\r\nimport { ProgressAndPerformanceService } from '../../services/progress-and-performance.service';\r\n\r\n@Component({\r\n    selector: 'app-start',\r\n    templateUrl: './start.component.html',\r\n    styleUrls: ['./start.component.css']\r\n})\r\nexport class StartComponent {\r\n    EnumScreens = EnumScreens;\r\n    formatTime = formatTime;\r\n\r\n    TIER_SCORE_RANGES = TIER_SCORE_RANGES;\r\n    tiers = Object.values(EnumTiers);\r\n    nextTier: EnumTiers | string = EnumTiers.Savant;\r\n    pointsRemaining = 0;\r\n\r\n    questions: Question[] = [];\r\n    correctQs: Question[] = [];\r\n    incorrectQs: Question[] = [];\r\n    unansweredQs: Question[] = [];\r\n    currentStreak: Question[] = [];\r\n    longestStreak: Question[] = [];\r\n    timePlayedToday = 0;\r\n    timePlayedThisWeek = 0;\r\n\r\n    constructor(\r\n        public sylSrv: SyllogimousService,\r\n        public router: Router,\r\n        private progressAndPerformanceService: ProgressAndPerformanceService\r\n    ) {\r\n        this.timePlayedToday = progressAndPerformanceService.getTimePlayed(progressAndPerformanceService.getToday());\r\n        this.timePlayedThisWeek = progressAndPerformanceService.getTimePlayedThisWeek(progressAndPerformanceService.getToday());\r\n    }\r\n\r\n    ngOnInit() {\r\n        const currTierIdx = this.tiers.findIndex(tier => tier === this.sylSrv.tier);\r\n        this.nextTier = this.tiers[currTierIdx + 1] || \"--\";\r\n        this.pointsRemaining = this.nextTier ? (TIER_SCORE_RANGES[this.nextTier as EnumTiers].minScore - this.sylSrv.score) : 0;\r\n\r\n        this.questions = this.sylSrv.questions;\r\n\r\n        this.correctQs = this.questions.filter(q => q.userAnswer !== undefined && q.isValid === q.userAnswer);\r\n        this.incorrectQs = this.questions.filter(q => q.userAnswer !== undefined && q.isValid !== q.userAnswer);\r\n        this.unansweredQs = this.questions.filter(q => q.userAnswer === undefined);\r\n\r\n        for (const q of this.questions) {\r\n            if (q.isValid !== q.userAnswer) {\r\n                break;\r\n            }\r\n            this.currentStreak.push(q);\r\n        }\r\n\r\n        let streak = [];\r\n        for (const q of this.questions) {\r\n            if (q.isValid !== q.userAnswer) {\r\n                if (streak.length > this.longestStreak.length) {\r\n                    this.longestStreak = streak;\r\n                    streak = [];\r\n                }\r\n                continue;\r\n            }\r\n            streak.push(q);\r\n        }\r\n    }\r\n}","<app-card>\r\n    <div body style=\"min-width: 320px; padding-top: 3rem;\">\r\n        <app-progress-and-performance></app-progress-and-performance>\r\n        \r\n        <ul class=\"list-group mb-4\">\r\n            <li class=\"list-group-item flex-between\">\r\n                <b>Tier</b>\r\n                <div>{{ sylSrv.tier }} {{ sylSrv.score }} pts <small class=\"text-muted\">(next {{nextTier}}<i [ngbTooltip]=\"pointsRemaining + ' pts left to this next level'\" class=\"bi bi-info-circle ms-1\"></i>)</small></div>\r\n            </li>\r\n    \r\n            <li class=\"list-group-item flex-between\">\r\n                <b>Correct</b>\r\n                <div>{{ correctQs.length }}</div>\r\n            </li>\r\n\r\n            <li class=\"list-group-item flex-between\">\r\n                <b>Timeout</b>\r\n                <div>{{ unansweredQs.length }}</div>\r\n            </li>\r\n\r\n            <li class=\"list-group-item flex-between\">\r\n                <b>Incorrect</b>\r\n                <div>{{ incorrectQs.length }}</div>\r\n            </li>\r\n\r\n            <li class=\"list-group-item flex-between\">\r\n                <b>Longest Streak</b>\r\n                <div>{{ longestStreak.length }}</div>\r\n            </li>\r\n        \r\n            <li class=\"list-group-item flex-between\">\r\n                <b>Current Streak</b>\r\n                <div>{{ currentStreak.length }}</div>\r\n            </li>\r\n        \r\n            <li class=\"list-group-item flex-between\">\r\n                <b>Playtime Today</b>\r\n                <div>{{ formatTime(timePlayedToday) }}</div>\r\n            </li>\r\n\r\n            <li class=\"list-group-item flex-between\">\r\n                <b>Playtime This Week</b>\r\n                <div>{{ formatTime(timePlayedThisWeek) }}</div>\r\n            </li>\r\n        </ul>\r\n\r\n        <div class=\"text-center\">\r\n            <a class=\"btn btn-outline-primary\" (click)=\"router.navigate([EnumScreens.Settings])\">\r\n                <i class=\"bi bi-gear\"></i> Settings\r\n            </a>\r\n        </div>\r\n    </div>\r\n\r\n    <div footer class=\"text-center d-flex justify-content-center gap-3\">\r\n        <button\r\n            style=\"width: 150px;\"\r\n            class=\"btn btn-primary\"\r\n            (click)=\"sylSrv.playArcadeMode()\"\r\n        >Arcade</button>\r\n        <button\r\n            style=\"width: 150px;\"\r\n            class=\"btn btn-outline-primary\"\r\n            (click)=\"router.navigate([EnumScreens.PlaygroundMode])\"\r\n        >Playground</button>\r\n    </div>\r\n</app-card>","import { Component } from '@angular/core';\r\nimport { Question } from 'src/app/syllogimous/models/question.models';\r\nimport { SyllogimousService } from 'src/app/syllogimous/services/syllogimous.service';\r\n\r\n@Component({\r\n    selector: 'app-accuracy-stats',\r\n    templateUrl: './accuracy-stats.component.html',\r\n    styleUrls: ['./accuracy-stats.component.css']\r\n})\r\nexport class AccuracyStatsComponent {\r\n    questions: Question[] = [];\r\n    correctQs: Question[] = [];\r\n    incorrectQs: Question[] = [];\r\n    unansweredQs: Question[] = [];\r\n    currentStreak: Question[] = [];\r\n    longestStreak: Question[] = [];\r\n\r\n    constructor(\r\n        public sylSrv: SyllogimousService\r\n    ) {}\r\n\r\n    ngOnInit() {\r\n        this.questions = this.sylSrv.questions;\r\n\r\n        this.correctQs = this.questions.filter(q => q.userAnswer !== undefined && q.isValid === q.userAnswer);\r\n        this.incorrectQs = this.questions.filter(q => q.userAnswer !== undefined && q.isValid !== q.userAnswer);\r\n        this.unansweredQs = this.questions.filter(q => q.userAnswer === undefined);\r\n\r\n        for (const q of this.questions) {\r\n            if (q.isValid !== q.userAnswer) {\r\n                break;\r\n            }\r\n            this.currentStreak.push(q);\r\n        }\r\n\r\n        let streak = [];\r\n        for (const q of this.questions) {\r\n            if (q.isValid !== q.userAnswer) {\r\n                if (streak.length > this.longestStreak.length) {\r\n                    this.longestStreak = streak;\r\n                    streak = [];\r\n                }\r\n                continue;\r\n            }\r\n            streak.push(q);\r\n        }\r\n    }\r\n}\r\n","<h2 class=\"text-center\">Accuracy</h2>\r\n    \r\n<ul class=\"list-group\">\r\n    <li class=\"list-group-item flex-between\">\r\n        <b>Correct Answers</b>\r\n        <div>{{ correctQs.length }}</div>\r\n    </li>\r\n\r\n    <li class=\"list-group-item flex-between\">\r\n        <b>Incorrect Answers</b>\r\n        <div>{{ incorrectQs.length }}</div>\r\n    </li>\r\n\r\n    <li class=\"list-group-item flex-between\">\r\n        <b>Unanswered Questions</b>\r\n        <div>{{ unansweredQs.length }}</div>\r\n    </li>\r\n\r\n    <li class=\"list-group-item flex-between\">\r\n        <b>Current Streak</b>\r\n        <div>{{ currentStreak.length }}</div>\r\n    </li>\r\n\r\n    <li class=\"list-group-item flex-between\">\r\n        <b>Longest Streak</b>\r\n        <div>{{ longestStreak.length }}</div>\r\n    </li>\r\n</ul>\r\n","import { Component } from '@angular/core';\r\nimport { Question } from 'src/app/syllogimous/models/question.models';\r\nimport { SyllogimousService } from 'src/app/syllogimous/services/syllogimous.service';\r\n\r\n@Component({\r\n    selector: 'app-error-analysis',\r\n    templateUrl: './error-analysis.component.html',\r\n    styleUrls: ['./error-analysis.component.css']\r\n})\r\nexport class ErrorAnalysisComponent {\r\n    questions: Question[] = [];\r\n    mostCommonMistake = \"No Mistakes Yet\";\r\n    leastCommonMistake = \"No Mistakes Yet\";\r\n\r\n    constructor(\r\n        public sylSrv: SyllogimousService\r\n    ) {}\r\n\r\n    ngOnInit() {\r\n        this.questions = this.sylSrv.questions;\r\n\r\n        const typeMistakesCount: Record<string, number> = {};\r\n        this.questions\r\n            .filter(q => q.isValid !== q.userAnswer)\r\n            .forEach(q => {\r\n                typeMistakesCount[q.type] = typeMistakesCount[q.type] || 0;\r\n                typeMistakesCount[q.type]++;\r\n            });\r\n        const sorted = Object.entries(typeMistakesCount).sort((a, b) => a[1] - b[1]);\r\n        if (sorted.length) {\r\n            this.mostCommonMistake = sorted[sorted.length - 1][0];\r\n            this.leastCommonMistake = sorted[0][0];\r\n        }\r\n    }\r\n}\r\n","<h2 class=\"text-center\">Error Analysis</h2>\r\n    \r\n<ul class=\"list-group\">\r\n    <li class=\"list-group-item align-items-center flex-between\">\r\n        <b>Most Common<br>Mistake Type</b>\r\n        <div>{{ mostCommonMistake }}</div>\r\n    </li>\r\n\r\n    <li class=\"list-group-item align-items-center flex-between\">\r\n        <b>Least Common<br>Mistake Type</b>\r\n        <div>{{ leastCommonMistake }}</div>\r\n    </li>\r\n</ul>\r\n","import { Component } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { StatsExportService } from '../../services/stats-export.service';\r\nimport { EnumScreens } from '../../constants/syllogimous.constants';\r\n\r\n@Component({\r\n    selector: 'app-stats',\r\n    templateUrl: './stats.component.html',\r\n    styleUrls: ['./stats.component.css']\r\n})\r\nexport class StatsComponent {\r\n    EnumScreens = EnumScreens;\r\n\r\n    constructor(\r\n        public router: Router,\r\n        private statsExportService: StatsExportService\r\n    ) {}\r\n\r\n    exportStats() {\r\n        this.statsExportService.exportStats();\r\n    }\r\n}","<app-card>\r\n    <div body class=\"d-grid gap-5 py-4 px-md-3\" style=\"min-width: 320px;\">\r\n        <app-tier-stats></app-tier-stats>\r\n        <app-accuracy-stats></app-accuracy-stats>\r\n        <app-time-based-stats></app-time-based-stats>\r\n        <app-type-based-stats></app-type-based-stats>\r\n        <app-error-analysis></app-error-analysis>\r\n    </div>\r\n\r\n    <div footer class=\"playcard-toolbar\">\r\n        <div>\r\n            <button\r\n                class=\"btn btn-outline-primary\"\r\n                (click)=\"router.navigate([EnumScreens.Start])\"\r\n            >\r\n                <i class=\"bi bi-arrow-left\"></i> Start\r\n            </button>\r\n        </div>\r\n        <div>\r\n            <button \r\n                class=\"btn btn-outline-primary\" \r\n                (click)=\"exportStats()\"\r\n            >\r\n                <i class=\"bi bi-download\"></i> Export CSV\r\n            </button>\r\n        </div>\r\n    </div>\r\n</app-card>","import { Component } from '@angular/core';\r\nimport { EnumTiers, TIER_SCORE_RANGES } from 'src/app/syllogimous/constants/syllogimous.constants';\r\nimport { SyllogimousService } from 'src/app/syllogimous/services/syllogimous.service';\r\n\r\n@Component({\r\n    selector: 'app-tier-stats',\r\n    templateUrl: './tier-stats.component.html',\r\n    styleUrls: ['./tier-stats.component.css']\r\n})\r\nexport class TierStatsComponent {\r\n    TIER_SCORE_RANGES = TIER_SCORE_RANGES;\r\n    tiers = Object.values(EnumTiers);\r\n    nextTier = EnumTiers.Savant;\r\n    pointsRemaining = 0;\r\n\r\n    constructor(\r\n        public sylSrv: SyllogimousService\r\n    ) {}\r\n\r\n    ngOnInit() {\r\n        const currTierIdx = this.tiers.findIndex(tier => tier === this.sylSrv.tier);\r\n        this.nextTier = this.tiers[currTierIdx + 1] || \"--\";\r\n        this.pointsRemaining = this.nextTier ? (TIER_SCORE_RANGES[this.nextTier].minScore - this.sylSrv.score) : 0;\r\n    }\r\n}\r\n","<h2 class=\"text-center\">Tier</h2>\r\n    \r\n<ul class=\"list-group\">\r\n    <li class=\"list-group-item flex-between\">\r\n        <b>Tier</b>\r\n        <div>{{ sylSrv.tier }}</div>\r\n    </li>\r\n\r\n    <li class=\"list-group-item flex-between\">\r\n        <b>Points Earned</b>\r\n        <div>{{ sylSrv.score }}</div>\r\n    </li>\r\n\r\n    <li class=\"list-group-item flex-between\">\r\n        <b>Next Tier</b>\r\n        <div>{{ nextTier }}</div>\r\n    </li>\r\n\r\n    <li class=\"list-group-item flex-between\">\r\n        <b>Points Remaining to Next Tier</b>\r\n        <div>{{ pointsRemaining }}</div>\r\n    </li>\r\n</ul>\r\n","import { Component } from '@angular/core';\r\nimport { Question } from 'src/app/syllogimous/models/question.models';\r\nimport { SyllogimousService } from 'src/app/syllogimous/services/syllogimous.service';\r\nimport { formatTime } from 'src/app/utils/date';\r\n\r\n@Component({\r\n    selector: 'app-time-based-stats',\r\n    templateUrl: './time-based-stats.component.html',\r\n    styleUrls: ['./time-based-stats.component.css']\r\n})\r\nexport class TimeBasedStatsComponent {\r\n    formatTime = formatTime;\r\n\r\n    questions: Question[] = [];\r\n    totalPlayTime = 0;\r\n    avgAnswer = 0;\r\n    fastestAnswer = 0;\r\n    slowestAnswer = 0;\r\n    timeBasedStats: Record<string, any>; // TODO: This should be typed\r\n\r\n    constructor(\r\n        private sylSrv: SyllogimousService\r\n    ) {\r\n        this.questions = this.sylSrv.questions;\r\n        this.timeBasedStats = {};\r\n\r\n        for (const q of this.questions) {\r\n            const ps = ((q.premises.length < 6) ? String(q.premises.length) : \"6+\") as \"2\" | \"3\" | \"4\" | \"5\" | \"6+\";\r\n\r\n            this.timeBasedStats[ps] = this.timeBasedStats[ps] || {\r\n                sum: 0,\r\n                count: 0,\r\n                fastest: 0,\r\n                slowest: 0,\r\n            };\r\n\r\n            const dt = q.answeredAt - q.createdAt;\r\n            this.totalPlayTime += dt;\r\n\r\n            this.timeBasedStats[ps].sum += dt;\r\n            this.timeBasedStats[ps].count += 1;\r\n\r\n            if (q.userAnswer !== undefined) {\r\n                if (this.fastestAnswer === 0 || dt < this.fastestAnswer) {\r\n                    this.fastestAnswer = dt;\r\n                }\r\n                if (this.slowestAnswer === 0 || dt > this.slowestAnswer) {\r\n                    this.slowestAnswer = dt;\r\n                }\r\n\r\n                if (this.timeBasedStats[ps].fastest === 0 || dt < this.timeBasedStats[ps].fastest) {\r\n                    this.timeBasedStats[ps].fastest = dt;\r\n                }\r\n                if (this.timeBasedStats[ps].slowest === 0 || dt > this.timeBasedStats[ps].slowest) {\r\n                    this.timeBasedStats[ps].slowest = dt;\r\n                }\r\n            }\r\n        }\r\n\r\n        console.log(\"Time based stats\", this.timeBasedStats);\r\n    }\r\n}\r\n","<h2 class=\"text-center\">Time-Based</h2>\r\n\r\n<ul class=\"list-group mb-3\">\r\n    <li class=\"list-group-item flex-between\">\r\n        <b>Total Play Time</b>\r\n        <div>{{ formatTime(totalPlayTime) }}</div>\r\n    </li>\r\n\r\n    <li class=\"list-group-item flex-between\">\r\n        <b>Average Time per Answer</b>\r\n        <div>{{ ((questions.length !== 0) ? (totalPlayTime / (1000 * questions.length)) : 0) | number:\".1-1\" }} s</div>\r\n    </li>\r\n\r\n    <li class=\"list-group-item flex-between\">\r\n        <b>Fastest Answer</b>\r\n        <div>{{ ((fastestAnswer / 1000) || 0) | number:\".1-1\" }} s</div>\r\n    </li>\r\n\r\n    <li class=\"list-group-item flex-between\">\r\n        <b>Slowest Answer</b>\r\n        <div>{{ ((slowestAnswer / 1000) || 0) | number:\".1-1\" }} s</div>\r\n    </li>\r\n</ul>\r\n\r\n<div *ngIf=\"{ value: '2' } as activeTab\">\r\n    <ul\r\n        ngbNav\r\n        #nav=\"ngbNav\"\r\n        [(activeId)]=\"activeTab.value\"\r\n        class=\"nav-tabs\"\r\n    >\r\n        <ng-container *ngFor=\"let ps of ['2', '3', '4', '5', '6+']\">\r\n            <li [ngbNavItem]=\"ps\">\r\n                <a ngbNavLink>{{ ps }} Ps</a>\r\n                <ng-template ngbNavContent>\r\n                    <ul class=\"list-group list-group-flush\">\r\n                        <li class=\"list-group-item flex-between\">\r\n                            <b>Average Time per Answer</b>\r\n                            <div>{{\r\n                                (timeBasedStats[ps]\r\n                                    ? timeBasedStats[ps].sum / ((1000 * timeBasedStats[ps].count) || 0)\r\n                                    : 0\r\n                                ) | number:\".1-1\"\r\n                            }} s</div>\r\n                        </li>\r\n                \r\n                        <li class=\"list-group-item flex-between\">\r\n                            <b>Fastest Answer</b>\r\n                            <div>{{ ((timeBasedStats[ps]?.fastest / 1000) || 0) | number:\".1-1\" }} s</div>\r\n                        </li>\r\n                \r\n                        <li class=\"list-group-item flex-between\">\r\n                            <b>Slowest Answer</b>\r\n                            <div>{{ ((timeBasedStats[ps]?.slowest / 1000) || 0) | number:\".1-1\" }} s</div>\r\n                        </li>\r\n                    </ul>\r\n                </ng-template>\r\n            </li>\r\n        </ng-container>\r\n    </ul>\r\n\r\n    <div\r\n        [ngbNavOutlet]=\"nav\"\r\n        class=\"shadow-sm overflow-hidden border border-top-0\"\r\n    ></div>\r\n</div>\r\n","import { Component } from '@angular/core';\r\nimport { EnumQuestionType } from 'src/app/syllogimous/constants/question.constants';\r\nimport { TypeBasedStats } from 'src/app/syllogimous/models/stats.models';\r\nimport { StatsService } from 'src/app/syllogimous/services/stats.service';\r\nimport { SyllogimousService } from 'src/app/syllogimous/services/syllogimous.service';\r\n\r\n@Component({\r\n    selector: 'app-type-based-stats',\r\n    templateUrl: './type-based-stats.component.html',\r\n    styleUrls: ['./type-based-stats.component.css']\r\n})\r\nexport class TypeBasedStatsComponent {\r\n    EnumQuestionType = EnumQuestionType;\r\n    types: EnumQuestionType[];\r\n    typeBasedStats: TypeBasedStats;\r\n\r\n    constructor(\r\n        public sylSrv: SyllogimousService,\r\n        private statsService: StatsService,\r\n    ) {\r\n        const { types, typeBasedStats } = this.statsService.calcStats();\r\n        this.types = types;\r\n        this.typeBasedStats = typeBasedStats;\r\n    }\r\n}\r\n","<div class=\"card p-3 rounded text-center\" *ngIf=\"!types.length\">\r\n    <h2>Type-Based</h2>\r\n    <h4 class=\"my-3\">Play to see something here</h4>\r\n    <button class=\"btn btn-lg btn-primary\" (click)=\"sylSrv.playArcadeMode()\">\r\n        Play <i class=\"bi bi-play-fill\"></i>\r\n    </button>\r\n</div>\r\n\r\n<div class=\"d-grid gap-5\">\r\n    <div *ngFor=\"let type of types\">\r\n        <h2 class=\"text-center\">{{ type }}</h2>\r\n    \r\n        <ul class=\"list-group my-3\">\r\n            <li class=\"list-group-item flex-between\">\r\n                <b>Completed Questions</b>\r\n                <div>{{ typeBasedStats[type].completed }}</div>\r\n            </li>\r\n    \r\n            <li class=\"list-group-item flex-between\">\r\n                <b>Accuracy</b>\r\n                <div>{{ typeBasedStats[type].accuracy | percent }}</div>\r\n            </li>\r\n        </ul>\r\n    \r\n        <div *ngIf=\"{ initial: '2', premises: ['2','3','4','5','6+'] } as tabInfo\">\r\n            <ul ngbNav #nav=\"ngbNav\" [(activeId)]=\"tabInfo.initial\" class=\"nav-tabs\">\r\n                <ng-container *ngFor=\"let ps of tabInfo.premises\">\r\n                    <li [ngbNavItem]=\"ps\">\r\n                        <a ngbNavLink>{{ps}} Ps</a>\r\n                        <ng-template ngbNavContent>\r\n                            <ul class=\"list-group list-group-flush\">\r\n                                <li class=\"list-group-item flex-between\">\r\n                                    <b>Average Time per Answer</b>\r\n                                    <div>{{\r\n                                        ($any(typeBasedStats[type].stats)[ps]\r\n                                            ? ($any(typeBasedStats[type].stats)[ps].sum / ((1000 * $any(typeBasedStats[type].stats)[ps].count)) || 0)\r\n                                            : 0\r\n                                        ) | number:\".1-1\"\r\n                                    }} s</div>\r\n                                </li>\r\n                        \r\n                                <li class=\"list-group-item flex-between\">\r\n                                    <b>Fastest Answer</b>\r\n                                    <div>{{ (($any(typeBasedStats[type].stats)[ps]?.fastest / 1000) || 0) | number:\".1-1\" }} s</div>\r\n                                </li>\r\n                        \r\n                                <li class=\"list-group-item flex-between\">\r\n                                    <b>Slowest Answer</b>\r\n                                    <div>{{ (($any(typeBasedStats[type].stats)[ps]?.slowest / 1000) || 0) | number:\".1-1\" }} s</div>\r\n                                </li>\r\n                            </ul>\r\n                        </ng-template>\r\n                    </li>\r\n                </ng-container>\r\n            </ul>\r\n            \r\n            <div\r\n                [ngbNavOutlet]=\"nav\"\r\n                class=\"shadow-sm overflow-hidden border border-top-0\"\r\n            ></div>\r\n        </div>\r\n    </div>\r\n</div>\r\n","import { Component } from '@angular/core';\r\nimport { ORDERED_QUESTION_TYPES, ORDERED_TIERS, TIERS_MATRIX } from '../../constants/syllogimous.constants';\r\nimport { SyllogimousService } from '../../services/syllogimous.service';\r\n\r\n@Component({\r\n    selector: 'app-tiers-matrix',\r\n    templateUrl: './tiers-matrix.component.html',\r\n    styleUrls: ['./tiers-matrix.component.scss']\r\n})\r\nexport class TiersMatrixComponent {\r\n    TIERS_MATRIX = TIERS_MATRIX;\r\n    entriesOfMatrix = Object.entries(TIERS_MATRIX);\r\n    userTierIdx = 0;\r\n\r\n    tier = \"--click below--\";\r\n    questionType = \"--click below--\";\r\n    cellSelI = -1;\r\n    cellSelJ = -1;\r\n\r\n    constructor(private sylSrv: SyllogimousService) {\r\n        this.userTierIdx = Math.max(0, ORDERED_TIERS.findIndex(t => t === sylSrv.tier));\r\n    }\r\n\r\n    showDetails(i: number, j: number) {\r\n        this.cellSelI = i;\r\n        this.cellSelJ = j;\r\n        this.tier = ORDERED_TIERS.find((_, _i) => _i === i) || \"\";\r\n        this.questionType = ORDERED_QUESTION_TYPES.find((_, _j) => _j === j) || \"\";\r\n    }\r\n}\r\n","<app-card>\r\n    <div body>\r\n        <div class=\"mb-3\">\r\n            <div><b>Tier</b> {{tier}}</div>\r\n            <div><b>Question Type</b> {{questionType}}</div>\r\n        </div>\r\n\r\n        <div class=\"matrix\">\r\n            <ng-container *ngFor=\"let item of entriesOfMatrix; let i = index\">\r\n                <div [ngClass]=\"'tier-'+i\" [class.current-tier]=\"i === userTierIdx\">\r\n                    <ng-container *ngFor=\"let numOfPremises of item[1]; let j = index\">\r\n                        <span \r\n                            [ngClass]=\"'question-type-'+j\"\r\n                            [class.cell-selected]=\"i === cellSelI && j === cellSelJ\"\r\n                            (click)=\"showDetails(i, j)\"\r\n                        >{{numOfPremises}}</span>\r\n                    </ng-container>\r\n                </div>\r\n            </ng-container>\r\n        </div>\r\n    </div>\r\n</app-card>\r\n","import { Component } from \"@angular/core\";\r\n\r\n@Component({\r\n    selector: \"app-tutorial-analogy\",\r\n    templateUrl: \"./analogy.component.html\",\r\n    styleUrls: [\"./analogy.component.css\"]\r\n})\r\nexport class TutorialAnalogyComponent {}","<h2>How to Play Analogy</h2>\r\n\r\n<p>Each analogy question begins with a set of statements that define the relationships between different items. For example:</p>\r\n<ul>\r\n    <li>Brush is the same as Desk</li>\r\n    <li>Desk is opposite of Bread</li>\r\n    <li>Skirt is opposite of Heart</li>\r\n    <li>Bread is the same as Skirt</li>\r\n</ul>\r\n\r\n<p>After reviewing the relationships, you'll be presented with an analogy that you need to evaluate. For example:</p>\r\n<p><strong>Conclusion:</strong> \"Heart to Bread is the same as Skirt to Desk.\"</p>\r\n\r\n<p>Based on your analysis, click the <strong>True</strong> button if you believe the given relationship is correct or the <strong>False</strong> button if you think it is not.</p>\r\n\r\n<h3>The <span class=\"is-negated\">Inversion</span> Cue</h3>\r\n<p>Whenever you encounter a phrase highlighted in <span class=\"is-negated\">red</span>, it's an indication that you need to think inversely about the information presented.</p>\r\n","import { Component } from \"@angular/core\";\r\n\r\n@Component({\r\n    selector: \"app-tutorial-binary\",\r\n    templateUrl: \"./binary.component.html\",\r\n    styleUrls: [\"./binary.component.css\"]\r\n})\r\nexport class TutorialBinaryComponent {}","<h2>How to Play Binary</h2>\r\n\r\n<p>Each binary question starts with a set of relationships between different items. Here’s an example:</p>\r\n<ul>\r\n    <li>Jaw is same as Foot</li>\r\n    <li>Foot is opposite of Barbie</li>\r\n    <li>No Violin is Cashier</li>\r\n    <li>All Violin is Paint</li>\r\n    <li>Jaw is same as Barbie</li>\r\n</ul>\r\n\r\n<p>Now, consider the following conclusion:</p>\r\n<blockquote>\"Jaw is same as Barbie <em>or</em> No Cashier is Paint\"</blockquote>\r\n\r\n<p>Based on your analysis, click the <strong>True</strong> button if you believe the given relationship is correct or the <strong>False</strong> button if you think it is not.</p>\r\n\r\n<h3>The <span class=\"is-negated\">Inversion</span> Cue</h3>\r\n<p>Whenever you encounter a phrase highlighted in <span class=\"is-negated\">red</span>, it's an indication that you need to think inversely about the information presented.</p>\r\n","import { Component } from \"@angular/core\";\r\n\r\n@Component({\r\n    selector: \"app-tutorial-circular-arrangement\",\r\n    templateUrl: \"./circular-arrangement.component.html\",\r\n    styleUrls: [\"./circular-arrangement.component.css\"]\r\n})\r\nexport class TutorialCircularArrangementComponent {}","<h2>How to Play Circular Arrangement</h2>\r\n\r\n<p>Each question presents a set of circular arrangement relationships. For instance:</p>\r\n<ul>\r\n    <li>Sand is to the right of Kangaroo</li>\r\n    <li>Cello is to the immediate right of Sand</li>\r\n</ul>\r\n\r\n<p>To solve the puzzle, arrange the subjects in a circle based on the provided premises.</p>\r\n<p>If the conclusion is \"Kangaroo is to the immediate left of Cello,\" and your arrangement shows that \"Kangaroo\" is directly to the left of \"Cello\", then you would click <strong>True</strong>. If not, click <strong>False</strong>.</p>\r\n\r\n<h3>The <span class=\"is-negated\">Inversion</span> Cue</h3>\r\n<p>Whenever you encounter a phrase highlighted in <span class=\"is-negated\">red</span>, it's an indication that you need to think inversely about the information presented.</p>\r\n","import { Component } from \"@angular/core\";\r\n\r\n@Component({\r\n    selector: \"app-tutorial-comparison-chronological\",\r\n    templateUrl: \"./comparison-chronological.component.html\",\r\n    styleUrls: [\"./comparison-chronological.component.css\"]\r\n})\r\nexport class TutorialComparisonChronologicalComponent {}","<h2>How to Play Comparison Chronological</h2>\r\n<p>Comparison chronological questions have a series of premises that describe the relative order of items. For example:</p>\r\n<ul>\r\n    <li>Knife is after Shoulder</li>\r\n    <li>Knife is before Hostel</li>\r\n    <li>Desktop is after Hostel</li>\r\n</ul>\r\n\r\n<p>You may be asked to verify a statement like \"Is the Knife correctly positioned after the Desktop?\" Given the premises, you would determine that this sequence is <strong>False</strong>.</p>\r\n<p>After selecting <strong>True</strong> or <strong>False</strong>, you'll receive feedback, allowing you to see if your reasoning was correct.</p>\r\n\r\n<h3>The <span class=\"is-negated\">Inversion</span> Cue</h3>\r\n<p>Whenever you encounter a phrase highlighted in <span class=\"is-negated\">red</span>, it's an indication that you need to think inversely about the information presented.</p>\r\n","import { Component } from \"@angular/core\";\r\n\r\n@Component({\r\n    selector: \"app-tutorial-comparison-numerical\",\r\n    templateUrl: \"./comparison-numerical.component.html\",\r\n    styleUrls: [\"./comparison-numerical.component.css\"]\r\n})\r\nexport class TutorialComparisonNumericalComponent {}","<h2>How to Play Comparison Numerical</h2>\r\n\r\n<p>Each question presents you with a set of comparisons between different items. For example:</p>\r\n<ul>\r\n    <li>Sea is more than Turtle</li>\r\n    <li>Wrist is less than Turtle</li>\r\n</ul>\r\n\r\n<p>You will need to determine if the conclusion is logically valid based on the relationships given. For example:</p>\r\n<p><strong>Conclusion:</strong> \"Wrist is less than Sea.\"</p>\r\n\r\n<p>Based on the comparisons (Wrist &lt; Turtle &lt; Sea), this conclusion would be <strong>True</strong>.</p>\r\n\r\n<h3>The <span class=\"is-negated\">Inversion</span> Cue</h3>\r\n<p>Whenever you encounter a phrase highlighted in <span class=\"is-negated\">red</span>, it's an indication that you need to think inversely about the information presented.</p>\r\n","import { Component } from \"@angular/core\";\r\n\r\n@Component({\r\n    selector: \"app-tutorial-direction3D-spatial\",\r\n    templateUrl: \"./direction3D-spatial.component.html\",\r\n    styleUrls: [\"./direction3D-spatial.component.css\"]\r\n})\r\nexport class TutorialDirection3DSpatialComponent {}","<h2>How to Play Direction3D Spatial</h2>\r\n\r\n<p>Each Direction3D Spatial question presents a set of spatial relationships between different objects. For example:</p>\r\n<ul>\r\n    <li>Temple is Above and West of Luggage</li>\r\n    <li>Luggage is South of Governor</li>\r\n    <li>Hotel is North-East of Temple</li>\r\n    <li>Governor is Below of Hotel</li>\r\n</ul>\r\n\r\n<p>After understanding each object's relative position, you may be asked to verify a specific relationship between two or more objects. For example:</p>\r\n<p><strong>Conclusion:</strong> \"Is the Hotel above the Governor?\"</p>\r\n\r\n<p>Based on your analysis, click the <strong>True</strong> button if you believe the given relationship is correct or the <strong>False</strong> button if you think it is not.</p>\r\n\r\n<h3>The <span class=\"is-negated\">Inversion</span> Cue</h3>\r\n<p>Whenever you encounter a phrase highlighted in <span class=\"is-negated\">red</span>, it's an indication that you need to think inversely about the information presented.</p>\r\n","import { Component } from \"@angular/core\";\r\n\r\n@Component({\r\n    selector: \"app-tutorial-direction3D-temporal\",\r\n    templateUrl: \"./direction3D-temporal.component.html\",\r\n    styleUrls: [\"./direction3D-temporal.component.css\"]\r\n})\r\nexport class TutorialDirection3DTemporalComponent {}","<h2>How to Play Direction3D Temporal</h2> \r\n\r\n<p>Each Direction3D Temporal question presents a series of statements that describe the relative positions of objects. For example:</p>\r\n<ul>\r\n    <li>Hammer is in the future and North of Church</li>\r\n    <li>Dates is in the present and North-West of Hammer</li>\r\n    <li>Church is in the past and South-East of Dates</li>\r\n</ul>\r\n\r\n<p>After understanding each object's position and their relations to each other, you need to test a conclusion. For example:</p>\r\n<p><strong>Conclusion:</strong> \"Is the Church to the south-east of the Dates?\"</p>\r\n\r\n<p>Based on your analysis, click the <strong>True</strong> button if you believe the given relationship is correct or the <strong>False</strong> button if you think it is not.</p>\r\n\r\n<h3>The <span class=\"is-negated\">Inversion</span> Cue</h3>\r\n<p>Whenever you encounter a phrase highlighted in <span class=\"is-negated\">red</span>, it's an indication that you need to think inversely about the information presented.</p>\r\n","import { Component } from \"@angular/core\";\r\n\r\n@Component({\r\n    selector: \"app-tutorial-direction\",\r\n    templateUrl: \"./direction.component.html\",\r\n    styleUrls: [\"./direction.component.css\"]\r\n})\r\nexport class TutorialDirectionComponent {}","<h2>How to Play Direction</h2>\r\n\r\n<p>Each question will present a series of directional relationships. These premises describe where one object is located in relation to another. For example:</p>\r\n<ul>\r\n    <li>Jewelry is at East of Color</li>\r\n    <li>Tail is at West of Milk</li>\r\n    <li>Color is at South-East of Tail</li>\r\n    <li>Milk is at South-East of Jewelry</li>\r\n</ul>\r\n\r\n<p>If the question provides a conclusion like \"Jewelry is north of Tail,\" and your map shows that \"Jewelry\" is not north of \"Tail\" but rather to its east, you would click <strong>False</strong>. If the statement matches your map, click <strong>True</strong>.</p>\r\n\r\n<h3>The <span class=\"is-negated\">Inversion</span> Cue</h3>\r\n<p>Whenever you encounter a phrase highlighted in <span class=\"is-negated\">red</span>, it's an indication that you need to think inversely about the information presented.</p>\r\n","import { Component } from \"@angular/core\";\r\n\r\n@Component({\r\n    selector: \"app-tutorial-distinction\",\r\n    templateUrl: \"./distinction.component.html\",\r\n    styleUrls: [\"./distinction.component.css\"]\r\n})\r\nexport class TutorialDistinctionComponent {}","<h2>How to Play Distinction</h2>\r\n\r\n<p>Distinction questions begin with a set of premises that define the relationships between various items. For example:</p>\r\n<ul>\r\n    <li>Mango is the same as Glass</li>\r\n    <li>Herbs is the same as Mango</li>\r\n    <li>Glass is the same as Shower</li>\r\n    <li>Herbs is opposite of Shower</li>\r\n</ul>\r\n\r\n<p>Based on your analysis, the game might ask you to evaluate a statement like:</p>\r\n<p><strong>Conclusion:</strong> \"Mango is opposite of Shower.\"</p>\r\n\r\n<p>Based on your analysis, click the <strong>True</strong> button if you believe the given relationship is correct or the <strong>False</strong> button if you think it is not.</p>\r\n\r\n<h3>The <span class=\"is-negated\">Inversion</span> Cue</h3>\r\n<p>Whenever you encounter a phrase highlighted in <span class=\"is-negated\">red</span>, it's an indication that you need to think inversely about the information presented.</p>\r\n","import { Component } from \"@angular/core\";\r\n\r\n@Component({\r\n    selector: \"app-tutorial-graph-matching\",\r\n    templateUrl: \"./graph-matching.component.html\",\r\n    styleUrls: [\"./graph-matching.component.css\"]\r\n})\r\nexport class TutorialGraphMatchingComponent {}","<h2>How to Play Graph Matching</h2>\r\n\r\n<p>First, visualize the graph from the premises:</p>\r\n<ul>\r\n    <li>Eave originates from Leaves</li>\r\n    <li>Clothes originate from Eave</li>\r\n</ul>\r\n\r\n<p>Next, visualize the graph for the conclusion:</p>\r\n<ul>\r\n    <li>Panther leads to Wander</li>\r\n    <li>Wander leads to Bell</li>\r\n</ul>\r\n\r\n<p>Examine whether the two graphs are isomorphic. This means checking for a one-to-one correspondence between their vertices and edges that maintains connectivity.</p>\r\n\r\n<p>If the premise and conclusion graphs match structurally, click the <strong>True</strong> button. Otherwise, click the <strong>False</strong> button.</p>\r\n\r\n<h3>The <span class=\"is-negated\">Inversion</span> Cue</h3>\r\n<p>Whenever you encounter a phrase highlighted in <span class=\"is-negated\">red</span>, it's an indication that you need to think inversely about the information presented.</p>\r\n","import { Component } from \"@angular/core\";\r\n\r\n@Component({\r\n    selector: \"app-tutorial-linear-arrangement\",\r\n    templateUrl: \"./linear-arrangement.component.html\",\r\n    styleUrls: [\"./linear-arrangement.component.css\"]\r\n})\r\nexport class TutorialLinearArrangementComponent {}","<h2>How to Play Linear Arrangement</h2>\r\n\r\n<p>Each question has a series of linear arrangement relationships. For example:</p>\r\n<ul>\r\n    <li>Chicken is to the immediate right of Cinema</li>\r\n    <li>Bike is to the immediate right of Chicken</li>\r\n</ul>\r\n\r\n<p>To solve the puzzle, arrange the subjects linearly based on the premises.</p>\r\n<p>If the conclusion is like \"Cinema is to the immediate left of Bike,\" and your arrangement shows that \"Cinema\" is to the left of \"Chicken\", you would click <strong>False</strong>. If the statement accurately reflects your arrangement, click <strong>True</strong>.</p>\r\n\r\n<h3>The <span class=\"is-negated\">Inversion</span> Cue</h3>\r\n<p>Whenever you encounter a phrase highlighted in <span class=\"is-negated\">red</span>, it's an indication that you need to think inversely about the information presented.</p>\r\n","import { Component } from \"@angular/core\";\r\n\r\n@Component({\r\n    selector: \"app-tutorial-syllogism\",\r\n    templateUrl: \"./syllogism.component.html\",\r\n    styleUrls: [\"./syllogism.component.css\"]\r\n})\r\nexport class TutorialSyllogismComponent {}","<h2>How to Play Syllogism</h2>\r\n\r\n<p>Each syllogism question starts with a set of premises. For example:</p>\r\n<ul>\r\n    <li>Some Planet is Soup</li>\r\n    <li>No Freezer is Turtle</li>\r\n    <li>No Freezer is Planet</li>\r\n    <li>All Turtle is Planet</li>\r\n</ul>\r\n\r\n<p>The game will present a conclusion that you must evaluate based on the premises. For example:</p>\r\n<p><strong>Conclusion:</strong> \"Some Freezer is Soup.\"</p>\r\n\r\n<p>Once you’ve analyzed the premises and the conclusion, click the <strong>True</strong> button if you believe the conclusion logically follows from the premises, or the <strong>False</strong> button if it does not.</p>\r\n\r\n<h3>The <span class=\"is-negated\">Inversion</span> Cue</h3>\r\n<p>Whenever you encounter a phrase highlighted in <span class=\"is-negated\">red</span>, it's an indication that you need to think inversely about the information presented.</p>\r\n\r\n<ul>\r\n    <li> <span class=\"is-negated\">is</span> is equivalent to <strong>is not</strong></li>\r\n    <li> <span class=\"is-negated\">is not</span> is equivalent to <strong>is</strong></li>\r\n    <li> <span class=\"is-negated\">All</span> is equivalent to <strong>No</strong></li>\r\n    <li> <span class=\"is-negated\">No</span> is equivalent to <strong>All</strong></li>\r\n</ul>\r\n","import { Component } from '@angular/core';\r\nimport { SyllogimousService } from '../../services/syllogimous.service';\r\nimport { Router } from '@angular/router';\r\nimport { EnumScreens } from '../../constants/syllogimous.constants';\r\n\r\n@Component({\r\n    selector: 'app-tutorial',\r\n    templateUrl: './tutorial.component.html',\r\n    styleUrls: ['./tutorial.component.css']\r\n})\r\nexport class TutorialComponent {\r\n    EnumScreens = EnumScreens;\r\n\r\n    showBack = false;\r\n\r\n    constructor(\r\n        public sylSrv: SyllogimousService,\r\n        public router: Router\r\n    ) {\r\n        const navigation = this.router.getCurrentNavigation();\r\n        this.showBack = navigation?.extras.state?.data?.showBack;\r\n        console.log(\"Show back\", this.showBack);\r\n    }\r\n\r\n}\r\n","<app-card>\r\n    <div body class=\"py-3 px-md-3\">\r\n        <router-outlet class=\"d-none\"></router-outlet>\r\n    </div>\r\n\r\n    <div *ngIf=\"!showBack; else showBackTemplate\" footer class=\"playcard-toolbar\">\r\n        <div>\r\n            <div class=\"form-check\">\r\n                <input #dontShowAnymore class=\"form-check-input\" type=\"checkbox\" value=\"\" id=\"dontShowAnymore\">\r\n                <label class=\"form-check-label\" for=\"dontShowAnymore\">\r\n                    Don't show anymore\r\n                </label>\r\n            </div>\r\n        </div>\r\n        <div>\r\n            <button\r\n                class=\"btn btn-outline-primary\"\r\n                (click)=\"sylSrv.skipTutorial(dontShowAnymore.checked)\"\r\n            >Skip Tutorial</button>\r\n        </div>\r\n    </div>\r\n    <ng-template #showBackTemplate>\r\n        <div footer class=\"playcard-toolbar\">\r\n            <div>\r\n                <button\r\n                    class=\"btn btn-outline-primary\"\r\n                    (click)=\"router.navigate([EnumScreens.Tutorials])\"\r\n                >\r\n                    <i class=\"bi bi-arrow-left\"></i> Tutorials\r\n                </button>\r\n            </div>\r\n        </div>\r\n    </ng-template>\r\n</app-card>","import { Component } from '@angular/core';\r\nimport { Question } from '../../models/question.models';\r\nimport { SyllogimousService } from '../../services/syllogimous.service';\r\nimport { LS_HISTORY } from '../../constants/local-storage.constants';\r\nimport { Router } from '@angular/router';\r\nimport { EnumScreens } from '../../constants/syllogimous.constants';\r\nimport { EnumQuestionType } from '../../constants/question.constants';\r\n\r\n@Component({\r\n    selector: 'app-tutorials',\r\n    templateUrl: './tutorials.component.html',\r\n    styleUrls: ['./tutorials.component.css']\r\n})\r\nexport class TutorialsComponent {\r\n    EnumScreens = EnumScreens;\r\n    EnumQuestionType = EnumQuestionType;\r\n\r\n    questionTypes: EnumQuestionType[] = [];\r\n    questions: Question[] = [];\r\n    seenQs: Record<string, boolean> = {};\r\n\r\n    constructor(\r\n        public sylSrv: SyllogimousService,\r\n        public router: Router\r\n    ) {\r\n        this.questionTypes = Object.values(EnumQuestionType);\r\n    }\r\n\r\n    ngOnInit() {\r\n        const history = localStorage.getItem(LS_HISTORY);\r\n        if (history) {\r\n            this.questions = JSON.parse(history).reverse();\r\n            this.seenQs = this.questions.reduce((acc, curr) => (acc[curr.type] = true, acc), {} as any);\r\n        }\r\n    }\r\n\r\n    navTo(type: EnumQuestionType) {\r\n        this.router.navigate([EnumScreens.Tutorial, type], { state: { data: { showBack: true } } });\r\n    }\r\n}\r\n","<app-card>\r\n    <div body class=\"py-3 px-md-3\">\r\n        <div class=\"text-center\" *ngIf=\"!questions.length\">\r\n            <h3 class=\"mb-3\">Play to discover question types</h3>\r\n            <button class=\"btn btn-lg btn-primary\" (click)=\"sylSrv.playArcadeMode()\">\r\n                Play <i class=\"bi bi-play-fill\"></i>\r\n            </button>\r\n        </div>\r\n\r\n        <div *ngIf=\"questions.length\">\r\n            <p class=\"text-center lead\" style=\"margin-bottom: 2rem;\">If you need a refresher tutorial, just click any of the items below to navigate to the tutorial page.</p>\r\n\r\n            <div class=\"d-grid gap-2\">\r\n                <button\r\n                    *ngFor=\"let type of questionTypes\"\r\n                    class=\"btn btn-outline-primary\"\r\n                    [class.d-none]=\"!seenQs[type]\"\r\n                    (click)=\"navTo(type)\"\r\n                >{{type}}</button>\r\n            </div>\r\n        </div>\r\n    </div>\r\n\r\n    <div footer class=\"playcard-toolbar\">\r\n        <div>\r\n            <button\r\n                class=\"btn btn-outline-primary\"\r\n                (click)=\"router.navigate([EnumScreens.Start])\"\r\n            >\r\n                <i class=\"bi bi-arrow-left\"></i> Start\r\n            </button>\r\n        </div>\r\n    </div>\r\n</app-card>","import { Injectable } from '@angular/core';\r\nimport { Subject } from 'rxjs';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class GameTimerService {\r\n\r\n    interval?: any;\r\n    remainingSeconds = 0;\r\n    running = false;\r\n\r\n    start(seconds?: number) {\r\n        return new Promise<void>((resolve, reject) => {\r\n            if (this.running) {\r\n                return reject(\"GameTimerService: Already running\");\r\n            }\r\n    \r\n            if (seconds == null) {\r\n                seconds = this.remainingSeconds;\r\n            }\r\n    \r\n            if (seconds <= 0) {\r\n                return reject(\"GameTimerService: Invalid seconds\");\r\n            }\r\n    \r\n            this.remainingSeconds = seconds;\r\n            this.running = true;\r\n    \r\n            this.interval = setInterval(() => {\r\n                if (this.remainingSeconds > 0) {\r\n                    this.remainingSeconds--;\r\n                    if (this.remainingSeconds === 0) {\r\n                        this.stop();\r\n                        return resolve();\r\n                    }\r\n                }\r\n            }, 1000);\r\n        });\r\n    }\r\n\r\n    pause() {\r\n        if (!this.running) {\r\n            return console.warn(\"GameTimerService: Not running\");\r\n        }\r\n\r\n        this.running = false;\r\n        clearInterval(this.interval);\r\n    }\r\n\r\n    stop() {\r\n        this.pause();\r\n        this.remainingSeconds = 0;\r\n    }\r\n}\r\n","import { Injectable } from \"@angular/core\";\r\nimport { LS_DAILY_GOAL, LS_DAILY_PROGRESS, LS_PREMISES_DOWN_THRESHOLD, LS_PREMISES_UP_THRESHOLD, LS_TRAINING_UNIT, LS_TRAINING_UNIT_LENGTH, LS_WEEKLY_GOAL } from \"../constants/local-storage.constants\";\r\nimport { EnumQuestionType } from \"../constants/question.constants\";\r\nimport { QUESTION_TYPE_SETTING_PARAMS } from \"../constants/settings.constants\";\r\n\r\nexport const DEFAULT_DAILY_GOAL = 30;\r\nexport const DEFAULT_WEEKLY_GOAL = 120;\r\nexport const DEFAULT_TRAINING_UNIT_LENGTH = 10;\r\nexport const DEFAULT_PREMISES_UP_THRESHOLD = 0.9;\r\nexport const DEFAULT_PREMISES_DOWN_THRESHOLD = 0.5;\r\n\r\nexport interface ITrainingUnit {\r\n    premises: number;\r\n    right: number;\r\n    timeout: number;\r\n    wrong: number;\r\n}\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class ProgressAndPerformanceService {\r\n    get DAILY_GOAL() {\r\n        const dailyLS = localStorage.getItem(LS_DAILY_GOAL);\r\n        return Number(dailyLS || DEFAULT_DAILY_GOAL) * 60 * 1000;\r\n    }\r\n    get WEEKLY_GOAL() {\r\n        const weeklyLS = localStorage.getItem(LS_WEEKLY_GOAL);\r\n        return Number(weeklyLS || DEFAULT_WEEKLY_GOAL) * 60 * 1000;\r\n    }\r\n\r\n    getToday() {\r\n        return new Date().toISOString().split(\"T\")[0];\r\n    }\r\n\r\n    getDailyProgress() {\r\n        const lsDailyProgress = localStorage.getItem(LS_DAILY_PROGRESS);\r\n        if (!lsDailyProgress) {\r\n            return {};\r\n        }\r\n        return JSON.parse(lsDailyProgress) as Record<string, number>;\r\n    }\r\n\r\n    setDailyProgress(isoDate: string, ms: number) {\r\n        const dailyProgress = this.getDailyProgress();\r\n        dailyProgress[isoDate] = dailyProgress[isoDate] || 0;\r\n        dailyProgress[isoDate] += ms;\r\n        localStorage.setItem(LS_DAILY_PROGRESS, JSON.stringify(dailyProgress));\r\n    }\r\n\r\n    calcDailyProgress(isoDate: string) {\r\n        return Math.max(0, Math.min(100, Math.floor(100 * (this.getDailyProgress()[isoDate] || 0) / this.DAILY_GOAL)));\r\n    }\r\n\r\n    getWeekStartDate(isoDate: string) {\r\n        const date = new Date(isoDate);\r\n        const day = date.getDay();\r\n        const diff = date.getDate() - day + (day === 0 ? -6 : 1);\r\n        return new Date(date.setDate(diff)).toISOString().split('T')[0];\r\n    }\r\n\r\n    calcWeeklyProgress(isoDate: string) {\r\n        const weekStartDate = this.getWeekStartDate(isoDate);\r\n        const dailyProgress = this.getDailyProgress();\r\n        let weeklyTotal = 0;\r\n        \r\n        // Sum up all days in the week\r\n        for (let i = 0; i < 7; i++) {\r\n            const date = new Date(weekStartDate);\r\n            date.setDate(date.getDate() + i);\r\n            const currentDate = date.toISOString().split('T')[0];\r\n            weeklyTotal += dailyProgress[currentDate] || 0;\r\n        }\r\n\r\n        return Math.max(0, Math.min(100, Math.floor(100 * weeklyTotal / this.WEEKLY_GOAL)));\r\n    }\r\n\r\n    getTimePlayed(isoDate: string) {\r\n        return this.getDailyProgress()[isoDate] || 0;\r\n    }\r\n    \r\n    getTimePlayedThisWeek(isoDate: string) {\r\n        const weekStartDate = this.getWeekStartDate(isoDate);\r\n        const dailyProgress = this.getDailyProgress();\r\n        let weeklyTotal = 0;\r\n        \r\n        // Sum up all days in the week\r\n        for (let i = 0; i < 7; i++) {\r\n            const date = new Date(weekStartDate);\r\n            date.setDate(date.getDate() + i);\r\n            const currentDate = date.toISOString().split('T')[0];\r\n            weeklyTotal += dailyProgress[currentDate] || 0;\r\n        }\r\n    \r\n        return weeklyTotal;\r\n    }\r\n\r\n    getTrainingUnitSettings() {\r\n        const trainingUnitLengthLS = localStorage.getItem(LS_TRAINING_UNIT_LENGTH);\r\n        const trainingUnitLength = Number(trainingUnitLengthLS) || DEFAULT_TRAINING_UNIT_LENGTH;\r\n\r\n        const premisesDownThresholdLS = localStorage.getItem(LS_PREMISES_DOWN_THRESHOLD);\r\n        const premisesDownThreshold = Number(premisesDownThresholdLS) || DEFAULT_PREMISES_DOWN_THRESHOLD;\r\n\r\n        const premisesUpThresholdLS = localStorage.getItem(LS_PREMISES_UP_THRESHOLD);\r\n        const premisesUpThreshold = Number(premisesUpThresholdLS) || DEFAULT_PREMISES_UP_THRESHOLD;\r\n\r\n        return { trainingUnitLength, premisesUpThreshold, premisesDownThreshold };\r\n    }\r\n\r\n    getTrainingUnit(type: EnumQuestionType) {\r\n        const ls = localStorage.getItem(LS_TRAINING_UNIT + type);\r\n        if (!ls) {\r\n            return {\r\n                premises: QUESTION_TYPE_SETTING_PARAMS[type].minNumOfPremises,\r\n                right: 0,\r\n                timeout: 0,\r\n                wrong: 0\r\n            };\r\n        }\r\n        return JSON.parse(ls) as ITrainingUnit;\r\n    }\r\n\r\n    getAllTrainingUnits() {\r\n        const typeTrainingUnitMap = {} as Record<EnumQuestionType, ITrainingUnit>;\r\n        for (const type of Object.values(EnumQuestionType)) {\r\n            typeTrainingUnitMap[type] = this.getTrainingUnit(type);\r\n        }\r\n        return typeTrainingUnitMap;\r\n    }\r\n\r\n    updateTrainingUnit(\r\n        type: EnumQuestionType,\r\n        opts: {\r\n            premises?: number;\r\n            right?: number;\r\n            timeout?: number;\r\n            wrong?: number;\r\n        }\r\n    ) {\r\n        const trainingUnit = this.getTrainingUnit(type);\r\n        const { minNumOfPremises, maxNumOfPremises } = QUESTION_TYPE_SETTING_PARAMS[type];\r\n        trainingUnit.premises += opts.premises || 0;\r\n        trainingUnit.premises = Math.max(minNumOfPremises, Math.min(maxNumOfPremises, trainingUnit.premises));\r\n        trainingUnit.right += opts.right || 0;\r\n        trainingUnit.timeout += opts.timeout || 0;\r\n        trainingUnit.wrong += opts.wrong || 0;\r\n        localStorage.setItem(LS_TRAINING_UNIT + type, JSON.stringify(trainingUnit));\r\n    }\r\n\r\n    restartTrainingUnit(type: EnumQuestionType) {\r\n        const trainingUnit = this.getTrainingUnit(type);\r\n        trainingUnit.right = 0;\r\n        trainingUnit.timeout = 0;\r\n        trainingUnit.wrong = 0;\r\n        localStorage.setItem(LS_TRAINING_UNIT + type, JSON.stringify(trainingUnit));\r\n    }\r\n\r\n    calcTrainingUnitPercentages(type: EnumQuestionType) {\r\n        const trainingUnitLengthLS = localStorage.getItem(LS_TRAINING_UNIT_LENGTH);\r\n        const trainingUnitLength = Number(trainingUnitLengthLS) || DEFAULT_TRAINING_UNIT_LENGTH;\r\n        const { right, timeout, wrong } = this.getTrainingUnit(type);\r\n        const percentageRight = Math.max(0, Math.min(1, right / trainingUnitLength)) * 100;\r\n        const percentageTimeout = Math.max(0, Math.min(1, timeout / trainingUnitLength)) * 100;\r\n        const percentageWrong = Math.max(0, Math.min(1, wrong / trainingUnitLength)) * 100;\r\n        return {\r\n            right,\r\n            timeout,\r\n            wrong,\r\n            percentageRight,\r\n            percentageTimeout,\r\n            percentageWrong\r\n        };\r\n    }\r\n}","import { Injectable } from '@angular/core';\r\nimport { SyllogimousService } from './syllogimous.service';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class StatsExportService {\r\n    constructor(\r\n        private sylSrv: SyllogimousService\r\n    ) {}\r\n\r\n    private formatDateTime(timestamp: number): string {\r\n        return new Date(timestamp).toLocaleDateString(\"sv\") + \" \" + new Date(timestamp).toLocaleTimeString(\"sv\");\r\n    }\r\n\r\n    private getTimerSetting(timerTypeOnAnswer: string): string {\r\n        switch(timerTypeOnAnswer) {\r\n            case \"0\": return \"No Timer\";\r\n            case \"1\": return \"Custom Timer\";\r\n            case \"2\": return \"Adaptive Timer\";\r\n            default: return \"Unknown\";\r\n        }\r\n    }\r\n\r\n    exportStats() {\r\n        const questions = [...this.sylSrv.questions]\r\n            .sort((a, b) => a.createdAt - b.createdAt);\r\n            \r\n        // Create CSV header\r\n        let csvContent = [\r\n            \"ID\",\r\n            \"Timestamp\",\r\n            \"Mode\",\r\n            \"Type\",\r\n            \"Number of Premises\",\r\n            \"Time Taken (seconds)\",\r\n            \"Correct Answer\",\r\n            \"User Answer\",\r\n            \"Result\",\r\n            \"Timer Setting\",\r\n            \"User Score\",\r\n            \"Has Negation\",\r\n            \"Has Meta Relations\",\r\n            \"Negation Count\",\r\n            \"Meta Relations Count\"\r\n        ].join(\",\") + \"\\n\";\r\n\r\n        let lastArcadeScore = 0;\r\n        \r\n        // Add data rows\r\n        questions.forEach((q, index) => {\r\n            const timeTaken = (q.answeredAt - q.createdAt) / 1000;\r\n            if (!q.playgroundMode) {\r\n                lastArcadeScore = q.userScore;\r\n            }\r\n            const row = [\r\n                index + 1,\r\n                this.formatDateTime(q.createdAt),\r\n                q.playgroundMode ? 'Playground' : 'Arcade',\r\n                q.type,\r\n                q.premises.length,\r\n                timeTaken.toFixed(1),\r\n                q.isValid,\r\n                q.userAnswer === undefined ? '- - -' : q.userAnswer,\r\n                q.userAnswer === undefined ? 'Timeout' : (q.userAnswer === q.isValid ? 'Correct' : 'Incorrect'),\r\n                this.getTimerSetting(q.timerTypeOnAnswer),\r\n                q.playgroundMode ? lastArcadeScore : q.userScore,\r\n                q.negations > 0 ? 'Yes' : 'No',\r\n                q.metaRelations > 0 ? 'Yes' : 'No',\r\n                q.negations || 0,\r\n                q.metaRelations || 0\r\n            ];\r\n            csvContent += row.join(',') + '\\n';\r\n        });\r\n\r\n        // Convert to blob and download\r\n        const blob = new Blob([csvContent], { type: 'text/csv' });\r\n        const url = window.URL.createObjectURL(blob);\r\n        const a = document.createElement('a');\r\n        a.setAttribute('hidden', '');\r\n        a.setAttribute('href', url);\r\n        a.setAttribute('download', `syllogimous_history_${new Date().toLocaleDateString(\"sv\")}.csv`);\r\n        document.body.appendChild(a);\r\n        a.click();\r\n        document.body.removeChild(a);\r\n    }\r\n}","import { Injectable } from \"@angular/core\";\r\nimport { SyllogimousService } from \"./syllogimous.service\";\r\nimport { jsonCopy } from \"src/app/utils/json\";\r\nimport { TypeBasedStats } from \"../models/stats.models\";\r\nimport { EnumQuestionType } from \"../constants/question.constants\";\r\n\r\n@Injectable({\r\n    providedIn: \"root\"\r\n})\r\nexport class StatsService {\r\n    constructor(\r\n        public sylSrv: SyllogimousService\r\n    ) { }\r\n\r\n    calcStats = (timerType?: \"0\" | \"1\" | \"2\") => {\r\n        const questions = this.sylSrv.questions.filter(q => q.playgroundMode === !!this.sylSrv.playgroundSettings);\r\n        const types = Object.values(EnumQuestionType).filter(qt => Object.values(EnumQuestionType).includes(qt));\r\n        const typeBasedStats = new TypeBasedStats();\r\n\r\n        for (let type of types) {\r\n            const tbs = typeBasedStats[type];\r\n            const questionsByType = questions.filter(q =>\r\n                q.type === type && (timerType == null || q.timerTypeOnAnswer === timerType)\r\n            );\r\n            \r\n            tbs.type = type;\r\n            tbs.completed = questionsByType.length;\r\n            tbs.accuracy = questionsByType.filter(q => q.userAnswer === q.isValid).length / (questionsByType.length || 1);\r\n\r\n            for (const q of questionsByType) {\r\n                const ps = ((q.premises.length < 6) ? String(q.premises.length) : \"6+\") as \"2\" | \"3\" | \"4\" | \"5\" | \"6+\";\r\n    \r\n                const dt = q.answeredAt - q.createdAt;\r\n    \r\n                tbs.stats[ps].sum += dt;\r\n                tbs.stats[ps].count++;\r\n\r\n                if (q.userAnswer == undefined) {\r\n                    tbs.stats[ps].timeout++;\r\n                } else if (q.userAnswer === q.isValid) {\r\n                    tbs.stats[ps].correct++;\r\n                } else {\r\n                    tbs.stats[ps].incorrect++;\r\n                }\r\n    \r\n                if (q.userAnswer !== undefined) {\r\n                    if (tbs.stats[ps].fastest === 0 || dt < tbs.stats[ps].fastest) {\r\n                        tbs.stats[ps].fastest = dt;\r\n                    }\r\n                    if (tbs.stats[ps].slowest === 0 || dt > tbs.stats[ps].slowest) {\r\n                        tbs.stats[ps].slowest = dt;\r\n                    }\r\n                }\r\n\r\n                // Calculate last 10 questions stats\r\n                if (tbs.stats[ps].last10Count < 10) {\r\n                    tbs.stats[ps].last10Sum += dt;\r\n                    tbs.stats[ps].last10Count++;\r\n\r\n                    if (q.userAnswer == undefined) {\r\n                        tbs.stats[ps].last10Timeout++;\r\n                    } else if (q.userAnswer === q.isValid) {\r\n                        tbs.stats[ps].last10Correct++;\r\n                    } else {\r\n                        tbs.stats[ps].last10Incorrect++;\r\n                    }\r\n        \r\n                    if (q.userAnswer !== undefined) {\r\n                        if (tbs.stats[ps].last10Fastest === 0 || dt < tbs.stats[ps].last10Fastest) {\r\n                            tbs.stats[ps].last10Fastest = dt;\r\n                        }\r\n                        if (tbs.stats[ps].last10Slowest === 0 || dt > tbs.stats[ps].last10Slowest) {\r\n                            tbs.stats[ps].last10Slowest = dt;\r\n                        }\r\n                    }\r\n                }\r\n            };\r\n        }\r\n\r\n        console.log(\"Stats\", { types, typeBasedStats });\r\n\r\n        return { types, questions, typeBasedStats: jsonCopy(typeBasedStats) as TypeBasedStats};\r\n    }\r\n}","import { Injectable } from \"@angular/core\";\r\nimport { IArrangementPremise, IDirection3DProposition, IDirectionProposition, Question } from \"../models/question.models\";\r\nimport { coinFlip, getCircularWays, getLinearWays, getRandomRuleValid, getRandomSymbols, getRelation, getSymbols, isPremiseLikeConclusion, createMetaRelationships, metarelateArrangement, pickUniqueItems, horizontalShuffleArrangement, shuffle, interpolateArrangementRelationship, fixBinaryInstructions, getSyllogism, getRandomRuleInvalid, areGraphsIsomorphic } from \"../utils/question.utils\";\r\nimport { NUMBER_WORDS } from \"../constants/question.constants\";\r\nimport { EnumScreens, EnumTiers, ORDERED_QUESTION_TYPES, ORDERED_TIERS, TIER_SCORE_ADJUSTMENTS, TIER_SCORE_RANGES, TIERS_MATRIX } from \"../constants/syllogimous.constants\";\r\nimport { LS_DONT_SHOW, LS_HISTORY, LS_SCORE, LS_TIMER } from \"../constants/local-storage.constants\";\r\nimport { NgbModal } from \"@ng-bootstrap/ng-bootstrap\";\r\nimport { ModalLevelChangeComponent } from \"../components/modal-level-change/modal-level-change.component\";\r\nimport { Router } from \"@angular/router\";\r\nimport { canGenerateQuestion, QuestionSettings, Settings } from \"../models/settings.models\";\r\nimport { ProgressAndPerformanceService } from \"./progress-and-performance.service\";\r\nimport { guid } from \"src/app/utils/uuid\";\r\nimport { EnumArrangements, EnumQuestionType } from \"../constants/question.constants\";\r\nimport { EnumQuestionGroup, QUESTION_TYPE_SETTING_PARAMS } from \"../constants/settings.constants\";\r\nimport { Logger } from \"../utils/logger\";\r\nimport { GameTimerService } from \"./game-timer.service\";\r\n\r\n@Injectable({\r\n    providedIn: \"root\"\r\n})\r\nexport class SyllogimousService {\r\n    _score = 0;\r\n    history: Question[] = [];\r\n    question;\r\n    playgroundSettings?: Settings;\r\n    logger = new Logger(\"warn\", true);\r\n\r\n    get score() {\r\n        return this._score;\r\n    }\r\n\r\n    set score(value: number) {\r\n        this._score = value;\r\n        localStorage.setItem(LS_SCORE, JSON.stringify(value));\r\n    }\r\n\r\n    get tier() {\r\n        for (const tier of Object.values(EnumTiers)) {\r\n            const range = TIER_SCORE_RANGES[tier];\r\n            if (this.score >= range.minScore && this.score <= range.maxScore) {\r\n                return tier as EnumTiers;\r\n            }\r\n        }\r\n        return EnumTiers.Adept;\r\n    }\r\n\r\n    get settings() {\r\n        return this.playgroundSettings || this.getSettingsFromTier(this.tier);\r\n    }\r\n\r\n    get questions() {\r\n        let questions: Question[] = [];\r\n        const history = localStorage.getItem(LS_HISTORY);\r\n        if (history) {\r\n            questions = JSON.parse(history);\r\n        }\r\n        return questions;\r\n    }\r\n\r\n    constructor(\r\n        private modalService: NgbModal,\r\n        private router: Router,\r\n        private progressAndPerformanceService: ProgressAndPerformanceService,\r\n        private gameTimerService: GameTimerService,\r\n    ) {\r\n        this.loadScore();\r\n        (window as any).syllogimous = this;\r\n\r\n        // Create a first dummy question to avoid null pointer etc...\r\n        const firstDummyQuestion = this.createSyllogism(2);\r\n        firstDummyQuestion.conclusion = \"!\";\r\n        this.question = firstDummyQuestion;\r\n    }\r\n\r\n    loadScore() {\r\n        const lsScore = localStorage.getItem(LS_SCORE);\r\n        if (lsScore) {\r\n            this.score = JSON.parse(lsScore);\r\n        }\r\n    }\r\n\r\n    pushIntoHistory(question: Question) {\r\n        localStorage.setItem(LS_HISTORY, JSON.stringify([question, ...this.questions]));\r\n    }\r\n\r\n    /** Given an EnumTiers value construct a Settings instance */\r\n    getSettingsFromTier(tier: EnumTiers) {\r\n        const tierIdx = ORDERED_TIERS.findIndex(_tier => _tier === tier);\r\n        const settings = new Settings();\r\n\r\n        settings.setEnable(\"negation\", false);\r\n        settings.setEnable(\"meta\", false);\r\n\r\n        for (let i = 0; i < TIERS_MATRIX[tierIdx].length; i++) {\r\n            const questionType = ORDERED_QUESTION_TYPES[i];\r\n            const isActive = !!TIERS_MATRIX[tierIdx][i];\r\n            const numOfPremises = this.progressAndPerformanceService.getTrainingUnit(questionType).premises;\r\n            settings.setQuestionSettings(questionType, isActive, numOfPremises);\r\n        }\r\n\r\n        if (tierIdx > 5) {\r\n            settings.setEnable(\"negation\", true);\r\n        }\r\n\r\n        if (tierIdx > 6) {\r\n            settings.setEnable(\"meta\", true);\r\n        }\r\n\r\n        return settings;\r\n    }\r\n\r\n    /** Given question type and number of premises, returns a question creator function */\r\n    getCreateFn(questionType: EnumQuestionType, numOfPremises: number) {\r\n        return {\r\n            [EnumQuestionType.Distinction]: () => this.createDistinction(numOfPremises),\r\n            [EnumQuestionType.ComparisonNumerical]: () => this.createComparison(numOfPremises, EnumQuestionType.ComparisonNumerical),\r\n            [EnumQuestionType.ComparisonChronological]: () => this.createComparison(numOfPremises, EnumQuestionType.ComparisonChronological),\r\n            [EnumQuestionType.Syllogism]: () => this.createSyllogism(numOfPremises),\r\n            [EnumQuestionType.LinearArrangement]: () => this.createArrangement(numOfPremises, EnumQuestionType.LinearArrangement),\r\n            [EnumQuestionType.CircularArrangement]: () => this.createArrangement(numOfPremises, EnumQuestionType.CircularArrangement),\r\n            [EnumQuestionType.Direction]: () => this.createDirection(numOfPremises),\r\n            [EnumQuestionType.Direction3DSpatial]: () => this.createDirection3D(numOfPremises, EnumQuestionType.Direction3DSpatial),\r\n            [EnumQuestionType.Direction3DTemporal]: () => this.createDirection3D(numOfPremises, EnumQuestionType.Direction3DTemporal),\r\n            [EnumQuestionType.GraphMatching]: () => this.createGraphMatching(numOfPremises),\r\n            [EnumQuestionType.Analogy]: () => this.createAnalogy(numOfPremises),\r\n            [EnumQuestionType.Binary]: () => this.createBinary(numOfPremises),\r\n        }[questionType];\r\n    }\r\n\r\n    /** Return a random question based on the current settings */\r\n    createRandomQuestion(numOfPremises?: number, basic?: boolean) {\r\n        const settings = this.settings;\r\n        this.logger.info(\"Settings\", settings);\r\n\r\n        this.logger.info(\"Training units\", this.progressAndPerformanceService.getAllTrainingUnits());\r\n\r\n        const typeSettingTuples = Object.entries(settings.question) as [EnumQuestionType, QuestionSettings][];\r\n        const getQuestionGroup = (qg?: EnumQuestionGroup) => typeSettingTuples.filter(([qt, qs]) => qs.group == qg);\r\n        const groupsOfQuestions = [\r\n            getQuestionGroup(undefined),\r\n            getQuestionGroup(EnumQuestionGroup.Comparison),\r\n            getQuestionGroup(EnumQuestionGroup.Direction),\r\n            getQuestionGroup(EnumQuestionGroup.Arrangement),\r\n        ];\r\n\r\n        const choices: Array<() => Question> = [];\r\n\r\n        // Pick one question from each group so that the distribution is uniform\r\n        // The \"isUndefinedGroup\" predicate is used to push all ungrouped question into choices\r\n        for (const grouped of groupsOfQuestions) {\r\n            const isUndefinedGroup = grouped === groupsOfQuestions[0];\r\n            const groupChoices: Array<() => Question> = isUndefinedGroup ? choices : [];\r\n            for (const [qt, qs] of grouped) {\r\n                const shouldIncludeQuestion = (basic == undefined) ? true : qs.basic === basic;\r\n                if (qs.enabled && shouldIncludeQuestion) {\r\n                    groupChoices.push(this.getCreateFn(qt, qs.clampNumOfPremises(numOfPremises || qs.getNumOfPremises())));\r\n                }\r\n            }\r\n            if (!isUndefinedGroup && groupChoices.length) {\r\n                choices.push(pickUniqueItems(groupChoices, 1).picked[0]);\r\n            }\r\n        }\r\n\r\n        if (!choices.length) {\r\n            this.logger.warn(\"NO CHOICES AVAILABLE!\");\r\n        }\r\n\r\n        const randomQuestion = pickUniqueItems(choices, 1).picked[0]();\r\n        this.logger.info(\"Random question\", randomQuestion);\r\n        return randomQuestion;\r\n    }\r\n\r\n    skipIntro(dontShowAnymore: boolean) {\r\n        if (dontShowAnymore) {\r\n            localStorage.setItem(LS_DONT_SHOW + EnumScreens.Intro, \"1\")\r\n        }\r\n        this.router.navigate([EnumScreens.Start]);\r\n    }\r\n\r\n    play() {\r\n        this.question = this.createRandomQuestion();\r\n        if (this.playgroundSettings) {\r\n            this.router.navigate([EnumScreens.Game]);\r\n        } else {\r\n            if (!localStorage.getItem(LS_DONT_SHOW + this.question.type)) {\r\n                this.router.navigate([EnumScreens.Tutorial, this.question.type]);\r\n            } else {\r\n                this.router.navigate([EnumScreens.Game]);\r\n            }\r\n        }\r\n    }\r\n\r\n    playArcadeMode() {\r\n        this.playgroundSettings = undefined;\r\n        this.play();\r\n    }\r\n\r\n    skipTutorial(dontShowAnymore: boolean) {\r\n        if (dontShowAnymore) {\r\n            localStorage.setItem(LS_DONT_SHOW + this.question.type, \"1\")\r\n        }\r\n        this.router.navigate([EnumScreens.Game]);\r\n    }\r\n\r\n    async checkQuestion(value?: boolean) {\r\n        this.question.userAnswer = value;\r\n        this.question.answeredAt = Date.now();\r\n        this.question.timerTypeOnAnswer = localStorage.getItem(LS_TIMER) || \"0\";\r\n        this.question.playgroundMode = this.settings === this.playgroundSettings;\r\n\r\n        const type = this.question.type;\r\n        const isQuestionValid = this.question.userAnswer === this.question.isValid;\r\n\r\n        // Playground doesn't progress tiers\r\n        if (!this.question.playgroundMode) {\r\n            if (value == null) {\r\n                this.progressAndPerformanceService.updateTrainingUnit(type, { timeout: 1 });\r\n            } else if (isQuestionValid) {\r\n                this.progressAndPerformanceService.updateTrainingUnit(type, { right: 1 });\r\n            } else {\r\n                this.progressAndPerformanceService.updateTrainingUnit(type, { wrong: 1 });\r\n            }\r\n\r\n            const { right, timeout, wrong } = this.progressAndPerformanceService.calcTrainingUnitPercentages(type);\r\n            const { trainingUnitLength, premisesUpThreshold, premisesDownThreshold } = this.progressAndPerformanceService.getTrainingUnitSettings();\r\n            if (right + timeout + wrong >= trainingUnitLength) {\r\n                this.progressAndPerformanceService.restartTrainingUnit(this.question.type);\r\n                const { premises } = this.progressAndPerformanceService.getTrainingUnit(type);\r\n                const { minNumOfPremises, maxNumOfPremises } = QUESTION_TYPE_SETTING_PARAMS[type];\r\n\r\n                if ((timeout + wrong) / trainingUnitLength >= premisesDownThreshold) {\r\n                    if (premises > minNumOfPremises) {\r\n                        this.gameTimerService.stop();\r\n                        const modalRef = this.modalService.open(ModalLevelChangeComponent, { centered: true });\r\n                        modalRef.componentInstance.title = \"Number of Premises Decreased\";\r\n                        modalRef.componentInstance.content = `Your last <b>${trainingUnitLength}</b> answers for<br><b class=\"modal-level-type\">${type}</b><br>have yielded this results:<div class=\"d-flex flex-row justify-content-center my-3\"><span class=\"p-2\"><b>${right}</b> right</span><span class=\"p-2 border-start border-end\"><b>${timeout}</b> timeout</span><span class=\"p-2\"><b>${wrong}</b> wrong</span></div>The number of premises for<br><b class=\"modal-level-type\">${type}</b><br>has <b>decreased</b> to ${premises - 1}.`;\r\n                        await modalRef.result;\r\n                    }\r\n                    this.progressAndPerformanceService.updateTrainingUnit(type, { premises: -1 });\r\n                } else if (right / trainingUnitLength >= premisesUpThreshold) {\r\n                    if (premises < maxNumOfPremises) {\r\n                        this.gameTimerService.stop();\r\n                        const modalRef = this.modalService.open(ModalLevelChangeComponent, { centered: true });\r\n                        modalRef.componentInstance.title = \"Number of Premises Increased\";\r\n                        modalRef.componentInstance.content = `Your last <b>${trainingUnitLength}</b> answers for<br><b class=\"modal-level-type\">${type}</b><br>have yielded this results:<div class=\"d-flex flex-row justify-content-center my-3\"><span class=\"p-2\"><b>${right}</b> right</span><span class=\"p-2 border-start border-end\"><b>${timeout}</b> timeout</span><span class=\"p-2\"><b>${wrong}</b> wrong</span></div>The number of premises for<br><b class=\"modal-level-type\">${type}</b><br>has <b>increased</b> to ${premises + 1}.`;\r\n                        await modalRef.result;\r\n                    }\r\n                    this.progressAndPerformanceService.updateTrainingUnit(type, { premises: 1 });\r\n                }\r\n            }\r\n\r\n            // Adjust tier based on score\r\n            const currTier = this.tier;\r\n\r\n            let ds = 0;\r\n            if (isQuestionValid) {\r\n                this.score += TIER_SCORE_ADJUSTMENTS[this.tier].increment;\r\n                ds += 1;\r\n            } else {\r\n                this.score = Math.max(0, this.score - TIER_SCORE_ADJUSTMENTS[this.tier].decrement);\r\n                if (this.score > 0) {\r\n                    ds -= 1;\r\n                }\r\n            }\r\n\r\n            this.question.userScore = this.score;\r\n\r\n            const nextTier = this.tier;\r\n\r\n            // Level up/down\r\n            if (currTier !== nextTier) {\r\n                this.gameTimerService.stop();\r\n                const modalRef = this.modalService.open(ModalLevelChangeComponent, { centered: true });\r\n\r\n                if (ds > 0) {\r\n                    modalRef.componentInstance.title = \"Level Up\";\r\n                    modalRef.componentInstance.content = \"Your hard work is paying off.<br>Keep going to unlock more question types and points!\";\r\n                } else if (ds < 0) {\r\n                    modalRef.componentInstance.title = \"Level Down\";\r\n                    modalRef.componentInstance.content = \"Take this as a learning step.<br>Refocus your efforts and you’ll be back on top in no time!\";\r\n                }\r\n            }\r\n        }\r\n\r\n        this.pushIntoHistory(this.question);\r\n\r\n        this.progressAndPerformanceService.setDailyProgress(\r\n            this.progressAndPerformanceService.getToday(),\r\n            this.question.answeredAt - this.question.createdAt\r\n        );\r\n\r\n        this.router.navigate([EnumScreens.Feedback]);\r\n    }\r\n\r\n    createSyllogism(numOfPremises: number) {\r\n        this.logger.info(\"createSyllogism\");\r\n\r\n        const type = EnumQuestionType.Syllogism;\r\n        const settings = this.settings;\r\n\r\n        if (!canGenerateQuestion(type, numOfPremises, settings)) {\r\n            throw new Error(\"Cannot generate.\");\r\n        }\r\n\r\n        const length = numOfPremises + 1;\r\n        const question = new Question(type);\r\n        question.isValid = coinFlip();\r\n\r\n        do {\r\n            question.rule = question.isValid ? getRandomRuleValid() : getRandomRuleInvalid();\r\n            question.bucket = getRandomSymbols(settings, length);\r\n            question.premises = [];\r\n\r\n            [\r\n                question.premises[0],\r\n                question.premises[1],\r\n                question.conclusion\r\n            ] = getSyllogism(\r\n                settings,\r\n                question.bucket[0],\r\n                question.bucket[1],\r\n                question.bucket[2],\r\n                question.isValid ? getRandomRuleValid() : getRandomRuleInvalid()\r\n            );\r\n        } while (isPremiseLikeConclusion(question.premises, question.conclusion));\r\n\r\n        for (let i = 3; i < length; i++) {\r\n            const rnd = Math.floor(Math.random() * (i - 1));\r\n            const flip = coinFlip();\r\n            const [p, m] = flip ? [question.bucket[i], question.bucket[rnd]] : [question.bucket[rnd], question.bucket[i]];\r\n            question.premises.push(getSyllogism(settings, \"#####\", p, m, getRandomRuleInvalid())[0]);\r\n        }\r\n\r\n        shuffle(question.premises);\r\n\r\n        return question;\r\n    }\r\n\r\n    createDistinction(numOfPremises: number): Question {\r\n        this.logger.info(\"createDistinction\");\r\n\r\n        const type = EnumQuestionType.Distinction;\r\n        const settings = this.settings;\r\n\r\n        if (!canGenerateQuestion(type, numOfPremises, settings)) {\r\n            throw new Error(\"Cannot generate.\");\r\n        }\r\n\r\n        const length = numOfPremises + 1;\r\n        const symbols = getRandomSymbols(settings, length);\r\n        const question = new Question(type);\r\n\r\n        do {\r\n            const rnd = Math.floor(Math.random() * symbols.length);\r\n            const first = symbols.splice(rnd, 1)\r\n            let prev = first;\r\n            let curr: string[] = [];\r\n\r\n            question.buckets = [[prev], []];\r\n            let prevBucket = 0;\r\n\r\n            question.premises = [];\r\n\r\n            for (let i = 0; i < length - 1; i++) {\r\n                const rnd = Math.floor(Math.random() * symbols.length);\r\n                curr = symbols.splice(rnd, 1);\r\n\r\n                const isSameAs = coinFlip();\r\n                const relation = getRelation(settings, type, isSameAs);\r\n\r\n                question.premises.push(`<span class=\"subject\">${prev}</span> is ${relation} <span class=\"subject\">${curr}</span>`);\r\n\r\n                if (!isSameAs) {\r\n                    prevBucket = (prevBucket + 1) % 2;\r\n                }\r\n\r\n                question.buckets[prevBucket].push(curr);\r\n\r\n                prev = curr;\r\n            }\r\n\r\n            // All same is useless, in that case repeat\r\n            if (!question.buckets[0].length || !question.buckets[1].length) {\r\n                return this.createDistinction(numOfPremises);\r\n            }\r\n\r\n            createMetaRelationships(settings, question, length);\r\n\r\n            const isSameAs = coinFlip();\r\n            const relation = getRelation(settings, type, isSameAs);\r\n\r\n            question.conclusion = `<span class=\"subject\">${first}</span> is ${relation} <span class=\"subject\">${curr}</span>`;\r\n            question.isValid = isSameAs\r\n                ? question.buckets[0].includes(curr)\r\n                : question.buckets[1].includes(curr);\r\n        } while (isPremiseLikeConclusion(question.premises, question.conclusion));\r\n\r\n        shuffle(question.premises);\r\n\r\n        return question;\r\n    }\r\n\r\n    createComparison(numOfPremises: number, type: EnumQuestionType.ComparisonNumerical | EnumQuestionType.ComparisonChronological) {\r\n        this.logger.info(\"createComparison:\", type);\r\n\r\n        const settings = this.settings;\r\n\r\n        if (!canGenerateQuestion(type, numOfPremises, settings)) {\r\n            throw new Error(\"Cannot generate.\");\r\n        }\r\n\r\n        const length = numOfPremises + 1;\r\n        const question = new Question(type);\r\n\r\n        do {\r\n            question.bucket = getRandomSymbols(settings, length);\r\n            question.premises = [];\r\n            const sign = [-1, 1][Math.floor(Math.random() * 2)];\r\n\r\n            let next = \"\";\r\n\r\n            for (let i = 0; i < length - 1; i++) {\r\n                const curr = question.bucket[i];\r\n                next = question.bucket[i + 1];\r\n\r\n                const isMoreOrAfter = coinFlip();\r\n                const [first, last] = ((sign === 1) === isMoreOrAfter) ? [next, curr] : [curr, next];\r\n                const relation = getRelation(settings, type, isMoreOrAfter);\r\n\r\n                question.premises.push(`<span class=\"subject\">${first}</span> is ${relation} <span class=\"subject\">${last}</span>`);\r\n            }\r\n\r\n            createMetaRelationships(settings, question, length);\r\n\r\n            const a = Math.floor(Math.random() * question.bucket.length);\r\n            let b = Math.floor(Math.random() * question.bucket.length);\r\n            while (a === b) {\r\n                b = Math.floor(Math.random() * question.bucket.length);\r\n            }\r\n\r\n            const isMoreOrAfter = coinFlip();\r\n            const relation = getRelation(settings, type, isMoreOrAfter);\r\n\r\n            question.conclusion = `<span class=\"subject\">${question.bucket[a]}</span> is ${relation} <span class=\"subject\">${question.bucket[b]}</span>`;\r\n            question.isValid = isMoreOrAfter\r\n                ? sign === 1 && a > b || sign === -1 && a < b\r\n                : sign === 1 && a < b || sign === -1 && a > b;\r\n        } while (isPremiseLikeConclusion(question.premises, question.conclusion));\r\n\r\n        shuffle(question.premises);\r\n\r\n        return question;\r\n    }\r\n\r\n    createArrangement(numOfPremises: number, type: EnumQuestionType.LinearArrangement | EnumQuestionType.CircularArrangement): Question {\r\n        this.logger.info(\"createArrangement:\", type);\r\n\r\n        const settings = this.settings;\r\n\r\n        if (!canGenerateQuestion(type, numOfPremises, settings)) {\r\n            throw new Error(\"Cannot generate.\");\r\n        }\r\n\r\n        const numOfEls = numOfPremises + 1;\r\n        const isLinear = type === EnumQuestionType.LinearArrangement;\r\n        const getWays = isLinear ? getLinearWays : getCircularWays;\r\n        const symbols = getSymbols(settings);\r\n        const words = pickUniqueItems(symbols, numOfEls).picked;\r\n        const question = new Question(type);\r\n        question.instructions = [];\r\n        question.instructions.push(`There are <b>${NUMBER_WORDS[numOfEls] || numOfEls} subjects</b> along a <b>${isLinear ? \"linear\" : \"circular\"}</b> path.`);\r\n\r\n        const relationshipAlreadyExistent = (a: string, b: string) =>\r\n            premises.find(({ a: pA, b: pB }) => (pA === a && pB === b) || (pA === b && pB === a));\r\n\r\n        let premises: IArrangementPremise[] = [];\r\n        let subjects = [...words];\r\n        let a: string | undefined = undefined;\r\n        let safe = 1e2;\r\n        while (safe-- && premises.length < numOfEls - 1) {\r\n            let premise: IArrangementPremise | undefined = undefined;\r\n            let safe = 1e2;\r\n            while (safe-- && premise == undefined) {\r\n                // Pick A\r\n                a = a || pickUniqueItems(subjects, 1).picked[0];\r\n                this.logger.info(\"a\", a);\r\n                const aid = words.indexOf(a);\r\n\r\n                // Pick B\r\n                const b = pickUniqueItems(subjects.filter(sub => sub !== a), 1).picked[0];\r\n                this.logger.info(\"b\", b);\r\n                const bid = words.indexOf(b);\r\n\r\n                // Pick a way between A and B and check there are no connections already established between A and B\r\n                const [wayDescription, wayData] = pickUniqueItems(Object.entries(getWays(aid, bid, numOfEls)), 1).picked[0];\r\n                if (wayData.possible && !relationshipAlreadyExistent(a, b)) {\r\n                    premise = {\r\n                        a,\r\n                        b,\r\n                        relationship: {\r\n                            description: wayDescription as EnumArrangements,\r\n                            steps: wayData.steps\r\n                        },\r\n                        metaRelationships: [],\r\n                        uid: guid()\r\n                    };\r\n                    subjects = subjects.filter(s => s !== a && s !== b)\r\n                    a = b;\r\n                }\r\n            }\r\n            if (safe <= 0) {\r\n                throw new Error(\"MAXIMUM ITERATION COUNT REACHED!\");\r\n            }\r\n            premises.push(premise!);\r\n        }\r\n        if (safe <= 0) {\r\n            throw new Error(\"MAXIMUM ITERATION COUNT REACHED!\");\r\n        }\r\n\r\n        horizontalShuffleArrangement(premises);\r\n        shuffle(premises);\r\n        metarelateArrangement(premises);\r\n\r\n        let b: string | undefined = undefined;\r\n        safe = 1e2;\r\n        while (safe-- && b == undefined) {\r\n            const subject = pickUniqueItems(words, 1).picked[0];\r\n            if (subject !== a && !relationshipAlreadyExistent(a!, subject)) {\r\n                b = subject;\r\n            }\r\n        }\r\n        if (safe <= 0) {\r\n            throw new Error(\"MAXIMUM ITERATION COUNT REACHED!\");\r\n        }\r\n\r\n        const [aid, bid] = [words.indexOf(a!), words.indexOf(b!)];\r\n        const ways = getWays(aid, bid, numOfEls, true);\r\n        this.logger.info(\"a\", a);\r\n        this.logger.info(\"a\", b);\r\n        this.logger.info(\"ways\", ways);\r\n\r\n        question.isValid = coinFlip();\r\n        const conclusions = Object.entries(ways).filter(([description, data]) => data.possible === question.isValid);\r\n        const picked = pickUniqueItems(conclusions, 1).picked[0];\r\n        const description = picked[0] as EnumArrangements;\r\n        const steps = picked[1].steps;\r\n        const interpolated = interpolateArrangementRelationship({ description, steps }, settings);\r\n        question.conclusion = `<span class=\"subject\">${a}</span> ${interpolated} <span class=\"subject\">${b}</span>`;\r\n\r\n        // Next to relationship with 3 elements are useless, in that case regenerate\r\n        if (!isLinear && numOfEls === 3 && interpolated === EnumArrangements.Next) {\r\n            return this.createArrangement(numOfPremises, type);\r\n        }\r\n\r\n        question.rule = words.join(\", \");\r\n        const metaRelationshipLookupMap: Record<string, boolean> = {};\r\n        question.premises = premises.map(({ a, b, relationship, metaRelationships, uid }) => {\r\n            if (settings.enabled.meta && coinFlip() && metaRelationships.length && !metaRelationshipLookupMap[uid]) {\r\n                const premise = pickUniqueItems(metaRelationships, 1).picked[0];\r\n                metaRelationshipLookupMap[premise.uid] = true;\r\n                return `<span class=\"subject\">${a}</span> to <span class=\"subject\">${b}</span> has the same relation as <span class=\"subject\">${premise.a}</span> to <span class=\"subject\">${premise.b}</span>`;\r\n            }\r\n\r\n            const { description, steps } = relationship;\r\n            const interpolated = interpolateArrangementRelationship({ description, steps }, settings);\r\n            return `<span class=\"subject\">${a}</span> ${interpolated} <span class=\"subject\">${b}</span>`;\r\n        });\r\n\r\n        return question;\r\n    }\r\n\r\n    createDirection(numOfPremises: number): Question {\r\n        this.logger.info(\"createDirection\");\r\n\r\n        const type = EnumQuestionType.Direction;\r\n        const settings = this.settings;\r\n\r\n        if (!canGenerateQuestion(type, numOfPremises, settings)) {\r\n            throw new Error(\"Cannot generate.\");\r\n        }\r\n\r\n        const numOfEls = numOfPremises + 1;\r\n        const symbols = getSymbols(settings);\r\n        const words = pickUniqueItems(symbols, numOfEls).picked;\r\n        const question = new Question(type);\r\n\r\n        const sideSize = 1 + Math.round(Math.sqrt(numOfEls));\r\n\r\n        const cardinalOppositeMap: Record<string, string> = {\r\n            \"North\": \"South\",\r\n            \"South\": \"North\",\r\n            \"East\": \"West\",\r\n            \"West\": \"East\"\r\n        };\r\n\r\n        // Give random coords to each subject\r\n        const coords: [string, number, number][] = [];\r\n        let pool = [...words];\r\n        while (pool.length) {\r\n            let ri: number | undefined;\r\n            let rj: number | undefined;\r\n            while (ri == null || rj == null || coords.find(([_, x, y]) => ri === x && rj === y)) {\r\n                ri = Math.floor(Math.random() * sideSize);\r\n                rj = Math.floor(Math.random() * sideSize);\r\n            }\r\n            const { picked, remaining } = pickUniqueItems(pool, 1);\r\n            coords.push([picked[0], ri, rj]);\r\n            pool = remaining;\r\n        }\r\n        question.coords = coords;\r\n        this.logger.info(\"Coords\", coords);\r\n\r\n        // Create pairs of subjects\r\n        let copyOfCoords = [...coords];\r\n        const pairs: [typeof coords[0], typeof coords[0]][] = [];\r\n        const pairAlreadyEstablished = (a: string, b: string) =>\r\n            pairs.find(([x, y]) => (x[0] === a && y[0] === b) || (x[0] === b && y[0] === a));\r\n        for (let i = 0; i < numOfEls - 1; i++) {\r\n            const { picked, remaining } = pickUniqueItems(copyOfCoords, 1);\r\n            const subject = i === 0\r\n                ? pickUniqueItems(remaining, 1).picked[0]\r\n                : pickUniqueItems(pairs, 1).picked[0][Math.floor(Math.random() * 2)];\r\n            const a = picked[0][0];\r\n            const b = subject[0];\r\n            if (a === b || pairAlreadyEstablished(a, b)) {\r\n                i--;\r\n                continue;\r\n            }\r\n            pairs.push([picked[0], subject]);\r\n            copyOfCoords = remaining;\r\n        }\r\n\r\n        const usedCoords = Object.values(\r\n            pairs.reduce((a, c) => {\r\n                a[c[0][0]] = c[0];\r\n                a[c[1][0]] = c[1];\r\n                return a;\r\n            }, {} as Record<string, typeof coords[0]>)\r\n        );\r\n\r\n        // Add one more pair that will represent the conclusion\r\n        let coorda!: typeof coords[0];\r\n        let coordb!: typeof coords[0];\r\n        let safe = 1e2;\r\n        while (safe-- && (!coorda || !coordb || pairAlreadyEstablished(coorda[0], coordb[0]))) {\r\n            [coorda, coordb] = pickUniqueItems(usedCoords, 2).picked;\r\n        }\r\n\r\n        if (safe < 1) {\r\n            this.logger.error(\"MAXIMUM ITERATION COUNT REACHED!\");\r\n            return this.createDirection(numOfPremises);\r\n        }\r\n\r\n        pairs.push([coorda, coordb]);\r\n        this.logger.info(\"Pairs\", pairs);\r\n\r\n        // Calculate cardinals and relationship of each pair\r\n        const premises: IDirectionProposition[] = [];\r\n\r\n        const getRelationship = (cardinals: [string, number][], tweaked = false) => {\r\n            let relationship = \"\";\r\n\r\n            if (!tweaked && cardinals.every(c => c[1] === 1)) {\r\n                relationship = \"adjacent and \" + cardinals[0][0];\r\n\r\n                if (cardinals.length === 2) {\r\n                    relationship += \"-\" + cardinals[1][0];\r\n                }\r\n            } else {\r\n                const numStepsVertical = NUMBER_WORDS[cardinals[0][1]] || cardinals[0][1];\r\n                relationship = numStepsVertical + \" step\" + (cardinals[0][1] > 1 ? \"s\" : \"\") + \" \" + cardinals[0][0];\r\n\r\n                if (cardinals.length === 2) {\r\n                    const numStepsHorizontal = NUMBER_WORDS[cardinals[1][1]] || cardinals[1][1];\r\n                    relationship += \" and \" + numStepsHorizontal + \" step\" + (cardinals[1][1] > 1 ? \"s\" : \"\") + \" \" + cardinals[1][0];\r\n                }\r\n            }\r\n\r\n            return relationship;\r\n        };\r\n\r\n        for (const pair of pairs) {\r\n            const [subja, subjb] = pair;\r\n            const [a, ax, ay] = subja;\r\n            const [b, bx, by] = subjb;\r\n\r\n            const cardinals: [string, number][] = [];\r\n            const diffy = ay - by;\r\n            const absdiffy = Math.abs(diffy);\r\n            const diffx = ax - bx;\r\n            const absdiffx = Math.abs(diffx);\r\n\r\n            if (diffy > 0) {\r\n                cardinals.push([\"North\", absdiffy]);\r\n            } else if (diffy < 0) {\r\n                cardinals.push([\"South\", absdiffy]);\r\n            }\r\n\r\n            if (diffx > 0) {\r\n                cardinals.push([\"East\", absdiffx]);\r\n            } else if (diffx < 0) {\r\n                cardinals.push([\"West\", absdiffx]);\r\n            }\r\n\r\n            premises.push({\r\n                pair,\r\n                cardinals,\r\n                relationship: getRelationship(cardinals),\r\n                uid: guid()\r\n            })\r\n        }\r\n        this.logger.info(\"Premises\", premises);\r\n\r\n        // Sanity check, this fixes a bug with analogy questions\r\n        if (new Set(premises.map(x => x.pair[0][0])).size !== coords.length) {\r\n            this.logger.error(\"Missing subject in premises\");\r\n            return this.createDirection(numOfPremises);\r\n        }\r\n\r\n        // Extract the last premise and say it's the conclusion\r\n        // Flip a coin and either keep or tweak the conclusion\r\n        let conclusion = premises.pop()!;\r\n        let tweaked = false;\r\n        const isValid = coinFlip();\r\n        if (isValid) {\r\n            this.logger.info(\"Keep conclusion\");\r\n            if (coinFlip() && conclusion.cardinals.length === 2) {\r\n                this.logger.info(\"One cardinal got plucked\");\r\n                conclusion.cardinals = [pickUniqueItems(conclusion.cardinals, 1).picked[0]];\r\n                tweaked = true;\r\n            }\r\n        } else {\r\n            this.logger.info(\"Tweak conclusion\");\r\n            const rndIdx = Math.floor(Math.random() * conclusion.cardinals.length);\r\n            if (coinFlip()) {\r\n                this.logger.info(\"Add one to one cardinal\");\r\n                conclusion.cardinals[rndIdx][1]++;\r\n            } else {\r\n                this.logger.info(\"One cardinal flipped\");\r\n                conclusion.cardinals[rndIdx][0] = cardinalOppositeMap[conclusion.cardinals[rndIdx][0]];\r\n            }\r\n            tweaked = true;\r\n        }\r\n        // Regenerate conclusion relationship\r\n        conclusion.relationship = getRelationship(conclusion.cardinals, tweaked);\r\n        this.logger.info(\"Conclusion\", conclusion);\r\n\r\n        const negateRelationship = (relationship: string) => {\r\n            return relationship.replaceAll(/(north|south|east|west)/gi, substr => {\r\n                if (coinFlip()) {\r\n                    question.negations++;\r\n                    return `<span class=\"is-negated\">${cardinalOppositeMap[substr]}</span>`;\r\n                }\r\n                return substr;\r\n            });\r\n        };\r\n\r\n        const stringifyProposition = (p: IDirectionProposition) => {\r\n            const relationship = settings.enabled.negation ? negateRelationship(p.relationship) : p.relationship;\r\n            return `<span class=\"subject\">${p.pair[0][0]}</span> is ${relationship} of <span class=\"subject\">${p.pair[1][0]}</span>`;\r\n        };\r\n\r\n        shuffle(premises);\r\n        question.isValid = isValid;\r\n        question.premises = premises.map(stringifyProposition);\r\n        question.conclusion = stringifyProposition(conclusion);\r\n\r\n        // TODO: Create meta relationship\r\n\r\n        return question;\r\n    }\r\n\r\n    createDirection3D(numOfPremises: number, type: EnumQuestionType.Direction3DSpatial | EnumQuestionType.Direction3DTemporal): Question {\r\n        this.logger.info(\"createDirection3D\");\r\n\r\n        const settings = this.settings;\r\n\r\n        if (!canGenerateQuestion(type, numOfPremises, settings)) {\r\n            throw new Error(\"Cannot generate.\");\r\n        }\r\n\r\n        const numOfEls = numOfPremises + 1;\r\n        const symbols = getSymbols(settings);\r\n        const words = pickUniqueItems(symbols, numOfEls).picked;\r\n        const question = new Question(type);\r\n        const isSpatial = type === EnumQuestionType.Direction3DSpatial;\r\n\r\n        const sideSize = 1 + Math.round(Math.cbrt(numOfEls));\r\n\r\n        const trasversalOpposite: Record<string, string> = {\r\n            \"before\": \"after\",\r\n            \"after\": \"before\",\r\n            \"below\": \"above\",\r\n            \"above\": \"below\"\r\n        };\r\n        const cardinalOppositeMap: Record<string, string> = {\r\n            \"North\": \"South\",\r\n            \"South\": \"North\",\r\n            \"East\": \"West\",\r\n            \"West\": \"East\"\r\n        };\r\n\r\n        // Give random coords to each subject\r\n        const coords: [string, number, number, number][] = [];\r\n        const alreadyHasCoords = (ri: number, rj: number, rk: number) => {\r\n            return coords.find(([_, x, y, k]) =>\r\n                ri === x && rj === y && rk === k\r\n            );\r\n        };\r\n        let pool = [...words];\r\n        while (pool.length) {\r\n            let ri: number | undefined;\r\n            let rj: number | undefined;\r\n            let rt: number | undefined;\r\n            while (ri == null || rj == null || rt == null || alreadyHasCoords(ri, rj, rt)) {\r\n                ri = Math.floor(Math.random() * sideSize);\r\n                rj = Math.floor(Math.random() * sideSize);\r\n                rt = Math.floor(Math.random() * sideSize);\r\n            }\r\n            const { picked, remaining } = pickUniqueItems(pool, 1);\r\n            coords.push([picked[0], ri, rj, rt]);\r\n            pool = remaining;\r\n        }\r\n        this.logger.info(\"All coords\", coords);\r\n\r\n        // Create pairs of subjects\r\n        let copyOfCoords = [...coords];\r\n        const pairs: [typeof coords[0], typeof coords[0]][] = [];\r\n        const subjectsAlreadyIncluded = (a: string, b: string) =>\r\n            pairs.find(([x, y]) => (x[0] === a && y[0] === b) || (x[0] === b && y[0] === a));\r\n        for (let i = 0; i < numOfEls - 1; i++) {\r\n            const { picked, remaining } = pickUniqueItems(copyOfCoords, 1);\r\n            const subject = i === 0\r\n                ? pickUniqueItems(remaining, 1).picked[0]\r\n                : pickUniqueItems(pairs, 1).picked[0][Math.floor(Math.random() * 2)];\r\n            const a = picked[0][0];\r\n            const b = subject[0];\r\n            if (a === b || subjectsAlreadyIncluded(a, b)) {\r\n                i--;\r\n                continue;\r\n            }\r\n            pairs.push([picked[0], subject]);\r\n            copyOfCoords = remaining;\r\n        }\r\n\r\n        const usedCoords = Object.values(\r\n            pairs.reduce((a, c) => {\r\n                a[c[0][0]] = c[0];\r\n                a[c[1][0]] = c[1];\r\n                return a;\r\n            }, {} as Record<string, typeof coords[0]>)\r\n        );\r\n        question.coords3D = usedCoords;\r\n        this.logger.info(\"Used coords\", usedCoords);\r\n\r\n        // Add one more pair that will represent the conclusion\r\n        let coorda!: typeof coords[0];\r\n        let coordb!: typeof coords[0];\r\n        let safe = 1e2;\r\n        while (safe-- && (!coorda || !coordb || subjectsAlreadyIncluded(coorda[0], coordb[0]))) {\r\n            [coorda, coordb] = pickUniqueItems(usedCoords, 2).picked;\r\n        }\r\n\r\n        if (safe < 1) {\r\n            this.logger.error(\"MAXIMUM ITERATION COUNT REACHED!\");\r\n            return this.createDirection3D(numOfPremises, type);\r\n        }\r\n\r\n        pairs.push([coorda, coordb]);\r\n        this.logger.info(\"Pairs\", pairs);\r\n\r\n        // Calculate relationship of each pair\r\n        const premises: IDirection3DProposition[] = [];\r\n\r\n        const getTrasversalRelationship = (tdiff: number) => {\r\n            const absdiff = Math.abs(tdiff);\r\n            const s = (absdiff > 1) ? \"s\" : \"\";\r\n            const n = NUMBER_WORDS[absdiff] || absdiff;\r\n            if (isSpatial) {\r\n                if (tdiff === 0) {\r\n                    return \"on the same level\";\r\n                } else if (tdiff < 0) {\r\n                    return `${n} level${s} below`;\r\n                } else {\r\n                    return `${n} level${s} above`;\r\n                }\r\n            } else {\r\n                if (tdiff === 0) {\r\n                    return \"at the same time\";\r\n                } else if (tdiff < 0) {\r\n                    return `${n} hour${s} before`;\r\n                } else {\r\n                    return `${n} hour${s} after`;\r\n                }\r\n            }\r\n        };\r\n\r\n        const SAME_CARDINAL_DIRECTION = \"in the same cardinal position\";\r\n        const getCardinalRelationship = (_cardinals: [string, number][]) => {\r\n            if (_cardinals.every(c => c[1] === 0)) {\r\n                return SAME_CARDINAL_DIRECTION;\r\n            }\r\n\r\n            const cardinals = _cardinals.filter(c => c[1] !== 0);\r\n\r\n            let relationship = \"\";\r\n            const numStepsVertical = NUMBER_WORDS[cardinals[0][1]] || cardinals[0][1];\r\n            const s = cardinals[0][1] > 1 ? \"s\" : \"\";\r\n\r\n            relationship = `${numStepsVertical} step${s} ${cardinals[0][0]}`;\r\n\r\n            if (cardinals.length === 2) {\r\n                const numStepsHorizontal = NUMBER_WORDS[cardinals[1][1]] || cardinals[1][1];\r\n                const s = cardinals[1][1] > 1 ? \"s\" : \"\";\r\n\r\n                relationship += ` and ${numStepsHorizontal} step${s} ${cardinals[1][0]}`;\r\n            }\r\n\r\n            return relationship;\r\n        };\r\n\r\n        for (const pair of pairs) {\r\n            const [subja, subjb] = pair;\r\n            const [a, ax, ay, at] = subja;\r\n            const [b, bx, by, bt] = subjb;\r\n\r\n            const trasversalDifference = at - bt;\r\n\r\n            const cardinals: [string, number][] = [];\r\n            const diffy = ay - by;\r\n            const absdiffy = Math.abs(diffy);\r\n            const diffx = ax - bx;\r\n            const absdiffx = Math.abs(diffx);\r\n\r\n            if (diffy > 0) {\r\n                cardinals.push([\"North\", absdiffy]);\r\n            } else if (diffy < 0) {\r\n                cardinals.push([\"South\", absdiffy]);\r\n            } else {\r\n                cardinals.push([\"!\", 0]);\r\n            }\r\n\r\n            if (diffx > 0) {\r\n                cardinals.push([\"East\", absdiffx]);\r\n            } else if (diffx < 0) {\r\n                cardinals.push([\"West\", absdiffx]);\r\n            } else {\r\n                cardinals.push([\"!\", 0]);\r\n            }\r\n\r\n            const trasversalRelationship = getTrasversalRelationship(trasversalDifference);\r\n            const cardinalRelationship = getCardinalRelationship(cardinals);\r\n            const connector = (cardinalRelationship === SAME_CARDINAL_DIRECTION) ? \" and \" : (cardinalRelationship.indexOf(\" and \") > -1) ? \", \" : \" and \";\r\n            const relationship = trasversalRelationship + connector + cardinalRelationship;\r\n\r\n            premises.push({\r\n                pair,\r\n                trasversalDifference,\r\n                cardinals,\r\n                relationship,\r\n                uid: guid()\r\n            })\r\n        }\r\n        this.logger.info(\"Premises\", premises);\r\n\r\n        // Extract the last premise and say it's the conclusion\r\n        // Flip a coin and either keep or tweak the conclusion\r\n        let conclusion = premises.pop()!;\r\n        const isValid = coinFlip();\r\n        if (isValid) {\r\n            this.logger.info(\"Keep conclusion\");\r\n\r\n            // Filter out collinear cardinals\r\n            conclusion.cardinals = conclusion.cardinals.filter(c => c[0] !== \"!\");\r\n\r\n            if (coinFlip() && conclusion.cardinals.length === 2) {\r\n                this.logger.info(\"Cardinal pluck before\", JSON.stringify(conclusion.cardinals, null, 2));\r\n                conclusion.cardinals = [pickUniqueItems(conclusion.cardinals, 1).picked[0]];\r\n                this.logger.info(\"Cardinal pluck after\", JSON.stringify(conclusion.cardinals, null, 2));\r\n            }\r\n        } else {\r\n            this.logger.info(\"Tweak conclusion\");\r\n\r\n            if (coinFlip()) {\r\n                this.logger.info(\"Invert trasversal difference\");\r\n                conclusion.trasversalDifference = conclusion.trasversalDifference * -1;\r\n            }\r\n\r\n            // Filter out collinear cardinals and zero cardinals\r\n            conclusion.cardinals = conclusion.cardinals.filter(c => c[0] !== \"!\" && c[1] !== 0);\r\n\r\n            if (!conclusion.cardinals.length) {\r\n                return this.createDirection3D(numOfPremises, type);\r\n            }\r\n\r\n            const rndIdx = Math.floor(Math.random() * conclusion.cardinals.length);\r\n\r\n            if (coinFlip()) {\r\n                this.logger.info(\"One cardinal flipped\");\r\n                conclusion.cardinals[rndIdx][0] = cardinalOppositeMap[conclusion.cardinals[rndIdx][0]];\r\n            } else {\r\n                this.logger.info(\"Add one to one cardinal\");\r\n                conclusion.cardinals[rndIdx][1]++;\r\n            }\r\n        }\r\n\r\n        // Regenerate conclusion relationship\r\n        conclusion.trasversalDifference = conclusion.pair[0][3] - conclusion.pair[1][3];\r\n        const trasversalRelationship = getTrasversalRelationship(conclusion.trasversalDifference);\r\n        const cardinalRelationship = getCardinalRelationship(conclusion.cardinals);\r\n        const connector = (cardinalRelationship === SAME_CARDINAL_DIRECTION) ? \" and \" : (cardinalRelationship.indexOf(\" and \") > -1) ? \", \" : \" and \";\r\n        conclusion.relationship = trasversalRelationship + connector + cardinalRelationship;\r\n        this.logger.info(\"Conclusion\", conclusion);\r\n\r\n        const negateRelationship = (relationship: string) => {\r\n            return relationship\r\n                .replaceAll(/(before|after|below|above)/gi, substr => {\r\n                    if (coinFlip()) {\r\n                        question.negations++;\r\n                        return `<span class=\"is-negated\">${trasversalOpposite[substr]}</span>`;\r\n                    }\r\n                    return substr;\r\n                })\r\n                .replaceAll(/(north|south|east|west)/gi, substr => {\r\n                    if (coinFlip()) {\r\n                        question.negations++;\r\n                        return `<span class=\"is-negated\">${cardinalOppositeMap[substr]}</span>`;\r\n                    }\r\n                    return substr;\r\n                });\r\n        };\r\n\r\n        const stringifyProposition = (p: IDirection3DProposition) => {\r\n            const relationship = settings.enabled.negation ? negateRelationship(p.relationship) : p.relationship;\r\n            return `<span class=\"subject\">${p.pair[0][0]}</span> is ${relationship} of <span class=\"subject\">${p.pair[1][0]}</span>`;\r\n        };\r\n\r\n        shuffle(premises);\r\n        question.isValid = isValid;\r\n        question.premises = premises.map(stringifyProposition);\r\n        question.conclusion = stringifyProposition(conclusion);\r\n\r\n        // TODO: Create meta relationship\r\n\r\n        return question;\r\n    }\r\n\r\n    createGraphMatching(numOfPremises: number): Question {\r\n        this.logger.info(\"createGraphMatching\");\r\n\r\n        const type = EnumQuestionType.GraphMatching;\r\n        const settings = this.settings;\r\n\r\n        if (!canGenerateQuestion(type, numOfPremises, settings)) {\r\n            throw new Error(\"Cannot generate.\");\r\n        }\r\n\r\n        const numOfEls = numOfPremises + 1;\r\n        const symbols = getSymbols(settings);\r\n        const words = pickUniqueItems(symbols, numOfEls).picked;\r\n        const question = new Question(type);\r\n\r\n        let edgeList: [string, \"↔\" | \"→\" | \"←\", string][] = [];\r\n        const inverseMap = { \"→\": \"←\", \"←\": \"→\" } as Record<\"→\" | \"←\", | \"→\" | \"←\">;\r\n        const _words = [...words];\r\n        const isWordUsed = (w: string) => edgeList.reduce((a, c) => (a.add(c[0]), a.add(c[2]), a), new Set() as Set<string>).has(w);\r\n        const notAllUsed = () => _words.some(w => !isWordUsed(w));\r\n        const edgeAlreadyExists = (a: string, b: string) => edgeList.some(([_a, _, _b]) => (_a === a && _b === b) || (_a === b && _b === a));\r\n        let safe = 1e3;\r\n        while (safe-- && notAllUsed()) {\r\n            const [a, b] = pickUniqueItems(_words, 2).picked;\r\n            if (edgeAlreadyExists(a, b)) {\r\n                continue;\r\n            }\r\n            const newEdge = (Math.random() < 0.25)\r\n                ? [a, \"↔\", b]\r\n                : coinFlip()\r\n                    ? [a, \"→\", b]\r\n                    : [a, \"←\", b];\r\n            edgeList.push(newEdge as [string, \"↔\" | \"→\" | \"←\", string]);\r\n            if (_words.length > 2 && coinFlip()) {\r\n                const subject = coinFlip() ? a : b;\r\n                const foundIdx = _words.indexOf(subject);\r\n                _words.splice(foundIdx, 1);\r\n            }\r\n        }\r\n        if (safe <= 0) {\r\n            throw new Error(\"MAXIMUM NUMBER OF ITERATIONS REACHED!\");\r\n        }\r\n\r\n        const edgeDiscrepancyCount = edgeList.length !== numOfPremises;\r\n        const all3ElementsAre2Way = numOfEls === 3 && edgeList.every(([a, rel, b]) => rel === \"↔\");\r\n        if (edgeDiscrepancyCount || all3ElementsAre2Way) {\r\n            return this.createGraphMatching(numOfPremises);\r\n        }\r\n\r\n        const newWords = pickUniqueItems(symbols, numOfEls).picked;\r\n        let edgeList2: typeof edgeList = edgeList.map(([a, rel, b]) => ([\r\n            newWords[words.indexOf(a)],\r\n            rel,\r\n            newWords[words.indexOf(b)]\r\n        ]));\r\n\r\n        question.isValid = coinFlip();\r\n        if (!question.isValid) {\r\n            this.logger.info(\"Modifying graph in an invalid way\");\r\n\r\n            while (areGraphsIsomorphic(edgeList, edgeList2)) {\r\n                const { picked } = pickUniqueItems(edgeList2, 1);\r\n                const [a, rel, b] = picked[0];\r\n\r\n                if (rel === \"→\" || rel === \"←\") {\r\n                    if (Math.random() < 0.15) {\r\n                        this.logger.info(\"Swap 1-way for 2-way\");\r\n                        picked[0][1] = \"↔\";\r\n                    } else if (coinFlip()) {\r\n                        this.logger.info(\"Rotate 1-way direction\");\r\n                        picked[0][1] = inverseMap[picked[0][1] as \"→\" | \"←\"] as \"→\" | \"←\";\r\n                    }\r\n                } else if (Math.random() < 0.15) {\r\n                    this.logger.info(\"Swap 2-way for 1-way\");\r\n                    picked[0][1] = { \"true\": \"→\", \"false\": \"←\" }[String(coinFlip())] as \"→\" | \"←\";\r\n                }\r\n\r\n                if (coinFlip() && numOfEls > 3) {\r\n                    const rndBool = coinFlip();\r\n                    const bool2subject: Record<string, number> = { \"true\": 0, \"false\": 2 };\r\n                    const subjectPosIdx = bool2subject[String(rndBool)];\r\n                    const subjectNegIdx = bool2subject[String(!rndBool)];\r\n                    const { picked: picked2 } = pickUniqueItems(edgeList2, 1);\r\n                    let picked;\r\n                    while (!picked || picked === picked2[0][subjectPosIdx] || picked === picked2[0][subjectNegIdx]) {\r\n                        picked = pickUniqueItems(newWords, 1).picked[0];\r\n                    }\r\n                    this.logger.info(\"Change an edge by connecting a/b to a different subject\", [picked2[0][subjectPosIdx], picked]);\r\n                    picked2[0][subjectPosIdx] = picked;\r\n                }\r\n            }\r\n        }\r\n\r\n        const horizontalShuffle = (_edgeList: typeof edgeList) =>\r\n            _edgeList.map(([a, rel, b]) => {\r\n                this.logger.info(\"Before\", [a, rel, b]);\r\n                let result;\r\n                if (coinFlip() && (rel === \"→\" || rel === \"←\")) {\r\n                    result = [b, inverseMap[rel], a];\r\n                } else {\r\n                    result = [a, rel, b];\r\n                }\r\n                this.logger.info(\"After\", result);\r\n                return result;\r\n            }) as typeof edgeList;\r\n\r\n        shuffle(edgeList);\r\n        edgeList = horizontalShuffle(edgeList);\r\n        question.graphPremises = edgeList;\r\n        this.logger.info(\"EdgeList\", edgeList);\r\n\r\n        shuffle(edgeList2);\r\n        edgeList2 = horizontalShuffle(edgeList2);\r\n        question.graphConclusion = edgeList2;\r\n        this.logger.info(\"EdgeList2\", edgeList2);\r\n\r\n        const usedEdges = new Set<string>();\r\n        const readable = (edges: typeof edgeList, edge: typeof edgeList[0], negated = false, meta = false) => {\r\n            const getSubject = (subject: string) => `<span class=\"subject\">${subject}</span>`;\r\n            const readMap = {\r\n                \"→\": \"goes to\",\r\n                \"←\": \"comes from\",\r\n                \"↔\": \"is connected to\"\r\n            };\r\n            let relationship = readMap[edge[1]];\r\n            let isMetaRelated = false;\r\n            if (meta) {\r\n                const getEdgeKey = (edge: typeof edgeList[0]) => [...edge].join(\";\");\r\n                const edgeKey = getEdgeKey(edge);\r\n                const pickedEdge = pickUniqueItems(edges, 1).picked[0];\r\n                const pickedEdgeKey = getEdgeKey(pickedEdge);\r\n                if (\r\n                    !usedEdges.has(pickedEdgeKey) &&\r\n                    edgeKey !== pickedEdgeKey &&\r\n                    edge[1] === pickedEdge[1]\r\n                ) {\r\n                    usedEdges.add(edgeKey);\r\n                    usedEdges.add(pickedEdgeKey);\r\n                    if (coinFlip() && edge[1] !== \"↔\") {\r\n                        relationship = `the inverse of ${getSubject(pickedEdge[2])} to ${getSubject(pickedEdge[0])}`;\r\n                    } else {\r\n                        relationship = `${getSubject(pickedEdge[0])} is to ${getSubject(pickedEdge[2])}`;\r\n                    }\r\n                    isMetaRelated = true;\r\n                    this.logger.info(\"Metarelated\");\r\n                    question.metaRelations++;\r\n                }\r\n            } else if (negated && (edge[1] === \"→\" || edge[1] === \"←\")) {\r\n                this.logger.info(\"Negated\");\r\n                question.negations++;\r\n                relationship = `<span class=\"is-negated\">${readMap[inverseMap[edge[1]]]}</span>`;\r\n            }\r\n            return isMetaRelated\r\n                ? `${getSubject(edge[0])} is to ${getSubject(edge[2])} as ${relationship}`\r\n                : `${getSubject(edge[0])} ${relationship} ${getSubject(edge[2])}`;\r\n        };\r\n\r\n        question.premises = edgeList.map((edge, _, edges) =>\r\n            readable(\r\n                edges,\r\n                edge,\r\n                settings.enabled.negation && coinFlip(),\r\n                settings.enabled.meta && coinFlip()\r\n            )\r\n        );\r\n        question.conclusion = edgeList2.map((edge, _, edges) =>\r\n            readable(\r\n                edges,\r\n                edge,\r\n                settings.enabled.negation && coinFlip(),\r\n                settings.enabled.meta && coinFlip()\r\n            ));\r\n\r\n        question.instructions = [\r\n            \"Check isomorphism between premise and conclusion graphs.\"\r\n        ];\r\n\r\n        return question;\r\n    }\r\n\r\n    createAnalogy(length: number) {\r\n        this.logger.info(\"createAnalogy\");\r\n\r\n        const topType = EnumQuestionType.Analogy;\r\n        const settings = this.settings;\r\n\r\n        if (!canGenerateQuestion(topType, length, settings)) {\r\n            throw new Error(\"Cannot generate.\");\r\n        }\r\n\r\n        const choiceIndices = [];\r\n        if (settings.question[EnumQuestionType.Distinction].enabled) {\r\n            choiceIndices.push(0);\r\n        }\r\n\r\n        // Randomly pick one comparison question from the comparison questions enabled\r\n        const comparisonChoices = [];\r\n        if (settings.question[EnumQuestionType.ComparisonNumerical].enabled) {\r\n            comparisonChoices.push(1);\r\n        }\r\n        if (settings.question[EnumQuestionType.ComparisonChronological].enabled) {\r\n            comparisonChoices.push(2);\r\n        }\r\n        if (comparisonChoices.length) {\r\n            choiceIndices.push(pickUniqueItems(comparisonChoices, 1).picked[0]);\r\n        }\r\n\r\n        // Randomly pick one direction question from the direction questions enabled\r\n        const directionsChoices = [];\r\n        if (settings.question[EnumQuestionType.Direction].enabled) {\r\n            directionsChoices.push(3);\r\n        }\r\n        if (settings.question[EnumQuestionType.Direction3DSpatial].enabled) {\r\n            directionsChoices.push(4);\r\n        }\r\n        if (settings.question[EnumQuestionType.Direction3DTemporal].enabled) {\r\n            directionsChoices.push(5);\r\n        }\r\n        if (directionsChoices.length) {\r\n            choiceIndices.push(pickUniqueItems(directionsChoices, 1).picked[0]);\r\n        }\r\n\r\n        // Randomly pick one arrangement from enabled arrangements\r\n        const arrangementChoices = [];\r\n        if (settings.question[EnumQuestionType.LinearArrangement].enabled) {\r\n            arrangementChoices.push(6);\r\n        }\r\n        if (settings.question[EnumQuestionType.CircularArrangement].enabled) {\r\n            arrangementChoices.push(7);\r\n        }\r\n        if (arrangementChoices.length) {\r\n            choiceIndices.push(pickUniqueItems(arrangementChoices, 1).picked[0]);\r\n        }\r\n\r\n        const choiceIndex = pickUniqueItems(choiceIndices, 1).picked[0];\r\n\r\n        let question = new Question(topType);\r\n        let isValidSame;\r\n        let a, b, c, d;\r\n        let indexOfA, indexOfB, indexOfC, indexOfD;\r\n\r\n        const flip = coinFlip();\r\n\r\n        switch (choiceIndex) {\r\n            case 0:\r\n                question = this.createDistinction(length);\r\n                question.type = topType;\r\n                question.conclusion = \"\";\r\n\r\n                [a, b, c, d] = pickUniqueItems([...question.buckets[0], ...question.buckets[1]], 4).picked;\r\n                question.conclusion += `<span class=\"subject\">${a}</span> to <span class=\"subject\">${b}</span>`;\r\n\r\n                [\r\n                    indexOfA,\r\n                    indexOfB,\r\n                    indexOfC,\r\n                    indexOfD\r\n                ] = [\r\n                        Number(question.buckets[0].indexOf(a) !== -1),\r\n                        Number(question.buckets[0].indexOf(b) !== -1),\r\n                        Number(question.buckets[0].indexOf(c) !== -1),\r\n                        Number(question.buckets[0].indexOf(d) !== -1)\r\n                    ];\r\n                isValidSame = (indexOfA === indexOfB && indexOfC === indexOfD) || (indexOfA !== indexOfB && indexOfC !== indexOfD);\r\n                break;\r\n            case 1:\r\n            case 2:\r\n                const type = (choiceIndex === 1)\r\n                    ? EnumQuestionType.ComparisonNumerical\r\n                    : EnumQuestionType.ComparisonChronological;\r\n                question = this.createComparison(length, type);\r\n                question.type = topType;\r\n                question.conclusion = \"\";\r\n\r\n                [a, b, c, d] = pickUniqueItems(question.bucket, 4).picked;\r\n                question.conclusion += `<span class=\"subject\">${a}</span> to <span class=\"subject\">${b}</span>`;\r\n\r\n                [indexOfA, indexOfB] = [question.bucket.indexOf(a), question.bucket.indexOf(b)];\r\n                [indexOfC, indexOfD] = [question.bucket.indexOf(c), question.bucket.indexOf(d)];\r\n                isValidSame = (indexOfA > indexOfB && indexOfC > indexOfD) || (indexOfA < indexOfB && indexOfC < indexOfD);\r\n                break;\r\n            case 3:\r\n                while (flip !== isValidSame) {\r\n                    question = this.createDirection(length);\r\n                    question.type = topType;\r\n                    question.conclusion = \"\";\r\n\r\n                    const [coordsa, coordsb, coordsc, coordsd] = pickUniqueItems(question.coords, 4).picked;\r\n                    [a, b, c, d] = [coordsa[0], coordsb[0], coordsc[0], coordsd[0]];\r\n                    question.conclusion += `<span class=\"subject\">${a}</span> to <span class=\"subject\">${b}</span>`;\r\n\r\n                    const dxatob = coordsa[1] - coordsb[1];\r\n                    const dyatob = coordsa[2] - coordsb[2];\r\n\r\n                    const dxctod = coordsc[1] - coordsd[1];\r\n                    const dyctod = coordsc[2] - coordsd[2];\r\n\r\n                    isValidSame = (dxatob === dxctod) && (dyatob === dyctod);\r\n                }\r\n                break;\r\n            case 4:\r\n            case 5: {\r\n                const type = (choiceIndex === 4)\r\n                    ? EnumQuestionType.Direction3DSpatial\r\n                    : EnumQuestionType.Direction3DTemporal;\r\n                while (flip !== isValidSame) {\r\n                    question = this.createDirection3D(length, type);\r\n                    question.type = topType;\r\n                    question.conclusion = \"\";\r\n\r\n                    const [coordsa, coordsb, coordsc, coordsd] = pickUniqueItems(question.coords3D, 4).picked;\r\n                    [a, b, c, d] = [coordsa[0], coordsb[0], coordsc[0], coordsd[0]];\r\n                    question.conclusion += `<span class=\"subject\">${a}</span> to <span class=\"subject\">${b}</span>`;\r\n\r\n                    const dxatob = coordsa[1] - coordsb[1];\r\n                    const dyatob = coordsa[2] - coordsb[2];\r\n                    const dtatob = coordsa[3] - coordsb[3];\r\n\r\n                    const dxctod = coordsc[1] - coordsd[1];\r\n                    const dyctod = coordsc[2] - coordsd[2];\r\n                    const dtctod = coordsc[3] - coordsd[3];\r\n\r\n                    isValidSame = (dxatob === dxctod) && (dyatob === dyctod) && (dtatob === dtctod);\r\n                }\r\n                break;\r\n            }\r\n            case 6:\r\n            case 7: {\r\n                const type = (choiceIndex === 6)\r\n                    ? EnumQuestionType.LinearArrangement\r\n                    : EnumQuestionType.CircularArrangement;\r\n                const isLinear = type === EnumQuestionType.LinearArrangement;\r\n                question = this.createArrangement(length, type);\r\n                question.type = topType;\r\n                question.conclusion = \"\";\r\n                question.notes = [];\r\n                if (isLinear) {\r\n                    question.notes.push(\"Proximity makes the relationship alike.\");\r\n                } else {\r\n                    question.notes.push(\"Proximity and diametrical opposition makes the relationship alike.\");\r\n                }\r\n\r\n                const subjects = question.rule.split(\", \");\r\n                [a, b, c, d] = pickUniqueItems(subjects, 4).picked;\r\n                question.conclusion += `<span class=\"subject\">${a}</span> to <span class=\"subject\">${b}</span>`;\r\n\r\n                const [idxA, idxB, idxC, idxD] = [\r\n                    subjects.indexOf(a),\r\n                    subjects.indexOf(b),\r\n                    subjects.indexOf(c),\r\n                    subjects.indexOf(d)\r\n                ];\r\n\r\n                const getWays = isLinear ? getLinearWays : getCircularWays;\r\n\r\n                const waysA2B = getWays(idxA, idxB, length + 1, true);\r\n                const waysC2D = getWays(idxC, idxD, length + 1, true);\r\n\r\n                isValidSame = false;\r\n                for (const key in waysA2B) {\r\n                    if (waysA2B[key].possible && waysC2D[key].possible) {\r\n                        isValidSame = true;\r\n                    }\r\n                }\r\n                this.logger.info('Is a valid \"same\" relationship?', isValidSame);\r\n\r\n                break;\r\n            }\r\n        }\r\n\r\n        if (isValidSame === undefined) {\r\n            throw new Error(\"Shouldn't be here...\");\r\n        }\r\n\r\n        const isSameRelationship = coinFlip();\r\n        question.isValid = isSameRelationship ? isValidSame : !isValidSame;\r\n\r\n        if (settings.enabled.negation && coinFlip()) {\r\n            question.negations++;\r\n            question.conclusion += `<div class=\"analogy-conclusion is-negated\">is ${isSameRelationship ? 'unlike' : 'alike'}</div>`;\r\n        } else {\r\n            question.conclusion += `<div class=\"analogy-conclusion\">is ${isSameRelationship ? 'alike' : 'unlike'}</div>`;\r\n        }\r\n\r\n        question.conclusion += `<span class=\"subject\">${c}</span> to <span class=\"subject\">${d}</span>`;\r\n\r\n        return question;\r\n    }\r\n\r\n    createBinary(numOfPremises: number) {\r\n        this.logger.info(\"createBinary\");\r\n\r\n        const topType = EnumQuestionType.Binary;\r\n        const settings = this.settings;\r\n\r\n        if (!canGenerateQuestion(topType, numOfPremises, settings)) {\r\n            throw new Error(\"Cannot generate.\");\r\n        }\r\n\r\n        const operands = [];\r\n        const operandNames = [];\r\n        const operandTemplates = [];\r\n\r\n        if (settings.enabled.binary.and) {\r\n            operands.push(\"a&&b\");\r\n            operandNames.push(\"AND\");\r\n            operandTemplates.push('$a <div class=\"is-connector\">and</div> $b');\r\n        }\r\n        if (settings.enabled.binary.nand) {\r\n            operands.push(\"!(a&&b)\");\r\n            operandNames.push(\"NAND\");\r\n            operandTemplates.push('$a <div class=\"is-connector\">and</div> $b <div class=\"is-connector\">are not both true</div>');\r\n        }\r\n        if (settings.enabled.binary.or) {\r\n            operands.push(\"a||b\");\r\n            operandNames.push(\"OR\");\r\n            operandTemplates.push('$a <div class=\"is-connector\">or</div> $b');\r\n        }\r\n        if (settings.enabled.binary.nor) {\r\n            operands.push(\"!(a||b)\");\r\n            operandNames.push(\"NOR\");\r\n            operandTemplates.push('$a <div class=\"is-connector\">and</div> $b <div class=\"is-connector\">are both false</div>');\r\n        }\r\n        if (settings.enabled.binary.xor) {\r\n            operands.push(\"!(a&&b)&&(a||b)\");\r\n            operandNames.push(\"XOR\");\r\n            operandTemplates.push('$a <div class=\"is-connector\">differs from</div> $b');\r\n        }\r\n        if (settings.enabled.binary.xnor) {\r\n            operands.push(\"!(!(a&&b)&&(a||b))\");\r\n            operandNames.push(\"XNOR\");\r\n            operandTemplates.push('$a <div class=\"is-connector\">is equal to</div> $b');\r\n        }\r\n\r\n        const question = new Question(topType);\r\n        const flip = coinFlip();\r\n        const operandIndex = Math.floor(Math.random() * operands.length);\r\n        const operand = operands[operandIndex];\r\n\r\n        let safe = 1e2;\r\n        do {\r\n            const a = this.createRandomQuestion(Math.floor(numOfPremises / 2), true);\r\n            const b = this.createRandomQuestion(Math.ceil(numOfPremises / 2), true);\r\n            const choices = [a, b];\r\n\r\n            question.instructions = [fixBinaryInstructions(a), fixBinaryInstructions(b)].filter(instr => !!instr);\r\n\r\n            question.premises = [...choices[0].premises, ...choices[1].premises];\r\n            shuffle(question.premises);\r\n\r\n            question.conclusion = operandTemplates[operandIndex]\r\n                .replace(\"$a\", Array.isArray(choices[0].conclusion) ? choices[0].conclusion[0] : choices[0].conclusion)\r\n                .replace(\"$b\", Array.isArray(choices[1].conclusion) ? choices[1].conclusion[0] : choices[1].conclusion);\r\n\r\n            question.isValid = eval(\r\n                operand\r\n                    .replaceAll(\"a\", String(choices[0].isValid))\r\n                    .replaceAll(\"b\", String(choices[1].isValid))\r\n            );\r\n        } while (safe-- && flip !== question.isValid);\r\n\r\n        if (safe <= 0) {\r\n            throw new Error(\"MAXIMUM NUMBER OF ITERATIONS REACHED!\");\r\n        }\r\n\r\n        return question;\r\n    }\r\n}","import { Component, HostBinding } from \"@angular/core\";\r\n\r\n@Component({\r\n    selector: \"app-syllogimous\",\r\n    templateUrl: \"./syllogimous.component.html\",\r\n    styleUrls: [\"./syllogimous.component.scss\"]\r\n})\r\nexport class SyllogimousComponent {\r\n    ngAfterViewInit() {\r\n        const greatTitle = document.querySelector(\".great-title\") as HTMLElement;\r\n        if (greatTitle) {\r\n            greatTitle.style.marginBottom = \"-50px\";\r\n            const t = setInterval(() => {\r\n                if (!parseInt(greatTitle.style.marginBottom)) {\r\n                    return clearInterval(t);\r\n                }\r\n                greatTitle.style.marginBottom = (parseInt(greatTitle.style.marginBottom) + 1) + \"px\";\r\n            }, 10);\r\n        }\r\n    }\r\n}","<router-outlet class=\"d-none\"></router-outlet>","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { SyllogimousComponent } from './syllogimous.component';\r\nimport { SharedModule } from 'src/app/shared/shared.module';\r\nimport { ModalLevelChangeComponent } from './components/modal-level-change/modal-level-change.component';\r\nimport { CardComponent } from './components/card/card.component';\r\nimport { IntroComponent } from './pages/intro/intro.component';\r\nimport { StartComponent } from './pages/start/start.component';\r\nimport { TutorialComponent } from './pages/tutorial/tutorial.component';\r\nimport { HistoryComponent } from './pages/history/history.component';\r\nimport { GameComponent } from './pages/game/game.component';\r\nimport { FeedbackComponent } from './pages/feedback/feedback.component';\r\nimport { StatsComponent } from './pages/stats/stats.component';\r\nimport { TutorialsComponent } from './pages/tutorials/tutorials.component';\r\nimport { TutorialDistinctionComponent } from './pages/tutorial/distinction/distinction.component';\r\nimport { TutorialSyllogismComponent } from './pages/tutorial/syllogism/syllogism.component';\r\nimport { TutorialComparisonNumericalComponent } from './pages/tutorial/comparison-numerical/comparison-numerical.component';\r\nimport { TutorialComparisonChronologicalComponent } from './pages/tutorial/comparison-chronological/comparison-chronological.component';\r\nimport { TutorialDirectionComponent } from './pages/tutorial/direction/direction.component';\r\nimport { TutorialDirection3DSpatialComponent } from './pages/tutorial/direction3D-spatial/direction3D-spatial.component';\r\nimport { TutorialDirection3DTemporalComponent } from './pages/tutorial/direction3D-temporal/direction3D-temporal.component';\r\nimport { TutorialAnalogyComponent } from './pages/tutorial/analogy/analogy.component';\r\nimport { TutorialBinaryComponent } from './pages/tutorial/binary/binary.component';\r\nimport { TutorialLinearArrangementComponent } from './pages/tutorial/linear-arrangement/linear-arrangement.component';\r\nimport { TutorialCircularArrangementComponent } from './pages/tutorial/circular-arrangement/circular-arrangement.component';\r\nimport { AccuracyStatsComponent } from './pages/stats/accuracy-stats/accuracy-stats.component';\r\nimport { ErrorAnalysisComponent } from './pages/stats/error-analysis/error-analysis.component';\r\nimport { TierStatsComponent } from './pages/stats/tier-stats/tier-stats.component';\r\nimport { TimeBasedStatsComponent } from './pages/stats/time-based-stats/time-based-stats.component';\r\nimport { TypeBasedStatsComponent } from './pages/stats/type-based-stats/type-based-stats.component';\r\nimport { StatsExportService } from './services/stats-export.service';\r\nimport { CardDropdownComponent } from './components/card/card-dropdown/card-dropdown.component';\r\nimport { TimerChooseComponent } from './pages/settings/timer-choose/timer-choose.component';\r\nimport { PlaygroundModeComponent } from './pages/playground-mode/playground-mode.component';\r\nimport { DailyProgressComponent } from './components/progress-and-performance/progress-and-performance.component';\r\nimport { GameModeChooseComponent } from './pages/settings/game-mode-choose/game-mode-choose.component';\r\nimport { EnumQuestionType } from './constants/question.constants';\r\nimport { EnumScreens } from './constants/syllogimous.constants';\r\nimport { TiersMatrixComponent } from './pages/tiers-matrix/tiers-matrix.component';\r\nimport { OtherGamesComponent } from './pages/other-games/other-games.component';\r\nimport { SettingsComponent } from './pages/settings/settings.component';\r\nimport { TutorialGraphMatchingComponent } from './pages/tutorial/graph-matching/graph-matching.component';\r\n\r\nconst routes: Routes = [\r\n    {\r\n        path: '',\r\n        component: SyllogimousComponent,\r\n        children: [\r\n            { path: \"\", redirectTo: EnumScreens.Intro, pathMatch: \"full\" },\r\n            { path: EnumScreens.Intro, component: IntroComponent },\r\n            { path: EnumScreens.Start, component: StartComponent },\r\n            { path: EnumScreens.Game, component: GameComponent },\r\n            { path: EnumScreens.Stats, component: StatsComponent },\r\n            { path: EnumScreens.History, component: HistoryComponent },\r\n            { path: EnumScreens.Feedback, component: FeedbackComponent },\r\n            { path: EnumScreens.Settings, component: SettingsComponent },\r\n            { path: EnumScreens.Tutorials, component: TutorialsComponent },\r\n            {\r\n                path: EnumScreens.Tutorial,\r\n                component: TutorialComponent,\r\n                children: [\r\n                    { path: EnumQuestionType.Distinction, component: TutorialDistinctionComponent },\r\n                    { path: EnumQuestionType.ComparisonNumerical, component: TutorialComparisonNumericalComponent },\r\n                    { path: EnumQuestionType.ComparisonChronological, component: TutorialComparisonChronologicalComponent },\r\n                    { path: EnumQuestionType.Syllogism, component: TutorialSyllogismComponent },\r\n                    { path: EnumQuestionType.LinearArrangement, component: TutorialLinearArrangementComponent },\r\n                    { path: EnumQuestionType.CircularArrangement, component: TutorialCircularArrangementComponent },\r\n                    { path: EnumQuestionType.Direction, component: TutorialDirectionComponent },\r\n                    { path: EnumQuestionType.Direction3DSpatial, component: TutorialDirection3DSpatialComponent },\r\n                    { path: EnumQuestionType.Direction3DTemporal, component: TutorialDirection3DTemporalComponent },\r\n                    { path: EnumQuestionType.GraphMatching, component: TutorialGraphMatchingComponent },\r\n                    { path: EnumQuestionType.Analogy, component: TutorialAnalogyComponent },\r\n                    { path: EnumQuestionType.Binary, component: TutorialBinaryComponent },\r\n                ]\r\n            },\r\n            { path: EnumScreens.TiersMatrix, component: TiersMatrixComponent },\r\n            { path: EnumScreens.PlaygroundMode, component: PlaygroundModeComponent },\r\n            { path: EnumScreens.OtherGames, component: OtherGamesComponent },\r\n        ]\r\n    }\r\n];\r\n\r\n@NgModule({\r\n    declarations: [\r\n        SyllogimousComponent,\r\n        CardComponent,\r\n        ModalLevelChangeComponent,\r\n        IntroComponent,\r\n        StartComponent,\r\n        HistoryComponent,\r\n        GameComponent,\r\n        FeedbackComponent,\r\n        TutorialsComponent,\r\n        TutorialComponent,\r\n        TutorialDistinctionComponent,\r\n        TutorialComparisonNumericalComponent,\r\n        TutorialComparisonChronologicalComponent,\r\n        TutorialSyllogismComponent,\r\n        TutorialLinearArrangementComponent,\r\n        TutorialCircularArrangementComponent,\r\n        TutorialDirectionComponent,\r\n        TutorialDirection3DSpatialComponent,\r\n        TutorialDirection3DTemporalComponent,\r\n        TutorialGraphMatchingComponent,\r\n        TutorialAnalogyComponent,\r\n        TutorialBinaryComponent,\r\n        StatsComponent,\r\n        AccuracyStatsComponent,\r\n        ErrorAnalysisComponent,\r\n        TierStatsComponent,\r\n        TimeBasedStatsComponent,\r\n        TypeBasedStatsComponent,\r\n        CardDropdownComponent,\r\n        PlaygroundModeComponent,\r\n        TimerChooseComponent,\r\n        DailyProgressComponent,\r\n        GameModeChooseComponent,\r\n        TiersMatrixComponent,\r\n        OtherGamesComponent,\r\n        SettingsComponent,\r\n    ],\r\n    imports: [\r\n        CommonModule,\r\n        SharedModule,\r\n        RouterModule.forChild(routes),\r\n    ],\r\n    providers: [\r\n        StatsExportService\r\n    ]\r\n})\r\nexport class SyllogimousModule { }","type LogLevel = \"debug\" | \"info\" | \"warn\" | \"error\";\r\n\r\nexport class Logger {\r\n    private level: LogLevel;\r\n    private isVerbose: boolean;\r\n\r\n    constructor(level: LogLevel = \"info\", isVerbose: boolean = false) {\r\n        this.level = level;\r\n        this.isVerbose = isVerbose;\r\n    }\r\n\r\n    setLevel(level: LogLevel): void {\r\n        this.level = level;\r\n    }\r\n\r\n    setVerbose(isVerbose: boolean): void {\r\n        this.isVerbose = isVerbose;\r\n    }\r\n\r\n    private shouldLog(level: LogLevel): boolean {\r\n        const order = { \"debug\": 0, \"info\": 1, \"warn\": 2, \"error\": 3 };\r\n        return order[level] >= order[this.level];\r\n    }\r\n\r\n    log(level: LogLevel, message: string, ...optionalParams: any[]): void {\r\n        if (this.shouldLog(level)) {\r\n            if (this.isVerbose) {\r\n                console.log(`[${level.toUpperCase()}]`, message, ...optionalParams);\r\n            } else {\r\n                console.log(`[${level.toUpperCase()}]`, message);\r\n            }\r\n        }\r\n    }\r\n\r\n    debug(message: string, ...optionalParams: any[]): void {\r\n        this.log(\"debug\", message, ...optionalParams);\r\n    }\r\n\r\n    info(message: string, ...optionalParams: any[]): void {\r\n        this.log(\"info\", message, ...optionalParams);\r\n    }\r\n\r\n    warn(message: string, ...optionalParams: any[]): void {\r\n        this.log(\"warn\", message, ...optionalParams);\r\n    }\r\n\r\n    error(message: string, ...optionalParams: any[]): void {\r\n        this.log(\"error\", message, ...optionalParams);\r\n    }\r\n}\r\n","import { FORMS, NOUNS, NUMBER_WORDS, STRINGS, VALID_RULES } from \"../constants/question.constants\";\r\nimport { EnumArrangements, EnumQuestionType } from \"../constants/question.constants\";\r\nimport { IArrangementPremise, IArrangementRelationship, Question } from \"../models/question.models\";\r\nimport { Settings, Picked } from \"../models/settings.models\";\r\n\r\nexport const b2n = (b: boolean) => +b as number;\r\n\r\nexport function genBinKey(booleans: boolean[]) {\r\n    return booleans.map(value => (value ? '1' : '0')).join('');\r\n}\r\n\r\nexport function coinFlip() {\r\n    return Math.random() > 0.5;\r\n}\r\n\r\nexport function pickUniqueItems<T>(array: T[], n: number): Picked<T> {\r\n    const copy = [...array];\r\n    const picked = [];\r\n    while (n > 0) {\r\n        const rnd = Math.floor(Math.random() * copy.length);\r\n        picked.push(copy.splice(rnd, 1)[0]);\r\n        n--;\r\n    }\r\n    return { picked, remaining: copy };\r\n}\r\n\r\nexport function shuffle<T>(array: T[]) {\r\n    let currentIndex = array.length, randomIndex;\r\n    while (currentIndex != 0) {\r\n        randomIndex = Math.floor(Math.random() * currentIndex);\r\n        currentIndex--;\r\n        [array[currentIndex], array[randomIndex]] = [array[randomIndex], array[currentIndex]];\r\n    }\r\n    return array;\r\n}\r\n\r\nexport function getRandomRuleValid() {\r\n    return VALID_RULES[Math.floor(Math.random() * VALID_RULES.length)];\r\n}\r\n\r\nexport function getRandomRuleInvalid() {\r\n    let rule;\r\n    while (!rule || VALID_RULES.includes(rule)) {\r\n        rule = \"\";\r\n        for (let i = 0; i < 3; i++) {\r\n            rule += Math.floor(Math.random() * 4); // Form\r\n        }\r\n        rule += 1 + Math.floor(Math.random() * 4); // Figure\r\n    }\r\n    return rule;\r\n}\r\n\r\nexport function extractSubjects(phrase: string) {\r\n    return [...phrase.matchAll(/<span class=\"subject\">(.*?)<\\/span>/g)].map(a => a[1]);\r\n}\r\n\r\nexport function isPremiseLikeConclusion(premises: string[], conclusion: string) {\r\n    const subjectsOfPremises = premises.map(p => extractSubjects(p));\r\n    const subjectsOfConclusion = extractSubjects(conclusion);\r\n    for (const subjects of subjectsOfPremises) {\r\n        const toCompare = subjectsOfConclusion[0] + subjectsOfConclusion[1];\r\n        if (subjects[0] + subjects[1] === toCompare || subjects[1] + subjects[0] === toCompare)\r\n            return true;\r\n    }\r\n    return false;\r\n}\r\n\r\nexport function getSymbols(settings: Settings) {\r\n    return settings.enabled.meaningfulWords ? [...NOUNS] : [...STRINGS];\r\n}\r\n\r\nexport function getRandomSymbols(settings: Settings, length: number) {\r\n    const symbols = getSymbols(settings);\r\n    const seen = new Set();\r\n    return Array(length).fill(0)\r\n        .map(() => {\r\n            let rnd = Math.floor(Math.random() * symbols.length);\r\n            while (seen.has(rnd)) {\r\n                rnd = Math.floor(Math.random() * symbols.length);\r\n            }\r\n            seen.add(rnd);\r\n            return symbols[rnd];\r\n        });\r\n}\r\n\r\nexport function getSyllogism(settings: Settings, s: string, p: string, m: string, rule: string) {\r\n\r\n    const _forms = (!settings.enabled.negation)\r\n        ? FORMS[0]\r\n        : pickUniqueItems(FORMS, 1).picked[0];\r\n\r\n    let major = _forms[+rule[0]];\r\n    let minor = _forms[+rule[1]];\r\n    let conclusion = _forms[+rule[2]];\r\n\r\n    const figure = +rule[3];\r\n    switch (figure) {\r\n        case 1:\r\n            major = major.replace(\"$\", m);\r\n            major = major.replace(\"$\", p);\r\n            minor = minor.replace(\"$\", s);\r\n            minor = minor.replace(\"$\", m);\r\n            break;\r\n        case 2:\r\n            major = major.replace(\"$\", p);\r\n            major = major.replace(\"$\", m);\r\n            minor = minor.replace(\"$\", s);\r\n            minor = minor.replace(\"$\", m);\r\n            break;\r\n        case 3:\r\n            major = major.replace(\"$\", m);\r\n            major = major.replace(\"$\", p);\r\n            minor = minor.replace(\"$\", m);\r\n            minor = minor.replace(\"$\", s);\r\n            break;\r\n        case 4:\r\n            major = major.replace(\"$\", p);\r\n            major = major.replace(\"$\", m);\r\n            minor = minor.replace(\"$\", m);\r\n            minor = minor.replace(\"$\", s);\r\n            break;\r\n    }\r\n\r\n    conclusion = conclusion.replace(\"$\", s);\r\n    conclusion = conclusion.replace(\"$\", p);\r\n\r\n    return [major, minor, conclusion];\r\n}\r\n\r\nexport function getMetaReplacer(settings: Settings, choosenPair: Picked<string>, relations: string[], negations: boolean[]) {\r\n    const choosenSubjects = [...choosenPair.picked[0].matchAll(/<span class=\"subject\">(.*?)<\\/span>/g)];\r\n    const [a, b] = choosenSubjects.map(m => m[1]);\r\n\r\n    const isSameAs = (relations[0] === relations[1]) === (negations[0] === negations[1]);\r\n    const relation = getRelation(settings, EnumQuestionType.Distinction, isSameAs);\r\n\r\n    return `$1 ${relation} (<span class=\"subject\">${a}</span> to <span class=\"subject\">${b}</span>) to `;\r\n}\r\n\r\nexport function getRelation(settings: Settings, type: EnumQuestionType, isPositive: boolean) {\r\n    let positive = \"\";\r\n    let negative = \"\";\r\n\r\n    switch (type) {\r\n        case EnumQuestionType.Distinction:\r\n            positive = \"same as\";\r\n            negative = \"opposite of\";\r\n            break;\r\n        case EnumQuestionType.ComparisonNumerical:\r\n            positive = \"more than\";\r\n            negative = \"less than\";\r\n            break;\r\n        case EnumQuestionType.ComparisonChronological:\r\n            positive = \"after\";\r\n            negative = \"before\";\r\n            break;\r\n    }\r\n\r\n    let relation = isPositive ? positive : negative;\r\n    if (settings.enabled.negation && coinFlip()) {\r\n        switch (relation) {\r\n            case positive:\r\n                relation = `<span class=\"is-negated\">${negative}</span>`;\r\n                break;\r\n            case negative:\r\n                relation = `<span class=\"is-negated\">${positive}</span>`;\r\n                break;\r\n        }\r\n    }\r\n    return relation;\r\n}\r\n\r\nexport function createMetaRelationships(settings: Settings, question: Question, length: number) {\r\n    // Substitute a variable number of premises with meta-relations\r\n    if (settings.enabled.meta && coinFlip()) {\r\n        const numOfMetaRelationships = 1 + Math.floor(Math.random() * Math.floor((length - 1) / 2));\r\n        question.metaRelations += numOfMetaRelationships;\r\n\r\n        let subjects: { value: number, subject: string }[] = [];\r\n        if (question.type === EnumQuestionType.Distinction) {\r\n            subjects = question.buckets.reduce((a, c, i) => [...a, ...c.map(b => ({ value: i, subject: b[0] }))], [] as typeof subjects);\r\n        } else {\r\n            subjects = question.bucket.map((c, i, a) => ({ value: (a.length - i), subject: c }), []);\r\n        }\r\n\r\n        const { picked: pickedPremises, remaining: remainingPremises } = pickUniqueItems(question.premises, numOfMetaRelationships);\r\n        const pickedPremisesSubjects = pickedPremises.map(extractSubjects);\r\n        const remainingPremisesSubjects = remainingPremises.map(extractSubjects);\r\n        const bidirectionalRelationshipMap = remainingPremisesSubjects.reduce((acc, [a, b]) => (acc[a] = acc[a] || [], acc[a].push(b), acc[b] = acc[b] || [], acc[b].push(a), acc), {} as { [key: string]: string[] });\r\n        const newPremises = [];\r\n        for (const premiseSubjects of pickedPremisesSubjects) {\r\n            const [a, b] = premiseSubjects.map(ps => subjects.find(s => ps === s.subject)!);\r\n            const { picked } = pickUniqueItems(Object.entries(bidirectionalRelationshipMap), 1);\r\n            let _c = \"\";\r\n            let _d = \"\";\r\n            if (picked[0][1].length > 1) { // Indirect relation\r\n                _c = picked[0][1][0];\r\n                _d = picked[0][1][1];\r\n            } else {\r\n                _c = picked[0][0]; // Direct relation\r\n                _d = picked[0][1][0];\r\n            }\r\n            const c = subjects.find(s => s.subject === _c)!;\r\n            const d = subjects.find(s => s.subject === _d)!;\r\n\r\n            let isSame = false;\r\n            if (question.type === EnumQuestionType.Distinction) {\r\n                isSame = (a.value === b.value) === (c.value === d.value);\r\n            } else {\r\n                isSame = (a.value < b.value) === (c.value < d.value);\r\n            }\r\n\r\n            if (isSame) { // Same\r\n                if (settings.enabled.negation && coinFlip()) {\r\n                    newPremises.push(`<span class=\"subject\">${a.subject}</span> relates to <span class=\"subject\">${b.subject}</span> in the <span class=\"is-negated\">opposite</span> way that <span class=\"subject\">${c.subject}</span> relates to <span class=\"subject\">${d.subject}</span>`);\r\n                } else {\r\n                    newPremises.push(`<span class=\"subject\">${a.subject}</span> relates to <span class=\"subject\">${b.subject}</span> in the same way that <span class=\"subject\">${c.subject}</span> relates to <span class=\"subject\">${d.subject}</span>`);\r\n                }\r\n            } else { // Different\r\n                if (settings.enabled.negation && coinFlip()) {\r\n                    newPremises.push(`<span class=\"subject\">${a.subject}</span> relates to <span class=\"subject\">${b.subject}</span> in the <span class=\"is-negated\">same</span> way that <span class=\"subject\">${c.subject}</span> relates to <span class=\"subject\">${d.subject}</span>`);\r\n                } else {\r\n                    newPremises.push(`<span class=\"subject\">${a.subject}</span> relates to <span class=\"subject\">${b.subject}</span> in the opposite way that <span class=\"subject\">${c.subject}</span> relates to <span class=\"subject\">${d.subject}</span>`);\r\n                }\r\n            }\r\n        }\r\n\r\n        newPremises.push(...remainingPremises);\r\n        question.premises = newPremises;\r\n    }\r\n}\r\n\r\n/** This methods modifies some premises with meta-relationships */\r\nexport function metarelateArrangement(premises: IArrangementPremise[]) {\r\n    premises.forEach(premise => {\r\n        premise.metaRelationships = premises\r\n            .filter(p => p.uid !== premise.uid)\r\n            .filter(p => p.relationship.description === premise.relationship.description && p.relationship.steps === premise.relationship.steps);\r\n    });\r\n}\r\n\r\nexport function horizontalShuffleArrangement(premises: IArrangementPremise[]) {\r\n    const switchSubjects = (premise: IArrangementPremise) =>\r\n        [premise.a, premise.b] = [premise.b, premise.a];\r\n\r\n    premises.forEach(premise => {\r\n        if (premise.relationship && coinFlip()) {\r\n            switch (premise.relationship.description) {\r\n                case EnumArrangements.AdjacentLeft: {\r\n                    premise.relationship.description = EnumArrangements.AdjacentRight;\r\n                    switchSubjects(premise);\r\n                    break;\r\n                }\r\n                case EnumArrangements.AdjacentRight: {\r\n                    premise.relationship.description = EnumArrangements.AdjacentLeft;\r\n                    switchSubjects(premise);\r\n                    break;\r\n                }\r\n                case EnumArrangements.NStepsLeft: {\r\n                    premise.relationship.description = EnumArrangements.NStepsRight;\r\n                    switchSubjects(premise);\r\n                    break;\r\n                }\r\n                case EnumArrangements.NStepsRight: {\r\n                    premise.relationship.description = EnumArrangements.NStepsLeft;\r\n                    switchSubjects(premise);\r\n                    break;\r\n                }\r\n                case EnumArrangements.Next: {\r\n                    switchSubjects(premise);\r\n                    break;\r\n                }\r\n                case EnumArrangements.InFront: {\r\n                    switchSubjects(premise);\r\n                    break;\r\n                }\r\n                case EnumArrangements.Left: {\r\n                    premise.relationship.description = EnumArrangements.Right;\r\n                    switchSubjects(premise);\r\n                    break;\r\n                }\r\n                case EnumArrangements.Right: {\r\n                    premise.relationship.description = EnumArrangements.Left;\r\n                    switchSubjects(premise);\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    });\r\n}\r\n\r\nexport function getLinearWays(i: number, j: number, numOfEls: number, forConclusion = false) {\r\n    const isAdjLeft = i + 1 === j;\r\n    const isAdjRight = i - 1 === j;\r\n    const isNext = isAdjLeft || isAdjRight;\r\n    const isLeft = i < j;\r\n    const isRight = i > j;\r\n    const steps = Math.abs(i - j);\r\n\r\n    const ways: Record<string, { possible: boolean, steps: number }> = {\r\n        [EnumArrangements.AdjacentLeft]: {\r\n            possible: isAdjLeft,\r\n            steps\r\n        },\r\n        [EnumArrangements.AdjacentRight]: {\r\n            possible: isAdjRight,\r\n            steps\r\n        },\r\n        [EnumArrangements.NStepsLeft]: {\r\n            possible: isLeft,\r\n            steps\r\n        },\r\n        [EnumArrangements.NStepsRight]: {\r\n            possible: isRight,\r\n            steps\r\n        },\r\n    };\r\n\r\n    if (forConclusion) {\r\n        ways[EnumArrangements.Next] = {\r\n            possible: isNext,\r\n            steps\r\n        };\r\n        ways[EnumArrangements.Left] = {\r\n            possible: isLeft,\r\n            steps: -Infinity\r\n        };\r\n        ways[EnumArrangements.Right] = {\r\n            possible: isRight,\r\n            steps: -Infinity\r\n        };\r\n    }\r\n\r\n    return ways;\r\n};\r\n\r\nexport function getCircularWays(i: number, j: number, numOfEls: number, forConclusion = false) {\r\n    const getAdjLeft = (i: number) => (numOfEls + (i + 1)) % numOfEls;\r\n    const getAdjRight = (i: number) => (numOfEls + (i - 1)) % numOfEls;\r\n    const getInFront = (i: number) => (i + (numOfEls / 2)) % numOfEls;\r\n    const getCWDist = (i: number, j: number) => (j - i + numOfEls) % numOfEls;\r\n    const getCCWDist = (i: number, j: number) => numOfEls - getCWDist(i, j);\r\n\r\n    // Set i to 0 and calc j relative to that\r\n    j = (numOfEls + (j - i)) % numOfEls;\r\n    i = 0;\r\n\r\n    const isAdjLeft = getAdjLeft(i) === j;\r\n    const isAdjRight = getAdjRight(i) === j;\r\n    const isNext = isAdjLeft || isAdjRight;\r\n    const isLeft = j < getInFront(i);\r\n    const isRight = j > getInFront(i);\r\n    const steps = Math.min(getCWDist(i, j), getCCWDist(i, j));\r\n\r\n    const ways: Record<string, { possible: boolean, steps: number }> = {\r\n        [EnumArrangements.AdjacentLeft]: {\r\n            possible: isAdjLeft,\r\n            steps\r\n        },\r\n        [EnumArrangements.AdjacentRight]: {\r\n            possible: isAdjRight,\r\n            steps\r\n        },\r\n        [EnumArrangements.NStepsLeft]: {\r\n            possible: isLeft || steps === (numOfEls / 2),\r\n            steps\r\n        },\r\n        [EnumArrangements.NStepsRight]: {\r\n            possible: isRight || steps === (numOfEls / 2),\r\n            steps\r\n        },\r\n    };\r\n\r\n    // Even num of els do have diametrically opposite els\r\n    if (numOfEls % 2 === 0) {\r\n        ways[EnumArrangements.InFront] = {\r\n            possible: getInFront(i) === j,\r\n            steps\r\n        };\r\n    }\r\n\r\n    if (forConclusion) {\r\n        ways[EnumArrangements.Next] = {\r\n            possible: isNext,\r\n            steps\r\n        };\r\n        ways[EnumArrangements.Left] = {\r\n            possible: isLeft,\r\n            steps: -Infinity\r\n        };\r\n        ways[EnumArrangements.Right] = {\r\n            possible: isRight,\r\n            steps: -Infinity\r\n        };\r\n    }\r\n\r\n    return ways;\r\n};\r\n\r\nexport function interpolateArrangementRelationship(relationship: IArrangementRelationship, settings: Settings) {\r\n    const numWord = NUMBER_WORDS[relationship.steps];\r\n\r\n    const interpolatedWithSteps = relationship.description.replace(/# steps/, () =>\r\n        relationship.steps === 1\r\n            ? \" adjacent and\"\r\n            : ((numWord || relationship.steps) + \" steps\")\r\n    );\r\n\r\n    if (settings.enabled.negation && coinFlip()) {\r\n        // TODO: This method should return the number of negations applied\r\n        return interpolatedWithSteps.replaceAll(/(left|right)/gi, substr =>\r\n            `<span class=\"is-negated\">${(substr === \"left\") ? \"right\" : \"left\"}</span>`\r\n        );\r\n    }\r\n\r\n    return interpolatedWithSteps;\r\n}\r\n\r\nexport function fixBinaryInstructions(q: Question) {\r\n    const htmlify = (rule: string) => rule.split(\", \").map(str => `<span class=\"subject\">${str}</span>`).join(\", \");\r\n    switch (q.type) {\r\n        case EnumQuestionType.LinearArrangement: {\r\n            return htmlify(q.rule) + \" are arranged in a <b>linear</b> way.\";\r\n        }\r\n        case EnumQuestionType.CircularArrangement: {\r\n            return htmlify(q.rule) + \" are arranged in a <b>circular</b> way.\";\r\n        }\r\n        default: {\r\n            return \"\";\r\n        }\r\n    }\r\n}\r\n\r\nfunction buildGraph(edgeList: [string, \"↔\" | \"→\" | \"←\", string][]) {\r\n    const graph = {} as Record<string, { out: Set<string>, in: Set<string> }>;\r\n    edgeList.forEach(edge => {\r\n        const [u, symbol, v] = edge;\r\n        if (!graph[u]) graph[u] = { out: new Set(), in: new Set() };\r\n        if (!graph[v]) graph[v] = { out: new Set(), in: new Set() };\r\n        if (symbol === \"→\") {\r\n            graph[u].out.add(v);\r\n            graph[v].in.add(u);\r\n        } else if (symbol === \"←\") {\r\n            graph[v].out.add(u);\r\n            graph[u].in.add(v);\r\n        } else if (symbol === \"↔\") {\r\n            // Bidirectional: add edges in both directions\r\n            graph[u].out.add(v);\r\n            graph[u].in.add(v);\r\n            graph[v].out.add(u);\r\n            graph[v].in.add(u);\r\n        }\r\n    });\r\n    return graph;\r\n}\r\n\r\n// Checks if two directed graphs (given as edge lists) are isomorphic\r\nexport function areGraphsIsomorphic(edgeList1: [string, \"↔\" | \"→\" | \"←\", string][], edgeList2: [string, \"↔\" | \"→\" | \"←\", string][]) {\r\n    const graph1 = buildGraph(edgeList1);\r\n    const graph2 = buildGraph(edgeList2);\r\n    const vertices1 = Object.keys(graph1);\r\n    const vertices2 = Object.keys(graph2);\r\n\r\n    // Quick check: graphs must have the same number of vertices\r\n    if (vertices1.length !== vertices2.length) return false;\r\n\r\n    // Quick check: compare sorted degree pairs [in-degree, out-degree]\r\n    const degrees1 = vertices1\r\n        .map(v => `${graph1[v].in.size},${graph1[v].out.size}`)\r\n        .sort()\r\n        .join(',');\r\n    const degrees2 = vertices2\r\n        .map(v => `${graph2[v].in.size},${graph2[v].out.size}`)\r\n        .sort()\r\n        .join(',');\r\n    if (degrees1 !== degrees2) return false;\r\n\r\n    const mapping = {} as Record<string, string>; // Mapping from graph1 vertices to graph2 vertices\r\n    const used = new Set(); // Set of graph2 vertices that have been mapped\r\n\r\n    // Checks the current partial mapping for consistency\r\n    function isValidMapping() {\r\n        for (const u of vertices1) {\r\n            if (mapping[u]) {\r\n                for (const v of graph1[u].out) {\r\n                    if (mapping[v]) {\r\n                        // Check that the mapped edge exists in graph2\r\n                        if (!graph2[mapping[u]].out.has(mapping[v])) {\r\n                            return false;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    // Recursively tries to assign each vertex in graph1 to a vertex in graph2\r\n    function backtrack(index: number) {\r\n        if (index === vertices1.length) {\r\n            // All vertices have been successfully mapped\r\n            return true;\r\n        }\r\n        const u = vertices1[index];\r\n        for (const v of vertices2) {\r\n            if (!used.has(v)) {\r\n                // Check if in-degree and out-degree match\r\n                if (graph1[u].in.size === graph2[v].in.size &&\r\n                    graph1[u].out.size === graph2[v].out.size) {\r\n                    mapping[u] = v;\r\n                    used.add(v);\r\n                    if (isValidMapping() && backtrack(index + 1)) {\r\n                        return true;\r\n                    }\r\n                    // Backtrack\r\n                    delete mapping[u];\r\n                    used.delete(v);\r\n                }\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    return backtrack(0);\r\n}","import { NgbDateStruct } from \"@ng-bootstrap/ng-bootstrap\";\r\nimport { MonthpickerStruct } from \"../shared/components/monthpicker/monthpicker.component\";\r\n\r\nexport function isoToStruct(iso: string): NgbDateStruct | null {\r\n\r\n    if (!iso || !/\\d{4}-[01]\\d-[0-3]\\d/.test(iso))\r\n        return null;\r\n\r\n    const [ year, month, day ] = [+iso.slice(0, 4), +iso.slice(5, 7), +iso.slice(8, 10)];\r\n    return { year, month, day };\r\n}\r\n\r\nexport function structToIso(struct: NgbDateStruct | MonthpickerStruct): string | null {\r\n\r\n    if (!struct || !struct.year || !struct.month)\r\n        return null;\r\n\r\n    const yyyy = struct.year;\r\n    const MM = (struct.month + \"\").padStart(2, \"0\");\r\n\r\n    let dd = \"01\";\r\n    if (\"day\" in struct)\r\n        dd = (struct.day + \"\").padStart(2, \"0\");\r\n\r\n    return yyyy + \"-\" + MM + \"-\" + dd;\r\n}\r\n\r\nexport function formatTime(ms: number): string {\r\n    const seconds = Math.floor(ms / 1000);\r\n    const minutes = Math.floor(seconds / 60);\r\n    const hours = Math.floor(minutes / 60);\r\n  \r\n    const remainingSeconds = seconds % 60;\r\n    const remainingMinutes = minutes % 60;\r\n  \r\n    const formattedHours = hours.toString().padStart(2, '0');\r\n    const formattedMinutes = remainingMinutes.toString().padStart(2, '0');\r\n    const formattedSeconds = remainingSeconds.toString().padStart(2, '0');\r\n    return `${formattedHours}:${formattedMinutes}:${formattedSeconds}`;\r\n}","export function downloadFile(result: Blob | ArrayBuffer, fileNameWithExt: string, customType?: string) {\r\n    const link = document.createElement(\"A\") as HTMLAnchorElement;\r\n    const file = new Blob([ result ], { type: customType || \"text/plain\" });\r\n    link.href = URL.createObjectURL(file);\r\n    link.download = fileNameWithExt;\r\n    link.click();\r\n    URL.revokeObjectURL(link.href);\r\n}\r\n\r\nexport function downloadFromURL(url: string) {\r\n    const dl = document.createElement(\"a\");\r\n    dl.target = \"_blank\";\r\n    dl.download = url;\r\n    dl.href = url;\r\n    dl.click();\r\n}"],"names":["LS_PROPS","EnumScreens","downloadFile","i0","CardDropdownComponent","constructor","sylSrv","router","modalService","ngAfterViewInit","toggleDarkmode","resetGame","content","open","centered","result","lsProp","localStorage","removeItem","location","reload","initial","setItem","JSON","stringify","getDarkmode","document","querySelector","setAttribute","removeAttribute","parse","getItem","import","evt","file","target","files","alert","reader","FileReader","onload","e","importJson","confirmation","confirm","data","key","value","Object","entries","setTimeout","window","readAsText","export","exportJson","propVal","Blob","type","Date","toLocaleDateString","selectors","decls","vars","consts","template","ctx","EnumTiers","TIER_COLORS","TIER_SCORE_RANGES","CardComponent","values","Infinity","ngContentSelectors","ModalLevelChangeComponent","activeModal","ngOnInit","contents","split","inputs","title","DailyProgressComponent","progressAndPerformanceService","right","timeout","wrong","percentageRight","percentageTimeout","percentageWrong","today","getToday","dailyProgressPercentage","calcDailyProgress","weeklyProgressPercentage","calcWeeklyProgress","trainingUnitPercentage","calcTrainingUnitPercentages","question","feedbackPage","playgroundMode","debug","EnumQuestionType","LS_DONT_SHOW","LS_HISTORY","LS_TIMER","LS_GAME_MODE","LS_DAILY_PROGRESS","LS_PG_SETTINGS","LS_DAILY_GOAL","LS_WEEKLY_GOAL","LS_TRAINING_UNIT","LS_TRAINING_UNIT_LENGTH","LS_PREMISES_UP_THRESHOLD","LS_PREMISES_DOWN_THRESHOLD","LS_SCORE","screen","push","EnumArrangements","NUMBER_WORDS","STRINGS","VALID_RULES","FORMS","NOUNS","EnumQuestionGroup","QUESTION_TYPE_SETTING_PARAMS","Distinction","enabled","minNumOfPremises","maxNumOfPremises","basic","ComparisonNumerical","group","Comparison","ComparisonChronological","Syllogism","LinearArrangement","Arrangement","CircularArrangement","Direction","Direction3DSpatial","Direction3DTemporal","GraphMatching","Analogy","Binary","DEFAULT_ENABLED_FLAGS","meaningfulWords","meta","negation","binary","and","nand","or","nor","xor","xnor","INF","Adept","bgColor","textColor","Scholar","Savant","Expert","Mastermind","Visionary","Genius","Virtuoso","Luminary","Prodigy","Oracle","Sage","Philosopher","Mystic","Transcendent","minScore","maxScore","TIER_SCORE_ADJUSTMENTS","increment","decrement","ORDERED_TIERS","keys","ORDERED_QUESTION_TYPES","TIERS_MATRIX","Question","getTime","jsonCopy","b2n","getNumOfEnabledQuestions","settings","basicQuestionFilter","filter","qs","reduce","a","c","getNumOfEnabledOperators","canGenerateQuestion","questionType","numOfPremises","enoughPremises","areSettingsInvalid","numOfEnabledBasicQuestions","numOfEnabledQuestions","numOfEnabledOperators","isAnalogyEnabled","isBinaryEnabled","QuestionSettings","params","freezeProp","setNumOfPremises","prop","defineProperty","configurable","writable","clampNumOfPremises","getNumOfPremises","Math","max","min","Settings","configSettings","initQuestionSettings","setEnable","setQuestionSettings","TypeBasedStats","TypeBasedStatsInner","TypeBasedStatsInner2","FeedbackComponent","LS_CUSTOM_TIMERS_KEY","GameComponent","gameTimerService","statsService","Array","start","timerTimeSeconds","checkQuestion","timerType","gameMode","trueButtonToTheRight","random","conclusion","navigate","Start","console","log","customTimers","kickTimer","correctRate","incorrectRate","timeoutRate","newLevelBonus","negationBonus","metaRelationBonus","questionPremises","premises","length","typeBasedStats","calcStats","tbs","stats","prevStats","currStats","avgTimeToRespond","count","last10Sum","last10Count","last10Correct","last10Incorrect","last10Timeout","negations","metaRelations","floor","ngOnDestroy","stop","HistoryComponent","toaster","allQuestions","questions","loadMoreQuestions","sliceIdx","slice","copyQuestion","q","el","createElement","body","appendChild","focus","select","execCommand","show","classname","removeChild","IntroComponent","OtherGamesComponent","capitalize","val","toUpperCase","decomposeCamelCase","splitted","map","x","join","PlaygroundModeComponent","loadPlaygroundSettings","genericEnables","field","binaryEnables","questionControls","fields","label","isFirst","qt","filler","step","play","formData","_qt","validationError","playgroundSettings","savePlaygroundSettings","serialized","deserialized","undefined","GameModeChooseComponent","checked","setMode","SharedModule","ModalTimerSettingsComponent","load","save","close","standalone","features","styles","FormControl","DEFAULT_DAILY_GOAL","DEFAULT_PREMISES_DOWN_THRESHOLD","DEFAULT_PREMISES_UP_THRESHOLD","DEFAULT_TRAINING_UNIT_LENGTH","DEFAULT_WEEKLY_GOAL","SettingsComponent","daily","dailyProgressMinutes","setValue","Number","valueChanges","subscribe","v","String","weekly","weeklyProgressMinutes","trainingUnitLength","premisesUpThreshold","premisesDownThreshold","getTrainingUnitSettings","TimerChooseComponent","setTimer","modalRef","formatTime","StartComponent","timePlayedToday","getTimePlayed","timePlayedThisWeek","getTimePlayedThisWeek","currTierIdx","tiers","findIndex","tier","nextTier","pointsRemaining","score","correctQs","userAnswer","isValid","incorrectQs","unansweredQs","currentStreak","streak","longestStreak","AccuracyStatsComponent","ErrorAnalysisComponent","typeMistakesCount","forEach","sorted","sort","b","mostCommonMistake","leastCommonMistake","StatsComponent","statsExportService","exportStats","TierStatsComponent","TimeBasedStatsComponent","timeBasedStats","ps","sum","fastest","slowest","dt","answeredAt","createdAt","totalPlayTime","fastestAnswer","slowestAnswer","TypeBasedStatsComponent","types","TiersMatrixComponent","userTierIdx","t","showDetails","i","j","cellSelI","cellSelJ","find","_","_i","_j","TutorialAnalogyComponent","TutorialBinaryComponent","TutorialCircularArrangementComponent","TutorialComparisonChronologicalComponent","TutorialComparisonNumericalComponent","TutorialDirection3DSpatialComponent","TutorialDirection3DTemporalComponent","TutorialDirectionComponent","TutorialDistinctionComponent","TutorialGraphMatchingComponent","TutorialLinearArrangementComponent","TutorialSyllogismComponent","TutorialComponent","navigation","getCurrentNavigation","showBack","extras","state","TutorialsComponent","questionTypes","history","reverse","seenQs","acc","curr","navTo","Tutorial","GameTimerService","seconds","Promise","resolve","reject","running","remainingSeconds","interval","setInterval","pause","warn","clearInterval","factory","providedIn","ProgressAndPerformanceService","DAILY_GOAL","dailyLS","WEEKLY_GOAL","weeklyLS","toISOString","getDailyProgress","lsDailyProgress","setDailyProgress","isoDate","ms","dailyProgress","getWeekStartDate","date","day","getDay","diff","getDate","setDate","weekStartDate","weeklyTotal","currentDate","trainingUnitLengthLS","premisesDownThresholdLS","premisesUpThresholdLS","getTrainingUnit","ls","getAllTrainingUnits","typeTrainingUnitMap","updateTrainingUnit","opts","trainingUnit","restartTrainingUnit","StatsExportService","formatDateTime","timestamp","toLocaleTimeString","getTimerSetting","timerTypeOnAnswer","csvContent","lastArcadeScore","index","timeTaken","userScore","row","toFixed","blob","url","URL","createObjectURL","click","StatsService","includes","questionsByType","completed","accuracy","correct","incorrect","last10Fastest","last10Slowest","coinFlip","getCircularWays","getLinearWays","getRandomRuleValid","getRandomSymbols","getRelation","getSymbols","isPremiseLikeConclusion","createMetaRelationships","metarelateArrangement","pickUniqueItems","horizontalShuffleArrangement","shuffle","interpolateArrangementRelationship","fixBinaryInstructions","getSyllogism","getRandomRuleInvalid","areGraphsIsomorphic","guid","Logger","SyllogimousService","_score","range","getSettingsFromTier","loadScore","syllogimous","firstDummyQuestion","createSyllogism","lsScore","pushIntoHistory","tierIdx","_tier","isActive","getCreateFn","createDistinction","createComparison","createArrangement","createDirection","createDirection3D","createGraphMatching","createAnalogy","createBinary","createRandomQuestion","logger","info","typeSettingTuples","getQuestionGroup","qg","groupsOfQuestions","choices","grouped","isUndefinedGroup","groupChoices","shouldIncludeQuestion","picked","randomQuestion","skipIntro","dontShowAnymore","Intro","Game","playArcadeMode","skipTutorial","now","isQuestionValid","componentInstance","currTier","ds","Feedback","Error","rule","bucket","rnd","flip","p","m","symbols","first","splice","prev","buckets","prevBucket","isSameAs","relation","sign","next","isMoreOrAfter","last","numOfEls","isLinear","getWays","words","instructions","relationshipAlreadyExistent","pA","pB","subjects","safe","premise","aid","indexOf","sub","bid","wayDescription","wayData","possible","relationship","description","steps","metaRelationships","uid","s","subject","ways","conclusions","interpolated","Next","metaRelationshipLookupMap","sideSize","round","sqrt","cardinalOppositeMap","coords","pool","ri","rj","y","remaining","copyOfCoords","pairs","pairAlreadyEstablished","usedCoords","coorda","coordb","error","getRelationship","cardinals","tweaked","every","numStepsVertical","numStepsHorizontal","pair","subja","subjb","ax","ay","bx","by","diffy","absdiffy","abs","diffx","absdiffx","Set","size","pop","rndIdx","negateRelationship","replaceAll","substr","stringifyProposition","isSpatial","cbrt","trasversalOpposite","alreadyHasCoords","rk","k","rt","subjectsAlreadyIncluded","coords3D","getTrasversalRelationship","tdiff","absdiff","n","SAME_CARDINAL_DIRECTION","getCardinalRelationship","_cardinals","at","bt","trasversalDifference","trasversalRelationship","cardinalRelationship","connector","edgeList","inverseMap","_words","isWordUsed","w","add","has","notAllUsed","some","edgeAlreadyExists","_a","_b","newEdge","foundIdx","edgeDiscrepancyCount","all3ElementsAre2Way","rel","newWords","edgeList2","rndBool","bool2subject","subjectPosIdx","subjectNegIdx","picked2","horizontalShuffle","_edgeList","graphPremises","graphConclusion","usedEdges","readable","edges","edge","negated","getSubject","readMap","isMetaRelated","getEdgeKey","edgeKey","pickedEdge","pickedEdgeKey","topType","choiceIndices","comparisonChoices","directionsChoices","arrangementChoices","choiceIndex","isValidSame","d","indexOfA","indexOfB","indexOfC","indexOfD","coordsa","coordsb","coordsc","coordsd","dxatob","dyatob","dxctod","dyctod","dtatob","dtctod","notes","idxA","idxB","idxC","idxD","waysA2B","waysC2D","isSameRelationship","operands","operandNames","operandTemplates","operandIndex","operand","ceil","instr","replace","isArray","eval","SyllogimousComponent","greatTitle","style","marginBottom","parseInt","CommonModule","RouterModule","routes","path","component","children","redirectTo","pathMatch","Stats","History","Tutorials","TiersMatrix","PlaygroundMode","OtherGames","SyllogimousModule","imports","forChild","declarations","level","isVerbose","setLevel","setVerbose","shouldLog","order","message","optionalParams","genBinKey","booleans","array","copy","currentIndex","randomIndex","extractSubjects","phrase","matchAll","subjectsOfPremises","subjectsOfConclusion","toCompare","seen","fill","_forms","major","minor","figure","getMetaReplacer","choosenPair","relations","choosenSubjects","isPositive","positive","negative","numOfMetaRelationships","pickedPremises","remainingPremises","pickedPremisesSubjects","remainingPremisesSubjects","bidirectionalRelationshipMap","newPremises","premiseSubjects","_c","_d","isSame","switchSubjects","AdjacentLeft","AdjacentRight","NStepsLeft","NStepsRight","InFront","Left","Right","forConclusion","isAdjLeft","isAdjRight","isNext","isLeft","isRight","getAdjLeft","getAdjRight","getInFront","getCWDist","getCCWDist","numWord","interpolatedWithSteps","htmlify","str","buildGraph","graph","u","symbol","out","in","edgeList1","graph1","graph2","vertices1","vertices2","degrees1","degrees2","mapping","used","isValidMapping","backtrack","delete","isoToStruct","iso","test","year","month","structToIso","struct","yyyy","MM","padStart","dd","minutes","hours","remainingMinutes","formattedHours","toString","formattedMinutes","formattedSeconds","fileNameWithExt","customType","link","href","download","revokeObjectURL","downloadFromURL","dl"],"sourceRoot":"webpack:///","x_google_ignoreList":[]}